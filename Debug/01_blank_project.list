
01_blank_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c94  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08004e98  08004e98  00014e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a4  080052a4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080052a4  080052a4  000152a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052ac  080052ac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052ac  080052ac  000152ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080052b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  200001dc  08005490  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08005490  00020268  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b19d  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b4b  00000000  00000000  0002b3a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  0002cef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000550  00000000  00000000  0002d518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d23  00000000  00000000  0002da68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a13c  00000000  00000000  0005678b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe124  00000000  00000000  000608c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015e9eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000280c  00000000  00000000  0015ea40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  0016124c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  00161300  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08004e7c 	.word	0x08004e7c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08004e7c 	.word	0x08004e7c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b96c 	b.w	8000f08 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9e08      	ldr	r6, [sp, #32]
 8000c4e:	460d      	mov	r5, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	468e      	mov	lr, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f040 8082 	bne.w	8000d5e <__udivmoddi4+0x116>
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	4617      	mov	r7, r2
 8000c5e:	d946      	bls.n	8000cee <__udivmoddi4+0xa6>
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b14a      	cbz	r2, 8000c7a <__udivmoddi4+0x32>
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa05 f302 	lsl.w	r3, r5, r2
 8000c6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c72:	4097      	lsls	r7, r2
 8000c74:	ea41 0e03 	orr.w	lr, r1, r3
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbbe fcf8 	udiv	ip, lr, r8
 8000c84:	b2b9      	uxth	r1, r7
 8000c86:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000c8a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c8e:	fb0c f001 	mul.w	r0, ip, r1
 8000c92:	4298      	cmp	r0, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000c9c:	f080 8116 	bcs.w	8000ecc <__udivmoddi4+0x284>
 8000ca0:	4298      	cmp	r0, r3
 8000ca2:	f240 8113 	bls.w	8000ecc <__udivmoddi4+0x284>
 8000ca6:	f1ac 0c02 	sub.w	ip, ip, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a1b      	subs	r3, r3, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f101 	mul.w	r1, r0, r1
 8000cc0:	42a1      	cmp	r1, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x90>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	f080 8101 	bcs.w	8000ed0 <__udivmoddi4+0x288>
 8000cce:	42a1      	cmp	r1, r4
 8000cd0:	f240 80fe 	bls.w	8000ed0 <__udivmoddi4+0x288>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	443c      	add	r4, r7
 8000cd8:	1a64      	subs	r4, r4, r1
 8000cda:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11e      	cbz	r6, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40d4      	lsrs	r4, r2
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xaa>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f282 	clz	r2, r2
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d14f      	bne.n	8000d9a <__udivmoddi4+0x152>
 8000cfa:	1bcb      	subs	r3, r1, r7
 8000cfc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	2101      	movs	r1, #1
 8000d06:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0a:	0c25      	lsrs	r5, r4, #16
 8000d0c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d10:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d14:	fb08 f30c 	mul.w	r3, r8, ip
 8000d18:	42ab      	cmp	r3, r5
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0xe4>
 8000d1c:	197d      	adds	r5, r7, r5
 8000d1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0xe2>
 8000d24:	42ab      	cmp	r3, r5
 8000d26:	f200 80e7 	bhi.w	8000ef8 <__udivmoddi4+0x2b0>
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	1aed      	subs	r5, r5, r3
 8000d2e:	b2a3      	uxth	r3, r4
 8000d30:	fbb5 f0fe 	udiv	r0, r5, lr
 8000d34:	fb0e 5510 	mls	r5, lr, r0, r5
 8000d38:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d3c:	fb08 f800 	mul.w	r8, r8, r0
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x10c>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x10a>
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	f200 80d7 	bhi.w	8000f00 <__udivmoddi4+0x2b8>
 8000d52:	4618      	mov	r0, r3
 8000d54:	eba4 0408 	sub.w	r4, r4, r8
 8000d58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d5c:	e7c0      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80af 	beq.w	8000ec6 <__udivmoddi4+0x27e>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d14b      	bne.n	8000e14 <__udivmoddi4+0x1cc>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0x13e>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80b7 	bhi.w	8000ef4 <__udivmoddi4+0x2ac>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0303 	sbc.w	r3, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	469e      	mov	lr, r3
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0aa      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d94:	e9c6 4e00 	strd	r4, lr, [r6]
 8000d98:	e7a7      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	4097      	lsls	r7, r2
 8000da4:	fa20 f00c 	lsr.w	r0, r0, ip
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000db0:	4318      	orrs	r0, r3
 8000db2:	fbbc f1fe 	udiv	r1, ip, lr
 8000db6:	0c05      	lsrs	r5, r0, #16
 8000db8:	fb0e cc11 	mls	ip, lr, r1, ip
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000dc4:	fb01 f308 	mul.w	r3, r1, r8
 8000dc8:	42ab      	cmp	r3, r5
 8000dca:	fa04 f402 	lsl.w	r4, r4, r2
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x19c>
 8000dd0:	197d      	adds	r5, r7, r5
 8000dd2:	f101 3cff 	add.w	ip, r1, #4294967295
 8000dd6:	f080 808b 	bcs.w	8000ef0 <__udivmoddi4+0x2a8>
 8000dda:	42ab      	cmp	r3, r5
 8000ddc:	f240 8088 	bls.w	8000ef0 <__udivmoddi4+0x2a8>
 8000de0:	3902      	subs	r1, #2
 8000de2:	443d      	add	r5, r7
 8000de4:	1aeb      	subs	r3, r5, r3
 8000de6:	b285      	uxth	r5, r0
 8000de8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000df4:	fb00 f308 	mul.w	r3, r0, r8
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x1c4>
 8000dfc:	197d      	adds	r5, r7, r5
 8000dfe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e02:	d271      	bcs.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e04:	42ab      	cmp	r3, r5
 8000e06:	d96f      	bls.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	443d      	add	r5, r7
 8000e0c:	1aeb      	subs	r3, r5, r3
 8000e0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e12:	e778      	b.n	8000d06 <__udivmoddi4+0xbe>
 8000e14:	f1c1 0c20 	rsb	ip, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 f70c 	lsr.w	r7, r2, ip
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	fa20 f40c 	lsr.w	r4, r0, ip
 8000e24:	fa05 f301 	lsl.w	r3, r5, r1
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa25 f50c 	lsr.w	r5, r5, ip
 8000e30:	431c      	orrs	r4, r3
 8000e32:	0c23      	lsrs	r3, r4, #16
 8000e34:	fbb5 f9fe 	udiv	r9, r5, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 5519 	mls	r5, lr, r9, r5
 8000e40:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000e44:	fb09 fa08 	mul.w	sl, r9, r8
 8000e48:	45aa      	cmp	sl, r5
 8000e4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4e:	fa00 f301 	lsl.w	r3, r0, r1
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x21e>
 8000e54:	197d      	adds	r5, r7, r5
 8000e56:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e5a:	d247      	bcs.n	8000eec <__udivmoddi4+0x2a4>
 8000e5c:	45aa      	cmp	sl, r5
 8000e5e:	d945      	bls.n	8000eec <__udivmoddi4+0x2a4>
 8000e60:	f1a9 0902 	sub.w	r9, r9, #2
 8000e64:	443d      	add	r5, r7
 8000e66:	eba5 050a 	sub.w	r5, r5, sl
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e70:	fb0e 5510 	mls	r5, lr, r0, r5
 8000e74:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e78:	fb00 f808 	mul.w	r8, r0, r8
 8000e7c:	45a0      	cmp	r8, r4
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x248>
 8000e80:	193c      	adds	r4, r7, r4
 8000e82:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e86:	d22d      	bcs.n	8000ee4 <__udivmoddi4+0x29c>
 8000e88:	45a0      	cmp	r8, r4
 8000e8a:	d92b      	bls.n	8000ee4 <__udivmoddi4+0x29c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e94:	eba4 0408 	sub.w	r4, r4, r8
 8000e98:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9c:	454c      	cmp	r4, r9
 8000e9e:	46c6      	mov	lr, r8
 8000ea0:	464d      	mov	r5, r9
 8000ea2:	d319      	bcc.n	8000ed8 <__udivmoddi4+0x290>
 8000ea4:	d016      	beq.n	8000ed4 <__udivmoddi4+0x28c>
 8000ea6:	b15e      	cbz	r6, 8000ec0 <__udivmoddi4+0x278>
 8000ea8:	ebb3 020e 	subs.w	r2, r3, lr
 8000eac:	eb64 0405 	sbc.w	r4, r4, r5
 8000eb0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb4:	40ca      	lsrs	r2, r1
 8000eb6:	ea4c 0202 	orr.w	r2, ip, r2
 8000eba:	40cc      	lsrs	r4, r1
 8000ebc:	e9c6 2400 	strd	r2, r4, [r6]
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	4631      	mov	r1, r6
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e70e      	b.n	8000cea <__udivmoddi4+0xa2>
 8000ecc:	46ac      	mov	ip, r5
 8000ece:	e6ed      	b.n	8000cac <__udivmoddi4+0x64>
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	e701      	b.n	8000cd8 <__udivmoddi4+0x90>
 8000ed4:	4543      	cmp	r3, r8
 8000ed6:	d2e6      	bcs.n	8000ea6 <__udivmoddi4+0x25e>
 8000ed8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000edc:	eb69 0507 	sbc.w	r5, r9, r7
 8000ee0:	3801      	subs	r0, #1
 8000ee2:	e7e0      	b.n	8000ea6 <__udivmoddi4+0x25e>
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	e7d3      	b.n	8000e90 <__udivmoddi4+0x248>
 8000ee8:	4660      	mov	r0, ip
 8000eea:	e78f      	b.n	8000e0c <__udivmoddi4+0x1c4>
 8000eec:	4681      	mov	r9, r0
 8000eee:	e7ba      	b.n	8000e66 <__udivmoddi4+0x21e>
 8000ef0:	4661      	mov	r1, ip
 8000ef2:	e777      	b.n	8000de4 <__udivmoddi4+0x19c>
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	e74b      	b.n	8000d90 <__udivmoddi4+0x148>
 8000ef8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000efc:	443d      	add	r5, r7
 8000efe:	e715      	b.n	8000d2c <__udivmoddi4+0xe4>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	e726      	b.n	8000d54 <__udivmoddi4+0x10c>
 8000f06:	bf00      	nop

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f1c:	d11b      	bne.n	8000f56 <HAL_GPIO_EXTI_Callback+0x4a>
	{
		EXTI->IMR &= ~(1UL << 13);
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x54>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x54>)
 8000f24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f28:	6013      	str	r3, [r2, #0]
		gpio_LED_Blue_write(1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f000 f8ce 	bl	80010cc <gpio_LED_Blue_write>
		for(int i =0; i <= 2160000; i++);
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	e002      	b.n	8000f3c <HAL_GPIO_EXTI_Callback+0x30>
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4a09      	ldr	r2, [pc, #36]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x58>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	ddf8      	ble.n	8000f36 <HAL_GPIO_EXTI_Callback+0x2a>
		gpio_LED_Blue_write(0);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f000 f8c1 	bl	80010cc <gpio_LED_Blue_write>
		EXTI->IMR |= (1UL << 13);
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x54>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x54>)
 8000f50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f54:	6013      	str	r3, [r2, #0]
	}
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40013c00 	.word	0x40013c00
 8000f64:	0020f580 	.word	0x0020f580

08000f68 <main>:

int main(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	HAL_Init(); // Initializing hal.
 8000f6e:	f000 f909 	bl	8001184 <HAL_Init>

	rcc_clock_config();
 8000f72:	f000 f8bd 	bl	80010f0 <rcc_clock_config>

	gpio_LED_Blue_init();
 8000f76:	f000 f885 	bl	8001084 <gpio_LED_Blue_init>

	exti_BUTTON_IT_init();
 8000f7a:	f000 f855 	bl	8001028 <exti_BUTTON_IT_init>

	printf("program starting...\r\n");
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <main+0x30>)
 8000f80:	f001 feca 	bl	8002d18 <puts>

	int counter = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]

    while(1)
    {
    	counter++;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	607b      	str	r3, [r7, #4]
    	HAL_Delay(100);
 8000f8e:	2064      	movs	r0, #100	; 0x64
 8000f90:	f000 f966 	bl	8001260 <HAL_Delay>
    	counter++;
 8000f94:	e7f8      	b.n	8000f88 <main+0x20>
 8000f96:	bf00      	nop
 8000f98:	08004e98 	.word	0x08004e98

08000f9c <__io_putchar>:
#include "nucleo_stm32f767xx_uart.h"

int __io_putchar(int ch);
int _write(int file,char *ptr, int len);

int __io_putchar(int ch) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	 uint8_t c[1];
	 c[0] = ch & 0x00FF;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	733b      	strb	r3, [r7, #12]
	 HAL_USART_Transmit(&husart3, &c[0], 1, 100);
 8000faa:	f107 010c 	add.w	r1, r7, #12
 8000fae:	2364      	movs	r3, #100	; 0x64
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <__io_putchar+0x28>)
 8000fb4:	f001 f8b0 	bl	8002118 <HAL_USART_Transmit>
	 return ch;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000204 	.word	0x20000204

08000fc8 <_write>:

int _write(int file,char *ptr, int len) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	e009      	b.n	8000fee <_write+0x26>
  __io_putchar(*ptr++);
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	60ba      	str	r2, [r7, #8]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ffda 	bl	8000f9c <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	dbf1      	blt.n	8000fda <_write+0x12>
 }
 return len;
 8000ff6:	687b      	ldr	r3, [r7, #4]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <SysTick_Handler>:

#include "stm32f7xx_it.h"


void SysTick_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001004:	f000 f910 	bl	8001228 <HAL_IncTick>

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001010:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001014:	f000 fc18 	bl	8001848 <HAL_GPIO_EXTI_IRQHandler>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <exti_BUTTON_IT_init>:

#include "nucleo_stm32f767xx_exti.h"


void exti_BUTTON_IT_init()
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <exti_BUTTON_IT_init+0x50>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a11      	ldr	r2, [pc, #68]	; (8001078 <exti_BUTTON_IT_init+0x50>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <exti_BUTTON_IT_init+0x50>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef btn_t;
    btn_t.Pin = GPIO_PIN_13;
 8001046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800104a:	607b      	str	r3, [r7, #4]
    btn_t.Mode = GPIO_MODE_IT_RISING;
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <exti_BUTTON_IT_init+0x54>)
 800104e:	60bb      	str	r3, [r7, #8]
    btn_t.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &btn_t);
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	4619      	mov	r1, r3
 8001058:	4809      	ldr	r0, [pc, #36]	; (8001080 <exti_BUTTON_IT_init+0x58>)
 800105a:	f000 fa33 	bl	80014c4 <HAL_GPIO_Init>

    /**
     * ENABLE NVIC
     */

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2105      	movs	r1, #5
 8001062:	2028      	movs	r0, #40	; 0x28
 8001064:	f000 f9f7 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001068:	2028      	movs	r0, #40	; 0x28
 800106a:	f000 fa10 	bl	800148e <HAL_NVIC_EnableIRQ>

}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	10110000 	.word	0x10110000
 8001080:	40020800 	.word	0x40020800

08001084 <gpio_LED_Blue_init>:

/*************************************************************************************************************************************************************************/


void gpio_LED_Blue_init()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <gpio_LED_Blue_init+0x40>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <gpio_LED_Blue_init+0x40>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <gpio_LED_Blue_init+0x40>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef led_blue_t;
    led_blue_t.Pin = BLUE_LED;
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	607b      	str	r3, [r7, #4]
    led_blue_t.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	60bb      	str	r3, [r7, #8]
    led_blue_t.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
    led_blue_t.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ae:	2302      	movs	r3, #2
 80010b0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &led_blue_t);
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	4619      	mov	r1, r3
 80010b6:	4804      	ldr	r0, [pc, #16]	; (80010c8 <gpio_LED_Blue_init+0x44>)
 80010b8:	f000 fa04 	bl	80014c4 <HAL_GPIO_Init>
}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020400 	.word	0x40020400

080010cc <gpio_LED_Blue_write>:

/*---------------------------------------------*/
void gpio_LED_Blue_write(bool state)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, state);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	461a      	mov	r2, r3
 80010da:	2180      	movs	r1, #128	; 0x80
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <gpio_LED_Blue_write+0x20>)
 80010de:	f000 fb9b 	bl	8001818 <HAL_GPIO_WritePin>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40020400 	.word	0x40020400

080010f0 <rcc_clock_config>:
 *      Author: Fahad
 */
#include "nucleo_stm32f767xx_rcc.h"

bool rcc_clock_config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b092      	sub	sp, #72	; 0x48
 80010f4:	af00      	add	r7, sp, #0


	  /*
	   * Oscillator initialization   *
	   */
	    RCC_OscInitTypeDef oscInit_t = {0};
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	2234      	movs	r2, #52	; 0x34
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 f938 	bl	8002374 <memset>



	    oscInit_t.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001104:	2302      	movs	r3, #2
 8001106:	617b      	str	r3, [r7, #20]
	    oscInit_t.HSIState = RCC_HSI_ON;
 8001108:	2301      	movs	r3, #1
 800110a:	623b      	str	r3, [r7, #32]
	    oscInit_t.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110c:	2310      	movs	r3, #16
 800110e:	627b      	str	r3, [r7, #36]	; 0x24

	    oscInit_t.PLL.PLLState = RCC_PLL_ON;
 8001110:	2302      	movs	r3, #2
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
	    oscInit_t.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001114:	2300      	movs	r3, #0
 8001116:	633b      	str	r3, [r7, #48]	; 0x30

	    oscInit_t.PLL.PLLM = 8;
 8001118:	2308      	movs	r3, #8
 800111a:	637b      	str	r3, [r7, #52]	; 0x34
	    oscInit_t.PLL.PLLN = 216;
 800111c:	23d8      	movs	r3, #216	; 0xd8
 800111e:	63bb      	str	r3, [r7, #56]	; 0x38
	    oscInit_t.PLL.PLLP = RCC_PLLP_DIV2;
 8001120:	2302      	movs	r3, #2
 8001122:	63fb      	str	r3, [r7, #60]	; 0x3c
	    oscInit_t.PLL.PLLQ = 2;
 8001124:	2302      	movs	r3, #2
 8001126:	643b      	str	r3, [r7, #64]	; 0x40
	    oscInit_t.PLL.PLLR = 2;
 8001128:	2302      	movs	r3, #2
 800112a:	647b      	str	r3, [r7, #68]	; 0x44

	    if(HAL_RCC_OscConfig(&oscInit_t)!= HAL_OK)
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4618      	mov	r0, r3
 8001132:	f000 fba1 	bl	8001878 <HAL_RCC_OscConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <rcc_clock_config+0x50>
	      {
	    		return false;
 800113c:	2300      	movs	r3, #0
 800113e:	e01d      	b.n	800117c <rcc_clock_config+0x8c>

	    /**
	     * clock initialization
	     */

	    RCC_ClkInitTypeDef oscClk_t = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
	    oscClk_t.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800114e:	230f      	movs	r3, #15
 8001150:	603b      	str	r3, [r7, #0]
	    oscClk_t.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001152:	2302      	movs	r3, #2
 8001154:	607b      	str	r3, [r7, #4]
	    oscClk_t.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
	    oscClk_t.APB1CLKDivider = RCC_HCLK_DIV4;
 800115a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800115e:	60fb      	str	r3, [r7, #12]
	    oscClk_t.APB2CLKDivider = RCC_HCLK_DIV2;
 8001160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001164:	613b      	str	r3, [r7, #16]

	    if (HAL_RCC_ClockConfig(&oscClk_t, FLASH_LATENCY_7) != HAL_OK){
 8001166:	463b      	mov	r3, r7
 8001168:	2107      	movs	r1, #7
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fe32 	bl	8001dd4 <HAL_RCC_ClockConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <rcc_clock_config+0x8a>
	    	return false;
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <rcc_clock_config+0x8c>
	    }
	    return true;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3748      	adds	r7, #72	; 0x48
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_Init+0x34>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <HAL_Init+0x34>)
 800118e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001192:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_Init+0x34>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_Init+0x34>)
 800119a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 f94d 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a6:	200f      	movs	r0, #15
 80011a8:	f000 f80e 	bl	80011c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80011ac:	f000 f806 	bl	80011bc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023c00 	.word	0x40023c00

080011bc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x54>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x58>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f95f 	bl	80014aa <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f000 f927 	bl	8001456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <HAL_InitTick+0x5c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000000 	.word	0x20000000
 8001220:	20000008 	.word	0x20000008
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_IncTick+0x1c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_IncTick+0x20>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a03      	ldr	r2, [pc, #12]	; (8001248 <HAL_IncTick+0x20>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	20000008 	.word	0x20000008
 8001248:	20000254 	.word	0x20000254

0800124c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b02      	ldr	r3, [pc, #8]	; (800125c <HAL_GetTick+0x10>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	20000254 	.word	0x20000254

08001260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff fff0 	bl	800124c <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d005      	beq.n	8001286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_Delay+0x44>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001286:	bf00      	nop
 8001288:	f7ff ffe0 	bl	800124c <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	d8f7      	bhi.n	8001288 <HAL_Delay+0x28>
  {
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000008 	.word	0x20000008

080012a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <__NVIC_SetPriorityGrouping+0x40>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c4:	4013      	ands	r3, r2
 80012c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x40>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00
 80012ec:	05fa0000 	.word	0x05fa0000

080012f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <__NVIC_GetPriorityGrouping+0x18>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	f003 0307 	and.w	r3, r3, #7
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	2b00      	cmp	r3, #0
 800131c:	db0b      	blt.n	8001336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f003 021f 	and.w	r2, r3, #31
 8001324:	4906      	ldr	r1, [pc, #24]	; (8001340 <__NVIC_EnableIRQ+0x34>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	2001      	movs	r0, #1
 800132e:	fa00 f202 	lsl.w	r2, r0, r2
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	; (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800140c:	d301      	bcc.n	8001412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140e:	2301      	movs	r3, #1
 8001410:	e00f      	b.n	8001432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <SysTick_Config+0x40>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141a:	210f      	movs	r1, #15
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f7ff ff90 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <SysTick_Config+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <SysTick_Config+0x40>)
 800142c:	2207      	movs	r2, #7
 800142e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff2d 	bl	80012a8 <__NVIC_SetPriorityGrouping>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff42 	bl	80012f0 <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff90 	bl	8001398 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5f 	bl	8001344 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff35 	bl	800130c <__NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffa2 	bl	80013fc <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	e175      	b.n	80017d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014e4:	2201      	movs	r2, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f040 8164 	bne.w	80017ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d00b      	beq.n	8001522 <HAL_GPIO_Init+0x5e>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d007      	beq.n	8001522 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001516:	2b11      	cmp	r3, #17
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b12      	cmp	r3, #18
 8001520:	d130      	bne.n	8001584 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001558:	2201      	movs	r2, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	091b      	lsrs	r3, r3, #4
 800156e:	f003 0201 	and.w	r2, r3, #1
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x100>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b12      	cmp	r3, #18
 80015c2:	d123      	bne.n	800160c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	08da      	lsrs	r2, r3, #3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3208      	adds	r2, #8
 80015cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	220f      	movs	r2, #15
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	691a      	ldr	r2, [r3, #16]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	08da      	lsrs	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3208      	adds	r2, #8
 8001606:	69b9      	ldr	r1, [r7, #24]
 8001608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0203 	and.w	r2, r3, #3
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80be 	beq.w	80017ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	4b65      	ldr	r3, [pc, #404]	; (80017e4 <HAL_GPIO_Init+0x320>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	4a64      	ldr	r2, [pc, #400]	; (80017e4 <HAL_GPIO_Init+0x320>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001658:	6453      	str	r3, [r2, #68]	; 0x44
 800165a:	4b62      	ldr	r3, [pc, #392]	; (80017e4 <HAL_GPIO_Init+0x320>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001666:	4a60      	ldr	r2, [pc, #384]	; (80017e8 <HAL_GPIO_Init+0x324>)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a57      	ldr	r2, [pc, #348]	; (80017ec <HAL_GPIO_Init+0x328>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d037      	beq.n	8001702 <HAL_GPIO_Init+0x23e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a56      	ldr	r2, [pc, #344]	; (80017f0 <HAL_GPIO_Init+0x32c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d031      	beq.n	80016fe <HAL_GPIO_Init+0x23a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a55      	ldr	r2, [pc, #340]	; (80017f4 <HAL_GPIO_Init+0x330>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d02b      	beq.n	80016fa <HAL_GPIO_Init+0x236>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a54      	ldr	r2, [pc, #336]	; (80017f8 <HAL_GPIO_Init+0x334>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d025      	beq.n	80016f6 <HAL_GPIO_Init+0x232>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a53      	ldr	r2, [pc, #332]	; (80017fc <HAL_GPIO_Init+0x338>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d01f      	beq.n	80016f2 <HAL_GPIO_Init+0x22e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a52      	ldr	r2, [pc, #328]	; (8001800 <HAL_GPIO_Init+0x33c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d019      	beq.n	80016ee <HAL_GPIO_Init+0x22a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a51      	ldr	r2, [pc, #324]	; (8001804 <HAL_GPIO_Init+0x340>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_GPIO_Init+0x226>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a50      	ldr	r2, [pc, #320]	; (8001808 <HAL_GPIO_Init+0x344>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00d      	beq.n	80016e6 <HAL_GPIO_Init+0x222>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4f      	ldr	r2, [pc, #316]	; (800180c <HAL_GPIO_Init+0x348>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d007      	beq.n	80016e2 <HAL_GPIO_Init+0x21e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4e      	ldr	r2, [pc, #312]	; (8001810 <HAL_GPIO_Init+0x34c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d101      	bne.n	80016de <HAL_GPIO_Init+0x21a>
 80016da:	2309      	movs	r3, #9
 80016dc:	e012      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016de:	230a      	movs	r3, #10
 80016e0:	e010      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016e2:	2308      	movs	r3, #8
 80016e4:	e00e      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016e6:	2307      	movs	r3, #7
 80016e8:	e00c      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016ea:	2306      	movs	r3, #6
 80016ec:	e00a      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016ee:	2305      	movs	r3, #5
 80016f0:	e008      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016f2:	2304      	movs	r3, #4
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016f6:	2303      	movs	r3, #3
 80016f8:	e004      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e002      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <HAL_GPIO_Init+0x240>
 8001702:	2300      	movs	r3, #0
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	f002 0203 	and.w	r2, r2, #3
 800170a:	0092      	lsls	r2, r2, #2
 800170c:	4093      	lsls	r3, r2
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001714:	4934      	ldr	r1, [pc, #208]	; (80017e8 <HAL_GPIO_Init+0x324>)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	3302      	adds	r3, #2
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001722:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <HAL_GPIO_Init+0x350>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001746:	4a33      	ldr	r2, [pc, #204]	; (8001814 <HAL_GPIO_Init+0x350>)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800174c:	4b31      	ldr	r3, [pc, #196]	; (8001814 <HAL_GPIO_Init+0x350>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001770:	4a28      	ldr	r2, [pc, #160]	; (8001814 <HAL_GPIO_Init+0x350>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001776:	4b27      	ldr	r3, [pc, #156]	; (8001814 <HAL_GPIO_Init+0x350>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800179a:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <HAL_GPIO_Init+0x350>)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017a0:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <HAL_GPIO_Init+0x350>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017c4:	4a13      	ldr	r2, [pc, #76]	; (8001814 <HAL_GPIO_Init+0x350>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3301      	adds	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	2b0f      	cmp	r3, #15
 80017d4:	f67f ae86 	bls.w	80014e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40013800 	.word	0x40013800
 80017ec:	40020000 	.word	0x40020000
 80017f0:	40020400 	.word	0x40020400
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40020c00 	.word	0x40020c00
 80017fc:	40021000 	.word	0x40021000
 8001800:	40021400 	.word	0x40021400
 8001804:	40021800 	.word	0x40021800
 8001808:	40021c00 	.word	0x40021c00
 800180c:	40022000 	.word	0x40022000
 8001810:	40022400 	.word	0x40022400
 8001814:	40013c00 	.word	0x40013c00

08001818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
 8001824:	4613      	mov	r3, r2
 8001826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001828:	787b      	ldrb	r3, [r7, #1]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001834:	e003      	b.n	800183e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	041a      	lsls	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	619a      	str	r2, [r3, #24]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d006      	beq.n	800186c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fb50 	bl	8000f0c <HAL_GPIO_EXTI_Callback>
  }
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40013c00 	.word	0x40013c00

08001878 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e29b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 8087 	beq.w	80019aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800189c:	4b96      	ldr	r3, [pc, #600]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d00c      	beq.n	80018c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018a8:	4b93      	ldr	r3, [pc, #588]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d112      	bne.n	80018da <HAL_RCC_OscConfig+0x62>
 80018b4:	4b90      	ldr	r3, [pc, #576]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018c0:	d10b      	bne.n	80018da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c2:	4b8d      	ldr	r3, [pc, #564]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d06c      	beq.n	80019a8 <HAL_RCC_OscConfig+0x130>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d168      	bne.n	80019a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e275      	b.n	8001dc6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x7a>
 80018e4:	4b84      	ldr	r3, [pc, #528]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a83      	ldr	r2, [pc, #524]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 80018ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e02e      	b.n	8001950 <HAL_RCC_OscConfig+0xd8>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0x9c>
 80018fa:	4b7f      	ldr	r3, [pc, #508]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a7e      	ldr	r2, [pc, #504]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b7c      	ldr	r3, [pc, #496]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a7b      	ldr	r2, [pc, #492]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 800190c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e01d      	b.n	8001950 <HAL_RCC_OscConfig+0xd8>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0xc0>
 800191e:	4b76      	ldr	r3, [pc, #472]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a75      	ldr	r2, [pc, #468]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b73      	ldr	r3, [pc, #460]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a72      	ldr	r2, [pc, #456]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0xd8>
 8001938:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a6e      	ldr	r2, [pc, #440]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 800193e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b6c      	ldr	r3, [pc, #432]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a6b      	ldr	r2, [pc, #428]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff fc78 	bl	800124c <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff fc74 	bl	800124c <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	; 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e229      	b.n	8001dc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b61      	ldr	r3, [pc, #388]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0xe8>
 800197e:	e014      	b.n	80019aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff fc64 	bl	800124c <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff fc60 	bl	800124c <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	; 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e215      	b.n	8001dc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	4b57      	ldr	r3, [pc, #348]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x110>
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d069      	beq.n	8001a8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019b6:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00b      	beq.n	80019da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019c2:	4b4d      	ldr	r3, [pc, #308]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d11c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x190>
 80019ce:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d116      	bne.n	8001a08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_RCC_OscConfig+0x17a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e1e9      	b.n	8001dc6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	493d      	ldr	r1, [pc, #244]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a06:	e040      	b.n	8001a8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d023      	beq.n	8001a58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a10:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a38      	ldr	r2, [pc, #224]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fc16 	bl	800124c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a24:	f7ff fc12 	bl	800124c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e1c7      	b.n	8001dc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a36:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4929      	ldr	r1, [pc, #164]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]
 8001a56:	e018      	b.n	8001a8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a58:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a26      	ldr	r2, [pc, #152]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001a5e:	f023 0301 	bic.w	r3, r3, #1
 8001a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff fbf2 	bl	800124c <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6c:	f7ff fbee 	bl	800124c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e1a3      	b.n	8001dc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d038      	beq.n	8001b08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d019      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa2:	4a15      	ldr	r2, [pc, #84]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fbcf 	bl	800124c <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab2:	f7ff fbcb 	bl	800124c <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e180      	b.n	8001dc6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x23a>
 8001ad0:	e01a      	b.n	8001b08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad6:	4a08      	ldr	r2, [pc, #32]	; (8001af8 <HAL_RCC_OscConfig+0x280>)
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7ff fbb5 	bl	800124c <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7ff fbb1 	bl	800124c <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d903      	bls.n	8001afc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e166      	b.n	8001dc6 <HAL_RCC_OscConfig+0x54e>
 8001af8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	4b92      	ldr	r3, [pc, #584]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1ee      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80a4 	beq.w	8001c5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b16:	4b8c      	ldr	r3, [pc, #560]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10d      	bne.n	8001b3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	4b89      	ldr	r3, [pc, #548]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a88      	ldr	r2, [pc, #544]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b86      	ldr	r3, [pc, #536]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b3e:	4b83      	ldr	r3, [pc, #524]	; (8001d4c <HAL_RCC_OscConfig+0x4d4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d118      	bne.n	8001b7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b4a:	4b80      	ldr	r3, [pc, #512]	; (8001d4c <HAL_RCC_OscConfig+0x4d4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a7f      	ldr	r2, [pc, #508]	; (8001d4c <HAL_RCC_OscConfig+0x4d4>)
 8001b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b56:	f7ff fb79 	bl	800124c <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5e:	f7ff fb75 	bl	800124c <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b64      	cmp	r3, #100	; 0x64
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e12a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b70:	4b76      	ldr	r3, [pc, #472]	; (8001d4c <HAL_RCC_OscConfig+0x4d4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d106      	bne.n	8001b92 <HAL_RCC_OscConfig+0x31a>
 8001b84:	4b70      	ldr	r3, [pc, #448]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b88:	4a6f      	ldr	r2, [pc, #444]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b90:	e02d      	b.n	8001bee <HAL_RCC_OscConfig+0x376>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x33c>
 8001b9a:	4b6b      	ldr	r3, [pc, #428]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	4a6a      	ldr	r2, [pc, #424]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba6:	4b68      	ldr	r3, [pc, #416]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	4a67      	ldr	r2, [pc, #412]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001bac:	f023 0304 	bic.w	r3, r3, #4
 8001bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb2:	e01c      	b.n	8001bee <HAL_RCC_OscConfig+0x376>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d10c      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x35e>
 8001bbc:	4b62      	ldr	r3, [pc, #392]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc0:	4a61      	ldr	r2, [pc, #388]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc8:	4b5f      	ldr	r3, [pc, #380]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	4a5e      	ldr	r2, [pc, #376]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd4:	e00b      	b.n	8001bee <HAL_RCC_OscConfig+0x376>
 8001bd6:	4b5c      	ldr	r3, [pc, #368]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bda:	4a5b      	ldr	r2, [pc, #364]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	6713      	str	r3, [r2, #112]	; 0x70
 8001be2:	4b59      	ldr	r3, [pc, #356]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	4a58      	ldr	r2, [pc, #352]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001be8:	f023 0304 	bic.w	r3, r3, #4
 8001bec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d015      	beq.n	8001c22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf6:	f7ff fb29 	bl	800124c <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f7ff fb25 	bl	800124c <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e0d8      	b.n	8001dc6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c14:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0ee      	beq.n	8001bfe <HAL_RCC_OscConfig+0x386>
 8001c20:	e014      	b.n	8001c4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c22:	f7ff fb13 	bl	800124c <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c28:	e00a      	b.n	8001c40 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2a:	f7ff fb0f 	bl	800124c <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e0c2      	b.n	8001dc6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c40:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1ee      	bne.n	8001c2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c4c:	7dfb      	ldrb	r3, [r7, #23]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d105      	bne.n	8001c5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a3c      	ldr	r2, [pc, #240]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80ae 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c68:	4b37      	ldr	r3, [pc, #220]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d06d      	beq.n	8001d50 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d14b      	bne.n	8001d14 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7c:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a31      	ldr	r2, [pc, #196]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7ff fae0 	bl	800124c <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c90:	f7ff fadc 	bl	800124c <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e091      	b.n	8001dc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca2:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69da      	ldr	r2, [r3, #28]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	019b      	lsls	r3, r3, #6
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	041b      	lsls	r3, r3, #16
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	071b      	lsls	r3, r3, #28
 8001cda:	491b      	ldr	r1, [pc, #108]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff faae 	bl	800124c <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7ff faaa 	bl	800124c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e05f      	b.n	8001dc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x47c>
 8001d12:	e057      	b.n	8001dc4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff fa94 	bl	800124c <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d28:	f7ff fa90 	bl	800124c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e045      	b.n	8001dc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_RCC_OscConfig+0x4d0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x4b0>
 8001d46:	e03d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x54c>
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d50:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <HAL_RCC_OscConfig+0x558>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d030      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d129      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d122      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d80:	4013      	ands	r3, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d86:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d119      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d10f      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800

08001dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0d0      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dec:	4b6a      	ldr	r3, [pc, #424]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d910      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4b67      	ldr	r3, [pc, #412]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 020f 	bic.w	r2, r3, #15
 8001e02:	4965      	ldr	r1, [pc, #404]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0b8      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d020      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e34:	4b59      	ldr	r3, [pc, #356]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4a58      	ldr	r2, [pc, #352]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e4c:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4a52      	ldr	r2, [pc, #328]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e58:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	494d      	ldr	r1, [pc, #308]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d040      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d115      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e07f      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e96:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d109      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e073      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea6:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e06b      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb6:	4b39      	ldr	r3, [pc, #228]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f023 0203 	bic.w	r2, r3, #3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	4936      	ldr	r1, [pc, #216]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ec8:	f7ff f9c0 	bl	800124c <HAL_GetTick>
 8001ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed0:	f7ff f9bc 	bl	800124c <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e053      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 020c 	and.w	r2, r3, #12
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d1eb      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b27      	ldr	r3, [pc, #156]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d210      	bcs.n	8001f28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 020f 	bic.w	r2, r3, #15
 8001f0e:	4922      	ldr	r1, [pc, #136]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e032      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4916      	ldr	r1, [pc, #88]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	490e      	ldr	r1, [pc, #56]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f66:	f000 f821 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	490a      	ldr	r1, [pc, #40]	; (8001fa0 <HAL_RCC_ClockConfig+0x1cc>)
 8001f78:	5ccb      	ldrb	r3, [r1, r3]
 8001f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7e:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <HAL_RCC_ClockConfig+0x1d0>)
 8001f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_RCC_ClockConfig+0x1d4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff f91e 	bl	80011c8 <HAL_InitTick>

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023c00 	.word	0x40023c00
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	08004eb0 	.word	0x08004eb0
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	20000004 	.word	0x20000004

08001fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fac:	b5b0      	push	{r4, r5, r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	6079      	str	r1, [r7, #4]
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	60f9      	str	r1, [r7, #12]
 8001fba:	2100      	movs	r1, #0
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fc2:	4952      	ldr	r1, [pc, #328]	; (800210c <HAL_RCC_GetSysClockFreq+0x160>)
 8001fc4:	6889      	ldr	r1, [r1, #8]
 8001fc6:	f001 010c 	and.w	r1, r1, #12
 8001fca:	2908      	cmp	r1, #8
 8001fcc:	d00d      	beq.n	8001fea <HAL_RCC_GetSysClockFreq+0x3e>
 8001fce:	2908      	cmp	r1, #8
 8001fd0:	f200 8094 	bhi.w	80020fc <HAL_RCC_GetSysClockFreq+0x150>
 8001fd4:	2900      	cmp	r1, #0
 8001fd6:	d002      	beq.n	8001fde <HAL_RCC_GetSysClockFreq+0x32>
 8001fd8:	2904      	cmp	r1, #4
 8001fda:	d003      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x38>
 8001fdc:	e08e      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fde:	4b4c      	ldr	r3, [pc, #304]	; (8002110 <HAL_RCC_GetSysClockFreq+0x164>)
 8001fe0:	60bb      	str	r3, [r7, #8]
      break;
 8001fe2:	e08e      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fe4:	4b4b      	ldr	r3, [pc, #300]	; (8002114 <HAL_RCC_GetSysClockFreq+0x168>)
 8001fe6:	60bb      	str	r3, [r7, #8]
      break;
 8001fe8:	e08b      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fea:	4948      	ldr	r1, [pc, #288]	; (800210c <HAL_RCC_GetSysClockFreq+0x160>)
 8001fec:	6849      	ldr	r1, [r1, #4]
 8001fee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001ff2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ff4:	4945      	ldr	r1, [pc, #276]	; (800210c <HAL_RCC_GetSysClockFreq+0x160>)
 8001ff6:	6849      	ldr	r1, [r1, #4]
 8001ff8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001ffc:	2900      	cmp	r1, #0
 8001ffe:	d024      	beq.n	800204a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002000:	4942      	ldr	r1, [pc, #264]	; (800210c <HAL_RCC_GetSysClockFreq+0x160>)
 8002002:	6849      	ldr	r1, [r1, #4]
 8002004:	0989      	lsrs	r1, r1, #6
 8002006:	4608      	mov	r0, r1
 8002008:	f04f 0100 	mov.w	r1, #0
 800200c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002010:	f04f 0500 	mov.w	r5, #0
 8002014:	ea00 0204 	and.w	r2, r0, r4
 8002018:	ea01 0305 	and.w	r3, r1, r5
 800201c:	493d      	ldr	r1, [pc, #244]	; (8002114 <HAL_RCC_GetSysClockFreq+0x168>)
 800201e:	fb01 f003 	mul.w	r0, r1, r3
 8002022:	2100      	movs	r1, #0
 8002024:	fb01 f102 	mul.w	r1, r1, r2
 8002028:	1844      	adds	r4, r0, r1
 800202a:	493a      	ldr	r1, [pc, #232]	; (8002114 <HAL_RCC_GetSysClockFreq+0x168>)
 800202c:	fba2 0101 	umull	r0, r1, r2, r1
 8002030:	1863      	adds	r3, r4, r1
 8002032:	4619      	mov	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	461a      	mov	r2, r3
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	f7fe fdec 	bl	8000c18 <__aeabi_uldivmod>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4613      	mov	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e04a      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800204a:	4b30      	ldr	r3, [pc, #192]	; (800210c <HAL_RCC_GetSysClockFreq+0x160>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	099b      	lsrs	r3, r3, #6
 8002050:	461a      	mov	r2, r3
 8002052:	f04f 0300 	mov.w	r3, #0
 8002056:	f240 10ff 	movw	r0, #511	; 0x1ff
 800205a:	f04f 0100 	mov.w	r1, #0
 800205e:	ea02 0400 	and.w	r4, r2, r0
 8002062:	ea03 0501 	and.w	r5, r3, r1
 8002066:	4620      	mov	r0, r4
 8002068:	4629      	mov	r1, r5
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	014b      	lsls	r3, r1, #5
 8002074:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002078:	0142      	lsls	r2, r0, #5
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	1b00      	subs	r0, r0, r4
 8002080:	eb61 0105 	sbc.w	r1, r1, r5
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	018b      	lsls	r3, r1, #6
 800208e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002092:	0182      	lsls	r2, r0, #6
 8002094:	1a12      	subs	r2, r2, r0
 8002096:	eb63 0301 	sbc.w	r3, r3, r1
 800209a:	f04f 0000 	mov.w	r0, #0
 800209e:	f04f 0100 	mov.w	r1, #0
 80020a2:	00d9      	lsls	r1, r3, #3
 80020a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020a8:	00d0      	lsls	r0, r2, #3
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	1912      	adds	r2, r2, r4
 80020b0:	eb45 0303 	adc.w	r3, r5, r3
 80020b4:	f04f 0000 	mov.w	r0, #0
 80020b8:	f04f 0100 	mov.w	r1, #0
 80020bc:	0299      	lsls	r1, r3, #10
 80020be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020c2:	0290      	lsls	r0, r2, #10
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	461a      	mov	r2, r3
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	f7fe fda0 	bl	8000c18 <__aeabi_uldivmod>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4613      	mov	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_RCC_GetSysClockFreq+0x160>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	0c1b      	lsrs	r3, r3, #16
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	3301      	adds	r3, #1
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f8:	60bb      	str	r3, [r7, #8]
      break;
 80020fa:	e002      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <HAL_RCC_GetSysClockFreq+0x164>)
 80020fe:	60bb      	str	r3, [r7, #8]
      break;
 8002100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002102:	68bb      	ldr	r3, [r7, #8]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bdb0      	pop	{r4, r5, r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	00f42400 	.word	0x00f42400
 8002114:	017d7840 	.word	0x017d7840

08002118 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	4613      	mov	r3, r2
 8002126:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b01      	cmp	r3, #1
 8002132:	f040 8095 	bne.w	8002260 <HAL_USART_Transmit+0x148>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_USART_Transmit+0x2a>
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e08d      	b.n	8002262 <HAL_USART_Transmit+0x14a>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_USART_Transmit+0x3c>
 8002150:	2302      	movs	r3, #2
 8002152:	e086      	b.n	8002262 <HAL_USART_Transmit+0x14a>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2212      	movs	r2, #18
 8002166:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800216a:	f7ff f86f 	bl	800124c <HAL_GetTick>
 800216e:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	88fa      	ldrh	r2, [r7, #6]
 8002174:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	88fa      	ldrh	r2, [r7, #6]
 800217a:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002184:	d108      	bne.n	8002198 <HAL_USART_Transmit+0x80>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d104      	bne.n	8002198 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	e003      	b.n	80021a0 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800219c:	2300      	movs	r3, #0
 800219e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80021a0:	e02a      	b.n	80021f8 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2200      	movs	r2, #0
 80021aa:	2180      	movs	r1, #128	; 0x80
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f85c 	bl	800226a <USART_WaitOnFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e052      	b.n	8002262 <HAL_USART_Transmit+0x14a>
      }
      if (ptxdata8bits == NULL)
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10b      	bne.n	80021da <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021d0:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	3302      	adds	r3, #2
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	e007      	b.n	80021ea <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	3301      	adds	r3, #1
 80021e8:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1cf      	bne.n	80021a2 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2200      	movs	r2, #0
 800220a:	2140      	movs	r1, #64	; 0x40
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f82c 	bl	800226a <USART_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e022      	b.n	8002262 <HAL_USART_Transmit+0x14a>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2240      	movs	r2, #64	; 0x40
 8002222:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2208      	movs	r2, #8
 800222a:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0208 	orr.w	r2, r2, #8
 800223a:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699a      	ldr	r2, [r3, #24]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0210 	orr.w	r2, r2, #16
 800224a:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	e000      	b.n	8002262 <HAL_USART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002260:	2302      	movs	r3, #2
  }
}
 8002262:	4618      	mov	r0, r3
 8002264:	3720      	adds	r7, #32
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b084      	sub	sp, #16
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	4613      	mov	r3, r2
 8002278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800227a:	e018      	b.n	80022ae <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002282:	d014      	beq.n	80022ae <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002284:	f7fe ffe2 	bl	800124c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	429a      	cmp	r2, r3
 8002292:	d302      	bcc.n	800229a <USART_WaitOnFlagUntilTimeout+0x30>
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e00f      	b.n	80022ce <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69da      	ldr	r2, [r3, #28]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4013      	ands	r3, r2
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	bf0c      	ite	eq
 80022be:	2301      	moveq	r3, #1
 80022c0:	2300      	movne	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d0d7      	beq.n	800227c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002310 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022dc:	480d      	ldr	r0, [pc, #52]	; (8002314 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022de:	490e      	ldr	r1, [pc, #56]	; (8002318 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022e0:	4a0e      	ldr	r2, [pc, #56]	; (800231c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e4:	e002      	b.n	80022ec <LoopCopyDataInit>

080022e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ea:	3304      	adds	r3, #4

080022ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f0:	d3f9      	bcc.n	80022e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022f2:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022f4:	4c0b      	ldr	r4, [pc, #44]	; (8002324 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f8:	e001      	b.n	80022fe <LoopFillZerobss>

080022fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022fc:	3204      	adds	r2, #4

080022fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002300:	d3fb      	bcc.n	80022fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002302:	f7fe fe8b 	bl	800101c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002306:	f000 f811 	bl	800232c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800230a:	f7fe fe2d 	bl	8000f68 <main>
  bx  lr    
 800230e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002310:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002318:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800231c:	080052b4 	.word	0x080052b4
  ldr r2, =_sbss
 8002320:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002324:	20000268 	.word	0x20000268

08002328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002328:	e7fe      	b.n	8002328 <ADC_IRQHandler>
	...

0800232c <__libc_init_array>:
 800232c:	b570      	push	{r4, r5, r6, lr}
 800232e:	4d0d      	ldr	r5, [pc, #52]	; (8002364 <__libc_init_array+0x38>)
 8002330:	4c0d      	ldr	r4, [pc, #52]	; (8002368 <__libc_init_array+0x3c>)
 8002332:	1b64      	subs	r4, r4, r5
 8002334:	10a4      	asrs	r4, r4, #2
 8002336:	2600      	movs	r6, #0
 8002338:	42a6      	cmp	r6, r4
 800233a:	d109      	bne.n	8002350 <__libc_init_array+0x24>
 800233c:	4d0b      	ldr	r5, [pc, #44]	; (800236c <__libc_init_array+0x40>)
 800233e:	4c0c      	ldr	r4, [pc, #48]	; (8002370 <__libc_init_array+0x44>)
 8002340:	f002 fd9c 	bl	8004e7c <_init>
 8002344:	1b64      	subs	r4, r4, r5
 8002346:	10a4      	asrs	r4, r4, #2
 8002348:	2600      	movs	r6, #0
 800234a:	42a6      	cmp	r6, r4
 800234c:	d105      	bne.n	800235a <__libc_init_array+0x2e>
 800234e:	bd70      	pop	{r4, r5, r6, pc}
 8002350:	f855 3b04 	ldr.w	r3, [r5], #4
 8002354:	4798      	blx	r3
 8002356:	3601      	adds	r6, #1
 8002358:	e7ee      	b.n	8002338 <__libc_init_array+0xc>
 800235a:	f855 3b04 	ldr.w	r3, [r5], #4
 800235e:	4798      	blx	r3
 8002360:	3601      	adds	r6, #1
 8002362:	e7f2      	b.n	800234a <__libc_init_array+0x1e>
 8002364:	080052ac 	.word	0x080052ac
 8002368:	080052ac 	.word	0x080052ac
 800236c:	080052ac 	.word	0x080052ac
 8002370:	080052b0 	.word	0x080052b0

08002374 <memset>:
 8002374:	4402      	add	r2, r0
 8002376:	4603      	mov	r3, r0
 8002378:	4293      	cmp	r3, r2
 800237a:	d100      	bne.n	800237e <memset+0xa>
 800237c:	4770      	bx	lr
 800237e:	f803 1b01 	strb.w	r1, [r3], #1
 8002382:	e7f9      	b.n	8002378 <memset+0x4>

08002384 <__cvt>:
 8002384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002388:	b088      	sub	sp, #32
 800238a:	2b00      	cmp	r3, #0
 800238c:	461f      	mov	r7, r3
 800238e:	4614      	mov	r4, r2
 8002390:	bfb8      	it	lt
 8002392:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002396:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002398:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800239a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800239e:	bfb6      	itet	lt
 80023a0:	461f      	movlt	r7, r3
 80023a2:	2300      	movge	r3, #0
 80023a4:	232d      	movlt	r3, #45	; 0x2d
 80023a6:	7013      	strb	r3, [r2, #0]
 80023a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80023aa:	f023 0820 	bic.w	r8, r3, #32
 80023ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80023b2:	d005      	beq.n	80023c0 <__cvt+0x3c>
 80023b4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80023b8:	d100      	bne.n	80023bc <__cvt+0x38>
 80023ba:	3501      	adds	r5, #1
 80023bc:	2302      	movs	r3, #2
 80023be:	e000      	b.n	80023c2 <__cvt+0x3e>
 80023c0:	2303      	movs	r3, #3
 80023c2:	aa07      	add	r2, sp, #28
 80023c4:	9204      	str	r2, [sp, #16]
 80023c6:	aa06      	add	r2, sp, #24
 80023c8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80023cc:	e9cd 3500 	strd	r3, r5, [sp]
 80023d0:	4622      	mov	r2, r4
 80023d2:	463b      	mov	r3, r7
 80023d4:	f000 fdf4 	bl	8002fc0 <_dtoa_r>
 80023d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80023dc:	4606      	mov	r6, r0
 80023de:	d102      	bne.n	80023e6 <__cvt+0x62>
 80023e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80023e2:	07db      	lsls	r3, r3, #31
 80023e4:	d522      	bpl.n	800242c <__cvt+0xa8>
 80023e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80023ea:	eb06 0905 	add.w	r9, r6, r5
 80023ee:	d110      	bne.n	8002412 <__cvt+0x8e>
 80023f0:	7833      	ldrb	r3, [r6, #0]
 80023f2:	2b30      	cmp	r3, #48	; 0x30
 80023f4:	d10a      	bne.n	800240c <__cvt+0x88>
 80023f6:	2200      	movs	r2, #0
 80023f8:	2300      	movs	r3, #0
 80023fa:	4620      	mov	r0, r4
 80023fc:	4639      	mov	r1, r7
 80023fe:	f7fe fb9b 	bl	8000b38 <__aeabi_dcmpeq>
 8002402:	b918      	cbnz	r0, 800240c <__cvt+0x88>
 8002404:	f1c5 0501 	rsb	r5, r5, #1
 8002408:	f8ca 5000 	str.w	r5, [sl]
 800240c:	f8da 3000 	ldr.w	r3, [sl]
 8002410:	4499      	add	r9, r3
 8002412:	2200      	movs	r2, #0
 8002414:	2300      	movs	r3, #0
 8002416:	4620      	mov	r0, r4
 8002418:	4639      	mov	r1, r7
 800241a:	f7fe fb8d 	bl	8000b38 <__aeabi_dcmpeq>
 800241e:	b108      	cbz	r0, 8002424 <__cvt+0xa0>
 8002420:	f8cd 901c 	str.w	r9, [sp, #28]
 8002424:	2230      	movs	r2, #48	; 0x30
 8002426:	9b07      	ldr	r3, [sp, #28]
 8002428:	454b      	cmp	r3, r9
 800242a:	d307      	bcc.n	800243c <__cvt+0xb8>
 800242c:	9b07      	ldr	r3, [sp, #28]
 800242e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002430:	1b9b      	subs	r3, r3, r6
 8002432:	4630      	mov	r0, r6
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	b008      	add	sp, #32
 8002438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800243c:	1c59      	adds	r1, r3, #1
 800243e:	9107      	str	r1, [sp, #28]
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	e7f0      	b.n	8002426 <__cvt+0xa2>

08002444 <__exponent>:
 8002444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002446:	4603      	mov	r3, r0
 8002448:	2900      	cmp	r1, #0
 800244a:	bfb8      	it	lt
 800244c:	4249      	neglt	r1, r1
 800244e:	f803 2b02 	strb.w	r2, [r3], #2
 8002452:	bfb4      	ite	lt
 8002454:	222d      	movlt	r2, #45	; 0x2d
 8002456:	222b      	movge	r2, #43	; 0x2b
 8002458:	2909      	cmp	r1, #9
 800245a:	7042      	strb	r2, [r0, #1]
 800245c:	dd2a      	ble.n	80024b4 <__exponent+0x70>
 800245e:	f10d 0407 	add.w	r4, sp, #7
 8002462:	46a4      	mov	ip, r4
 8002464:	270a      	movs	r7, #10
 8002466:	46a6      	mov	lr, r4
 8002468:	460a      	mov	r2, r1
 800246a:	fb91 f6f7 	sdiv	r6, r1, r7
 800246e:	fb07 1516 	mls	r5, r7, r6, r1
 8002472:	3530      	adds	r5, #48	; 0x30
 8002474:	2a63      	cmp	r2, #99	; 0x63
 8002476:	f104 34ff 	add.w	r4, r4, #4294967295
 800247a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800247e:	4631      	mov	r1, r6
 8002480:	dcf1      	bgt.n	8002466 <__exponent+0x22>
 8002482:	3130      	adds	r1, #48	; 0x30
 8002484:	f1ae 0502 	sub.w	r5, lr, #2
 8002488:	f804 1c01 	strb.w	r1, [r4, #-1]
 800248c:	1c44      	adds	r4, r0, #1
 800248e:	4629      	mov	r1, r5
 8002490:	4561      	cmp	r1, ip
 8002492:	d30a      	bcc.n	80024aa <__exponent+0x66>
 8002494:	f10d 0209 	add.w	r2, sp, #9
 8002498:	eba2 020e 	sub.w	r2, r2, lr
 800249c:	4565      	cmp	r5, ip
 800249e:	bf88      	it	hi
 80024a0:	2200      	movhi	r2, #0
 80024a2:	4413      	add	r3, r2
 80024a4:	1a18      	subs	r0, r3, r0
 80024a6:	b003      	add	sp, #12
 80024a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80024ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80024b2:	e7ed      	b.n	8002490 <__exponent+0x4c>
 80024b4:	2330      	movs	r3, #48	; 0x30
 80024b6:	3130      	adds	r1, #48	; 0x30
 80024b8:	7083      	strb	r3, [r0, #2]
 80024ba:	70c1      	strb	r1, [r0, #3]
 80024bc:	1d03      	adds	r3, r0, #4
 80024be:	e7f1      	b.n	80024a4 <__exponent+0x60>

080024c0 <_printf_float>:
 80024c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c4:	b091      	sub	sp, #68	; 0x44
 80024c6:	460c      	mov	r4, r1
 80024c8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80024cc:	4616      	mov	r6, r2
 80024ce:	461f      	mov	r7, r3
 80024d0:	4605      	mov	r5, r0
 80024d2:	f001 fd1b 	bl	8003f0c <_localeconv_r>
 80024d6:	6803      	ldr	r3, [r0, #0]
 80024d8:	9309      	str	r3, [sp, #36]	; 0x24
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fd feb0 	bl	8000240 <strlen>
 80024e0:	2300      	movs	r3, #0
 80024e2:	930e      	str	r3, [sp, #56]	; 0x38
 80024e4:	f8d8 3000 	ldr.w	r3, [r8]
 80024e8:	900a      	str	r0, [sp, #40]	; 0x28
 80024ea:	3307      	adds	r3, #7
 80024ec:	f023 0307 	bic.w	r3, r3, #7
 80024f0:	f103 0208 	add.w	r2, r3, #8
 80024f4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80024f8:	f8d4 b000 	ldr.w	fp, [r4]
 80024fc:	f8c8 2000 	str.w	r2, [r8]
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002508:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800250c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002510:	930b      	str	r3, [sp, #44]	; 0x2c
 8002512:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002514:	4b9c      	ldr	r3, [pc, #624]	; (8002788 <_printf_float+0x2c8>)
 8002516:	f04f 32ff 	mov.w	r2, #4294967295
 800251a:	4640      	mov	r0, r8
 800251c:	f7fe fb3e 	bl	8000b9c <__aeabi_dcmpun>
 8002520:	bb70      	cbnz	r0, 8002580 <_printf_float+0xc0>
 8002522:	4b99      	ldr	r3, [pc, #612]	; (8002788 <_printf_float+0x2c8>)
 8002524:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002526:	f04f 32ff 	mov.w	r2, #4294967295
 800252a:	4640      	mov	r0, r8
 800252c:	f7fe fb18 	bl	8000b60 <__aeabi_dcmple>
 8002530:	bb30      	cbnz	r0, 8002580 <_printf_float+0xc0>
 8002532:	2200      	movs	r2, #0
 8002534:	2300      	movs	r3, #0
 8002536:	4640      	mov	r0, r8
 8002538:	4651      	mov	r1, sl
 800253a:	f7fe fb07 	bl	8000b4c <__aeabi_dcmplt>
 800253e:	b110      	cbz	r0, 8002546 <_printf_float+0x86>
 8002540:	232d      	movs	r3, #45	; 0x2d
 8002542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002546:	4b91      	ldr	r3, [pc, #580]	; (800278c <_printf_float+0x2cc>)
 8002548:	4891      	ldr	r0, [pc, #580]	; (8002790 <_printf_float+0x2d0>)
 800254a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800254e:	bf94      	ite	ls
 8002550:	4698      	movls	r8, r3
 8002552:	4680      	movhi	r8, r0
 8002554:	2303      	movs	r3, #3
 8002556:	6123      	str	r3, [r4, #16]
 8002558:	f02b 0304 	bic.w	r3, fp, #4
 800255c:	6023      	str	r3, [r4, #0]
 800255e:	f04f 0a00 	mov.w	sl, #0
 8002562:	9700      	str	r7, [sp, #0]
 8002564:	4633      	mov	r3, r6
 8002566:	aa0f      	add	r2, sp, #60	; 0x3c
 8002568:	4621      	mov	r1, r4
 800256a:	4628      	mov	r0, r5
 800256c:	f000 f9d2 	bl	8002914 <_printf_common>
 8002570:	3001      	adds	r0, #1
 8002572:	f040 808f 	bne.w	8002694 <_printf_float+0x1d4>
 8002576:	f04f 30ff 	mov.w	r0, #4294967295
 800257a:	b011      	add	sp, #68	; 0x44
 800257c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002580:	4642      	mov	r2, r8
 8002582:	4653      	mov	r3, sl
 8002584:	4640      	mov	r0, r8
 8002586:	4651      	mov	r1, sl
 8002588:	f7fe fb08 	bl	8000b9c <__aeabi_dcmpun>
 800258c:	b140      	cbz	r0, 80025a0 <_printf_float+0xe0>
 800258e:	f1ba 0f00 	cmp.w	sl, #0
 8002592:	bfbc      	itt	lt
 8002594:	232d      	movlt	r3, #45	; 0x2d
 8002596:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800259a:	487e      	ldr	r0, [pc, #504]	; (8002794 <_printf_float+0x2d4>)
 800259c:	4b7e      	ldr	r3, [pc, #504]	; (8002798 <_printf_float+0x2d8>)
 800259e:	e7d4      	b.n	800254a <_printf_float+0x8a>
 80025a0:	6863      	ldr	r3, [r4, #4]
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80025a8:	d142      	bne.n	8002630 <_printf_float+0x170>
 80025aa:	2306      	movs	r3, #6
 80025ac:	6063      	str	r3, [r4, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	9206      	str	r2, [sp, #24]
 80025b2:	aa0e      	add	r2, sp, #56	; 0x38
 80025b4:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80025b8:	aa0d      	add	r2, sp, #52	; 0x34
 80025ba:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80025be:	9203      	str	r2, [sp, #12]
 80025c0:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80025c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80025c8:	6023      	str	r3, [r4, #0]
 80025ca:	6863      	ldr	r3, [r4, #4]
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	4642      	mov	r2, r8
 80025d0:	4653      	mov	r3, sl
 80025d2:	4628      	mov	r0, r5
 80025d4:	910b      	str	r1, [sp, #44]	; 0x2c
 80025d6:	f7ff fed5 	bl	8002384 <__cvt>
 80025da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80025dc:	2947      	cmp	r1, #71	; 0x47
 80025de:	4680      	mov	r8, r0
 80025e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80025e2:	d108      	bne.n	80025f6 <_printf_float+0x136>
 80025e4:	1cc8      	adds	r0, r1, #3
 80025e6:	db02      	blt.n	80025ee <_printf_float+0x12e>
 80025e8:	6863      	ldr	r3, [r4, #4]
 80025ea:	4299      	cmp	r1, r3
 80025ec:	dd40      	ble.n	8002670 <_printf_float+0x1b0>
 80025ee:	f1a9 0902 	sub.w	r9, r9, #2
 80025f2:	fa5f f989 	uxtb.w	r9, r9
 80025f6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80025fa:	d81f      	bhi.n	800263c <_printf_float+0x17c>
 80025fc:	3901      	subs	r1, #1
 80025fe:	464a      	mov	r2, r9
 8002600:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002604:	910d      	str	r1, [sp, #52]	; 0x34
 8002606:	f7ff ff1d 	bl	8002444 <__exponent>
 800260a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800260c:	1813      	adds	r3, r2, r0
 800260e:	2a01      	cmp	r2, #1
 8002610:	4682      	mov	sl, r0
 8002612:	6123      	str	r3, [r4, #16]
 8002614:	dc02      	bgt.n	800261c <_printf_float+0x15c>
 8002616:	6822      	ldr	r2, [r4, #0]
 8002618:	07d2      	lsls	r2, r2, #31
 800261a:	d501      	bpl.n	8002620 <_printf_float+0x160>
 800261c:	3301      	adds	r3, #1
 800261e:	6123      	str	r3, [r4, #16]
 8002620:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002624:	2b00      	cmp	r3, #0
 8002626:	d09c      	beq.n	8002562 <_printf_float+0xa2>
 8002628:	232d      	movs	r3, #45	; 0x2d
 800262a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800262e:	e798      	b.n	8002562 <_printf_float+0xa2>
 8002630:	2947      	cmp	r1, #71	; 0x47
 8002632:	d1bc      	bne.n	80025ae <_printf_float+0xee>
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ba      	bne.n	80025ae <_printf_float+0xee>
 8002638:	2301      	movs	r3, #1
 800263a:	e7b7      	b.n	80025ac <_printf_float+0xec>
 800263c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002640:	d118      	bne.n	8002674 <_printf_float+0x1b4>
 8002642:	2900      	cmp	r1, #0
 8002644:	6863      	ldr	r3, [r4, #4]
 8002646:	dd0b      	ble.n	8002660 <_printf_float+0x1a0>
 8002648:	6121      	str	r1, [r4, #16]
 800264a:	b913      	cbnz	r3, 8002652 <_printf_float+0x192>
 800264c:	6822      	ldr	r2, [r4, #0]
 800264e:	07d0      	lsls	r0, r2, #31
 8002650:	d502      	bpl.n	8002658 <_printf_float+0x198>
 8002652:	3301      	adds	r3, #1
 8002654:	440b      	add	r3, r1
 8002656:	6123      	str	r3, [r4, #16]
 8002658:	65a1      	str	r1, [r4, #88]	; 0x58
 800265a:	f04f 0a00 	mov.w	sl, #0
 800265e:	e7df      	b.n	8002620 <_printf_float+0x160>
 8002660:	b913      	cbnz	r3, 8002668 <_printf_float+0x1a8>
 8002662:	6822      	ldr	r2, [r4, #0]
 8002664:	07d2      	lsls	r2, r2, #31
 8002666:	d501      	bpl.n	800266c <_printf_float+0x1ac>
 8002668:	3302      	adds	r3, #2
 800266a:	e7f4      	b.n	8002656 <_printf_float+0x196>
 800266c:	2301      	movs	r3, #1
 800266e:	e7f2      	b.n	8002656 <_printf_float+0x196>
 8002670:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002676:	4299      	cmp	r1, r3
 8002678:	db05      	blt.n	8002686 <_printf_float+0x1c6>
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	6121      	str	r1, [r4, #16]
 800267e:	07d8      	lsls	r0, r3, #31
 8002680:	d5ea      	bpl.n	8002658 <_printf_float+0x198>
 8002682:	1c4b      	adds	r3, r1, #1
 8002684:	e7e7      	b.n	8002656 <_printf_float+0x196>
 8002686:	2900      	cmp	r1, #0
 8002688:	bfd4      	ite	le
 800268a:	f1c1 0202 	rsble	r2, r1, #2
 800268e:	2201      	movgt	r2, #1
 8002690:	4413      	add	r3, r2
 8002692:	e7e0      	b.n	8002656 <_printf_float+0x196>
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	055a      	lsls	r2, r3, #21
 8002698:	d407      	bmi.n	80026aa <_printf_float+0x1ea>
 800269a:	6923      	ldr	r3, [r4, #16]
 800269c:	4642      	mov	r2, r8
 800269e:	4631      	mov	r1, r6
 80026a0:	4628      	mov	r0, r5
 80026a2:	47b8      	blx	r7
 80026a4:	3001      	adds	r0, #1
 80026a6:	d12b      	bne.n	8002700 <_printf_float+0x240>
 80026a8:	e765      	b.n	8002576 <_printf_float+0xb6>
 80026aa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80026ae:	f240 80dc 	bls.w	800286a <_printf_float+0x3aa>
 80026b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80026b6:	2200      	movs	r2, #0
 80026b8:	2300      	movs	r3, #0
 80026ba:	f7fe fa3d 	bl	8000b38 <__aeabi_dcmpeq>
 80026be:	2800      	cmp	r0, #0
 80026c0:	d033      	beq.n	800272a <_printf_float+0x26a>
 80026c2:	4a36      	ldr	r2, [pc, #216]	; (800279c <_printf_float+0x2dc>)
 80026c4:	2301      	movs	r3, #1
 80026c6:	4631      	mov	r1, r6
 80026c8:	4628      	mov	r0, r5
 80026ca:	47b8      	blx	r7
 80026cc:	3001      	adds	r0, #1
 80026ce:	f43f af52 	beq.w	8002576 <_printf_float+0xb6>
 80026d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80026d6:	429a      	cmp	r2, r3
 80026d8:	db02      	blt.n	80026e0 <_printf_float+0x220>
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	07d8      	lsls	r0, r3, #31
 80026de:	d50f      	bpl.n	8002700 <_printf_float+0x240>
 80026e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80026e4:	4631      	mov	r1, r6
 80026e6:	4628      	mov	r0, r5
 80026e8:	47b8      	blx	r7
 80026ea:	3001      	adds	r0, #1
 80026ec:	f43f af43 	beq.w	8002576 <_printf_float+0xb6>
 80026f0:	f04f 0800 	mov.w	r8, #0
 80026f4:	f104 091a 	add.w	r9, r4, #26
 80026f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80026fa:	3b01      	subs	r3, #1
 80026fc:	4543      	cmp	r3, r8
 80026fe:	dc09      	bgt.n	8002714 <_printf_float+0x254>
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	079b      	lsls	r3, r3, #30
 8002704:	f100 8101 	bmi.w	800290a <_printf_float+0x44a>
 8002708:	68e0      	ldr	r0, [r4, #12]
 800270a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800270c:	4298      	cmp	r0, r3
 800270e:	bfb8      	it	lt
 8002710:	4618      	movlt	r0, r3
 8002712:	e732      	b.n	800257a <_printf_float+0xba>
 8002714:	2301      	movs	r3, #1
 8002716:	464a      	mov	r2, r9
 8002718:	4631      	mov	r1, r6
 800271a:	4628      	mov	r0, r5
 800271c:	47b8      	blx	r7
 800271e:	3001      	adds	r0, #1
 8002720:	f43f af29 	beq.w	8002576 <_printf_float+0xb6>
 8002724:	f108 0801 	add.w	r8, r8, #1
 8002728:	e7e6      	b.n	80026f8 <_printf_float+0x238>
 800272a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800272c:	2b00      	cmp	r3, #0
 800272e:	dc37      	bgt.n	80027a0 <_printf_float+0x2e0>
 8002730:	4a1a      	ldr	r2, [pc, #104]	; (800279c <_printf_float+0x2dc>)
 8002732:	2301      	movs	r3, #1
 8002734:	4631      	mov	r1, r6
 8002736:	4628      	mov	r0, r5
 8002738:	47b8      	blx	r7
 800273a:	3001      	adds	r0, #1
 800273c:	f43f af1b 	beq.w	8002576 <_printf_float+0xb6>
 8002740:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002744:	4313      	orrs	r3, r2
 8002746:	d102      	bne.n	800274e <_printf_float+0x28e>
 8002748:	6823      	ldr	r3, [r4, #0]
 800274a:	07d9      	lsls	r1, r3, #31
 800274c:	d5d8      	bpl.n	8002700 <_printf_float+0x240>
 800274e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002752:	4631      	mov	r1, r6
 8002754:	4628      	mov	r0, r5
 8002756:	47b8      	blx	r7
 8002758:	3001      	adds	r0, #1
 800275a:	f43f af0c 	beq.w	8002576 <_printf_float+0xb6>
 800275e:	f04f 0900 	mov.w	r9, #0
 8002762:	f104 0a1a 	add.w	sl, r4, #26
 8002766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002768:	425b      	negs	r3, r3
 800276a:	454b      	cmp	r3, r9
 800276c:	dc01      	bgt.n	8002772 <_printf_float+0x2b2>
 800276e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002770:	e794      	b.n	800269c <_printf_float+0x1dc>
 8002772:	2301      	movs	r3, #1
 8002774:	4652      	mov	r2, sl
 8002776:	4631      	mov	r1, r6
 8002778:	4628      	mov	r0, r5
 800277a:	47b8      	blx	r7
 800277c:	3001      	adds	r0, #1
 800277e:	f43f aefa 	beq.w	8002576 <_printf_float+0xb6>
 8002782:	f109 0901 	add.w	r9, r9, #1
 8002786:	e7ee      	b.n	8002766 <_printf_float+0x2a6>
 8002788:	7fefffff 	.word	0x7fefffff
 800278c:	08004ec4 	.word	0x08004ec4
 8002790:	08004ec8 	.word	0x08004ec8
 8002794:	08004ed0 	.word	0x08004ed0
 8002798:	08004ecc 	.word	0x08004ecc
 800279c:	08004ed4 	.word	0x08004ed4
 80027a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80027a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027a4:	429a      	cmp	r2, r3
 80027a6:	bfa8      	it	ge
 80027a8:	461a      	movge	r2, r3
 80027aa:	2a00      	cmp	r2, #0
 80027ac:	4691      	mov	r9, r2
 80027ae:	dc37      	bgt.n	8002820 <_printf_float+0x360>
 80027b0:	f04f 0b00 	mov.w	fp, #0
 80027b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80027b8:	f104 021a 	add.w	r2, r4, #26
 80027bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80027c0:	ebaa 0309 	sub.w	r3, sl, r9
 80027c4:	455b      	cmp	r3, fp
 80027c6:	dc33      	bgt.n	8002830 <_printf_float+0x370>
 80027c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80027cc:	429a      	cmp	r2, r3
 80027ce:	db3b      	blt.n	8002848 <_printf_float+0x388>
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	07da      	lsls	r2, r3, #31
 80027d4:	d438      	bmi.n	8002848 <_printf_float+0x388>
 80027d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80027d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80027da:	eba2 030a 	sub.w	r3, r2, sl
 80027de:	eba2 0901 	sub.w	r9, r2, r1
 80027e2:	4599      	cmp	r9, r3
 80027e4:	bfa8      	it	ge
 80027e6:	4699      	movge	r9, r3
 80027e8:	f1b9 0f00 	cmp.w	r9, #0
 80027ec:	dc34      	bgt.n	8002858 <_printf_float+0x398>
 80027ee:	f04f 0800 	mov.w	r8, #0
 80027f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80027f6:	f104 0a1a 	add.w	sl, r4, #26
 80027fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	eba3 0309 	sub.w	r3, r3, r9
 8002804:	4543      	cmp	r3, r8
 8002806:	f77f af7b 	ble.w	8002700 <_printf_float+0x240>
 800280a:	2301      	movs	r3, #1
 800280c:	4652      	mov	r2, sl
 800280e:	4631      	mov	r1, r6
 8002810:	4628      	mov	r0, r5
 8002812:	47b8      	blx	r7
 8002814:	3001      	adds	r0, #1
 8002816:	f43f aeae 	beq.w	8002576 <_printf_float+0xb6>
 800281a:	f108 0801 	add.w	r8, r8, #1
 800281e:	e7ec      	b.n	80027fa <_printf_float+0x33a>
 8002820:	4613      	mov	r3, r2
 8002822:	4631      	mov	r1, r6
 8002824:	4642      	mov	r2, r8
 8002826:	4628      	mov	r0, r5
 8002828:	47b8      	blx	r7
 800282a:	3001      	adds	r0, #1
 800282c:	d1c0      	bne.n	80027b0 <_printf_float+0x2f0>
 800282e:	e6a2      	b.n	8002576 <_printf_float+0xb6>
 8002830:	2301      	movs	r3, #1
 8002832:	4631      	mov	r1, r6
 8002834:	4628      	mov	r0, r5
 8002836:	920b      	str	r2, [sp, #44]	; 0x2c
 8002838:	47b8      	blx	r7
 800283a:	3001      	adds	r0, #1
 800283c:	f43f ae9b 	beq.w	8002576 <_printf_float+0xb6>
 8002840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002842:	f10b 0b01 	add.w	fp, fp, #1
 8002846:	e7b9      	b.n	80027bc <_printf_float+0x2fc>
 8002848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800284c:	4631      	mov	r1, r6
 800284e:	4628      	mov	r0, r5
 8002850:	47b8      	blx	r7
 8002852:	3001      	adds	r0, #1
 8002854:	d1bf      	bne.n	80027d6 <_printf_float+0x316>
 8002856:	e68e      	b.n	8002576 <_printf_float+0xb6>
 8002858:	464b      	mov	r3, r9
 800285a:	eb08 020a 	add.w	r2, r8, sl
 800285e:	4631      	mov	r1, r6
 8002860:	4628      	mov	r0, r5
 8002862:	47b8      	blx	r7
 8002864:	3001      	adds	r0, #1
 8002866:	d1c2      	bne.n	80027ee <_printf_float+0x32e>
 8002868:	e685      	b.n	8002576 <_printf_float+0xb6>
 800286a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800286c:	2a01      	cmp	r2, #1
 800286e:	dc01      	bgt.n	8002874 <_printf_float+0x3b4>
 8002870:	07db      	lsls	r3, r3, #31
 8002872:	d537      	bpl.n	80028e4 <_printf_float+0x424>
 8002874:	2301      	movs	r3, #1
 8002876:	4642      	mov	r2, r8
 8002878:	4631      	mov	r1, r6
 800287a:	4628      	mov	r0, r5
 800287c:	47b8      	blx	r7
 800287e:	3001      	adds	r0, #1
 8002880:	f43f ae79 	beq.w	8002576 <_printf_float+0xb6>
 8002884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002888:	4631      	mov	r1, r6
 800288a:	4628      	mov	r0, r5
 800288c:	47b8      	blx	r7
 800288e:	3001      	adds	r0, #1
 8002890:	f43f ae71 	beq.w	8002576 <_printf_float+0xb6>
 8002894:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002898:	2200      	movs	r2, #0
 800289a:	2300      	movs	r3, #0
 800289c:	f7fe f94c 	bl	8000b38 <__aeabi_dcmpeq>
 80028a0:	b9d8      	cbnz	r0, 80028da <_printf_float+0x41a>
 80028a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028a4:	f108 0201 	add.w	r2, r8, #1
 80028a8:	3b01      	subs	r3, #1
 80028aa:	4631      	mov	r1, r6
 80028ac:	4628      	mov	r0, r5
 80028ae:	47b8      	blx	r7
 80028b0:	3001      	adds	r0, #1
 80028b2:	d10e      	bne.n	80028d2 <_printf_float+0x412>
 80028b4:	e65f      	b.n	8002576 <_printf_float+0xb6>
 80028b6:	2301      	movs	r3, #1
 80028b8:	464a      	mov	r2, r9
 80028ba:	4631      	mov	r1, r6
 80028bc:	4628      	mov	r0, r5
 80028be:	47b8      	blx	r7
 80028c0:	3001      	adds	r0, #1
 80028c2:	f43f ae58 	beq.w	8002576 <_printf_float+0xb6>
 80028c6:	f108 0801 	add.w	r8, r8, #1
 80028ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028cc:	3b01      	subs	r3, #1
 80028ce:	4543      	cmp	r3, r8
 80028d0:	dcf1      	bgt.n	80028b6 <_printf_float+0x3f6>
 80028d2:	4653      	mov	r3, sl
 80028d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80028d8:	e6e1      	b.n	800269e <_printf_float+0x1de>
 80028da:	f04f 0800 	mov.w	r8, #0
 80028de:	f104 091a 	add.w	r9, r4, #26
 80028e2:	e7f2      	b.n	80028ca <_printf_float+0x40a>
 80028e4:	2301      	movs	r3, #1
 80028e6:	4642      	mov	r2, r8
 80028e8:	e7df      	b.n	80028aa <_printf_float+0x3ea>
 80028ea:	2301      	movs	r3, #1
 80028ec:	464a      	mov	r2, r9
 80028ee:	4631      	mov	r1, r6
 80028f0:	4628      	mov	r0, r5
 80028f2:	47b8      	blx	r7
 80028f4:	3001      	adds	r0, #1
 80028f6:	f43f ae3e 	beq.w	8002576 <_printf_float+0xb6>
 80028fa:	f108 0801 	add.w	r8, r8, #1
 80028fe:	68e3      	ldr	r3, [r4, #12]
 8002900:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002902:	1a5b      	subs	r3, r3, r1
 8002904:	4543      	cmp	r3, r8
 8002906:	dcf0      	bgt.n	80028ea <_printf_float+0x42a>
 8002908:	e6fe      	b.n	8002708 <_printf_float+0x248>
 800290a:	f04f 0800 	mov.w	r8, #0
 800290e:	f104 0919 	add.w	r9, r4, #25
 8002912:	e7f4      	b.n	80028fe <_printf_float+0x43e>

08002914 <_printf_common>:
 8002914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002918:	4616      	mov	r6, r2
 800291a:	4699      	mov	r9, r3
 800291c:	688a      	ldr	r2, [r1, #8]
 800291e:	690b      	ldr	r3, [r1, #16]
 8002920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002924:	4293      	cmp	r3, r2
 8002926:	bfb8      	it	lt
 8002928:	4613      	movlt	r3, r2
 800292a:	6033      	str	r3, [r6, #0]
 800292c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002930:	4607      	mov	r7, r0
 8002932:	460c      	mov	r4, r1
 8002934:	b10a      	cbz	r2, 800293a <_printf_common+0x26>
 8002936:	3301      	adds	r3, #1
 8002938:	6033      	str	r3, [r6, #0]
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	0699      	lsls	r1, r3, #26
 800293e:	bf42      	ittt	mi
 8002940:	6833      	ldrmi	r3, [r6, #0]
 8002942:	3302      	addmi	r3, #2
 8002944:	6033      	strmi	r3, [r6, #0]
 8002946:	6825      	ldr	r5, [r4, #0]
 8002948:	f015 0506 	ands.w	r5, r5, #6
 800294c:	d106      	bne.n	800295c <_printf_common+0x48>
 800294e:	f104 0a19 	add.w	sl, r4, #25
 8002952:	68e3      	ldr	r3, [r4, #12]
 8002954:	6832      	ldr	r2, [r6, #0]
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	42ab      	cmp	r3, r5
 800295a:	dc26      	bgt.n	80029aa <_printf_common+0x96>
 800295c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002960:	1e13      	subs	r3, r2, #0
 8002962:	6822      	ldr	r2, [r4, #0]
 8002964:	bf18      	it	ne
 8002966:	2301      	movne	r3, #1
 8002968:	0692      	lsls	r2, r2, #26
 800296a:	d42b      	bmi.n	80029c4 <_printf_common+0xb0>
 800296c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002970:	4649      	mov	r1, r9
 8002972:	4638      	mov	r0, r7
 8002974:	47c0      	blx	r8
 8002976:	3001      	adds	r0, #1
 8002978:	d01e      	beq.n	80029b8 <_printf_common+0xa4>
 800297a:	6823      	ldr	r3, [r4, #0]
 800297c:	68e5      	ldr	r5, [r4, #12]
 800297e:	6832      	ldr	r2, [r6, #0]
 8002980:	f003 0306 	and.w	r3, r3, #6
 8002984:	2b04      	cmp	r3, #4
 8002986:	bf08      	it	eq
 8002988:	1aad      	subeq	r5, r5, r2
 800298a:	68a3      	ldr	r3, [r4, #8]
 800298c:	6922      	ldr	r2, [r4, #16]
 800298e:	bf0c      	ite	eq
 8002990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002994:	2500      	movne	r5, #0
 8002996:	4293      	cmp	r3, r2
 8002998:	bfc4      	itt	gt
 800299a:	1a9b      	subgt	r3, r3, r2
 800299c:	18ed      	addgt	r5, r5, r3
 800299e:	2600      	movs	r6, #0
 80029a0:	341a      	adds	r4, #26
 80029a2:	42b5      	cmp	r5, r6
 80029a4:	d11a      	bne.n	80029dc <_printf_common+0xc8>
 80029a6:	2000      	movs	r0, #0
 80029a8:	e008      	b.n	80029bc <_printf_common+0xa8>
 80029aa:	2301      	movs	r3, #1
 80029ac:	4652      	mov	r2, sl
 80029ae:	4649      	mov	r1, r9
 80029b0:	4638      	mov	r0, r7
 80029b2:	47c0      	blx	r8
 80029b4:	3001      	adds	r0, #1
 80029b6:	d103      	bne.n	80029c0 <_printf_common+0xac>
 80029b8:	f04f 30ff 	mov.w	r0, #4294967295
 80029bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029c0:	3501      	adds	r5, #1
 80029c2:	e7c6      	b.n	8002952 <_printf_common+0x3e>
 80029c4:	18e1      	adds	r1, r4, r3
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	2030      	movs	r0, #48	; 0x30
 80029ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029ce:	4422      	add	r2, r4
 80029d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80029d8:	3302      	adds	r3, #2
 80029da:	e7c7      	b.n	800296c <_printf_common+0x58>
 80029dc:	2301      	movs	r3, #1
 80029de:	4622      	mov	r2, r4
 80029e0:	4649      	mov	r1, r9
 80029e2:	4638      	mov	r0, r7
 80029e4:	47c0      	blx	r8
 80029e6:	3001      	adds	r0, #1
 80029e8:	d0e6      	beq.n	80029b8 <_printf_common+0xa4>
 80029ea:	3601      	adds	r6, #1
 80029ec:	e7d9      	b.n	80029a2 <_printf_common+0x8e>
	...

080029f0 <_printf_i>:
 80029f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029f4:	460c      	mov	r4, r1
 80029f6:	4691      	mov	r9, r2
 80029f8:	7e27      	ldrb	r7, [r4, #24]
 80029fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80029fc:	2f78      	cmp	r7, #120	; 0x78
 80029fe:	4680      	mov	r8, r0
 8002a00:	469a      	mov	sl, r3
 8002a02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a06:	d807      	bhi.n	8002a18 <_printf_i+0x28>
 8002a08:	2f62      	cmp	r7, #98	; 0x62
 8002a0a:	d80a      	bhi.n	8002a22 <_printf_i+0x32>
 8002a0c:	2f00      	cmp	r7, #0
 8002a0e:	f000 80d8 	beq.w	8002bc2 <_printf_i+0x1d2>
 8002a12:	2f58      	cmp	r7, #88	; 0x58
 8002a14:	f000 80a3 	beq.w	8002b5e <_printf_i+0x16e>
 8002a18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a20:	e03a      	b.n	8002a98 <_printf_i+0xa8>
 8002a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a26:	2b15      	cmp	r3, #21
 8002a28:	d8f6      	bhi.n	8002a18 <_printf_i+0x28>
 8002a2a:	a001      	add	r0, pc, #4	; (adr r0, 8002a30 <_printf_i+0x40>)
 8002a2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002a30:	08002a89 	.word	0x08002a89
 8002a34:	08002a9d 	.word	0x08002a9d
 8002a38:	08002a19 	.word	0x08002a19
 8002a3c:	08002a19 	.word	0x08002a19
 8002a40:	08002a19 	.word	0x08002a19
 8002a44:	08002a19 	.word	0x08002a19
 8002a48:	08002a9d 	.word	0x08002a9d
 8002a4c:	08002a19 	.word	0x08002a19
 8002a50:	08002a19 	.word	0x08002a19
 8002a54:	08002a19 	.word	0x08002a19
 8002a58:	08002a19 	.word	0x08002a19
 8002a5c:	08002ba9 	.word	0x08002ba9
 8002a60:	08002acd 	.word	0x08002acd
 8002a64:	08002b8b 	.word	0x08002b8b
 8002a68:	08002a19 	.word	0x08002a19
 8002a6c:	08002a19 	.word	0x08002a19
 8002a70:	08002bcb 	.word	0x08002bcb
 8002a74:	08002a19 	.word	0x08002a19
 8002a78:	08002acd 	.word	0x08002acd
 8002a7c:	08002a19 	.word	0x08002a19
 8002a80:	08002a19 	.word	0x08002a19
 8002a84:	08002b93 	.word	0x08002b93
 8002a88:	680b      	ldr	r3, [r1, #0]
 8002a8a:	1d1a      	adds	r2, r3, #4
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	600a      	str	r2, [r1, #0]
 8002a90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0a3      	b.n	8002be4 <_printf_i+0x1f4>
 8002a9c:	6825      	ldr	r5, [r4, #0]
 8002a9e:	6808      	ldr	r0, [r1, #0]
 8002aa0:	062e      	lsls	r6, r5, #24
 8002aa2:	f100 0304 	add.w	r3, r0, #4
 8002aa6:	d50a      	bpl.n	8002abe <_printf_i+0xce>
 8002aa8:	6805      	ldr	r5, [r0, #0]
 8002aaa:	600b      	str	r3, [r1, #0]
 8002aac:	2d00      	cmp	r5, #0
 8002aae:	da03      	bge.n	8002ab8 <_printf_i+0xc8>
 8002ab0:	232d      	movs	r3, #45	; 0x2d
 8002ab2:	426d      	negs	r5, r5
 8002ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ab8:	485e      	ldr	r0, [pc, #376]	; (8002c34 <_printf_i+0x244>)
 8002aba:	230a      	movs	r3, #10
 8002abc:	e019      	b.n	8002af2 <_printf_i+0x102>
 8002abe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002ac2:	6805      	ldr	r5, [r0, #0]
 8002ac4:	600b      	str	r3, [r1, #0]
 8002ac6:	bf18      	it	ne
 8002ac8:	b22d      	sxthne	r5, r5
 8002aca:	e7ef      	b.n	8002aac <_printf_i+0xbc>
 8002acc:	680b      	ldr	r3, [r1, #0]
 8002ace:	6825      	ldr	r5, [r4, #0]
 8002ad0:	1d18      	adds	r0, r3, #4
 8002ad2:	6008      	str	r0, [r1, #0]
 8002ad4:	0628      	lsls	r0, r5, #24
 8002ad6:	d501      	bpl.n	8002adc <_printf_i+0xec>
 8002ad8:	681d      	ldr	r5, [r3, #0]
 8002ada:	e002      	b.n	8002ae2 <_printf_i+0xf2>
 8002adc:	0669      	lsls	r1, r5, #25
 8002ade:	d5fb      	bpl.n	8002ad8 <_printf_i+0xe8>
 8002ae0:	881d      	ldrh	r5, [r3, #0]
 8002ae2:	4854      	ldr	r0, [pc, #336]	; (8002c34 <_printf_i+0x244>)
 8002ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2308      	moveq	r3, #8
 8002aea:	230a      	movne	r3, #10
 8002aec:	2100      	movs	r1, #0
 8002aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002af2:	6866      	ldr	r6, [r4, #4]
 8002af4:	60a6      	str	r6, [r4, #8]
 8002af6:	2e00      	cmp	r6, #0
 8002af8:	bfa2      	ittt	ge
 8002afa:	6821      	ldrge	r1, [r4, #0]
 8002afc:	f021 0104 	bicge.w	r1, r1, #4
 8002b00:	6021      	strge	r1, [r4, #0]
 8002b02:	b90d      	cbnz	r5, 8002b08 <_printf_i+0x118>
 8002b04:	2e00      	cmp	r6, #0
 8002b06:	d04d      	beq.n	8002ba4 <_printf_i+0x1b4>
 8002b08:	4616      	mov	r6, r2
 8002b0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b0e:	fb03 5711 	mls	r7, r3, r1, r5
 8002b12:	5dc7      	ldrb	r7, [r0, r7]
 8002b14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b18:	462f      	mov	r7, r5
 8002b1a:	42bb      	cmp	r3, r7
 8002b1c:	460d      	mov	r5, r1
 8002b1e:	d9f4      	bls.n	8002b0a <_printf_i+0x11a>
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d10b      	bne.n	8002b3c <_printf_i+0x14c>
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	07df      	lsls	r7, r3, #31
 8002b28:	d508      	bpl.n	8002b3c <_printf_i+0x14c>
 8002b2a:	6923      	ldr	r3, [r4, #16]
 8002b2c:	6861      	ldr	r1, [r4, #4]
 8002b2e:	4299      	cmp	r1, r3
 8002b30:	bfde      	ittt	le
 8002b32:	2330      	movle	r3, #48	; 0x30
 8002b34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002b38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002b3c:	1b92      	subs	r2, r2, r6
 8002b3e:	6122      	str	r2, [r4, #16]
 8002b40:	f8cd a000 	str.w	sl, [sp]
 8002b44:	464b      	mov	r3, r9
 8002b46:	aa03      	add	r2, sp, #12
 8002b48:	4621      	mov	r1, r4
 8002b4a:	4640      	mov	r0, r8
 8002b4c:	f7ff fee2 	bl	8002914 <_printf_common>
 8002b50:	3001      	adds	r0, #1
 8002b52:	d14c      	bne.n	8002bee <_printf_i+0x1fe>
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295
 8002b58:	b004      	add	sp, #16
 8002b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b5e:	4835      	ldr	r0, [pc, #212]	; (8002c34 <_printf_i+0x244>)
 8002b60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	680e      	ldr	r6, [r1, #0]
 8002b68:	061f      	lsls	r7, r3, #24
 8002b6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8002b6e:	600e      	str	r6, [r1, #0]
 8002b70:	d514      	bpl.n	8002b9c <_printf_i+0x1ac>
 8002b72:	07d9      	lsls	r1, r3, #31
 8002b74:	bf44      	itt	mi
 8002b76:	f043 0320 	orrmi.w	r3, r3, #32
 8002b7a:	6023      	strmi	r3, [r4, #0]
 8002b7c:	b91d      	cbnz	r5, 8002b86 <_printf_i+0x196>
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	f023 0320 	bic.w	r3, r3, #32
 8002b84:	6023      	str	r3, [r4, #0]
 8002b86:	2310      	movs	r3, #16
 8002b88:	e7b0      	b.n	8002aec <_printf_i+0xfc>
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	f043 0320 	orr.w	r3, r3, #32
 8002b90:	6023      	str	r3, [r4, #0]
 8002b92:	2378      	movs	r3, #120	; 0x78
 8002b94:	4828      	ldr	r0, [pc, #160]	; (8002c38 <_printf_i+0x248>)
 8002b96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b9a:	e7e3      	b.n	8002b64 <_printf_i+0x174>
 8002b9c:	065e      	lsls	r6, r3, #25
 8002b9e:	bf48      	it	mi
 8002ba0:	b2ad      	uxthmi	r5, r5
 8002ba2:	e7e6      	b.n	8002b72 <_printf_i+0x182>
 8002ba4:	4616      	mov	r6, r2
 8002ba6:	e7bb      	b.n	8002b20 <_printf_i+0x130>
 8002ba8:	680b      	ldr	r3, [r1, #0]
 8002baa:	6826      	ldr	r6, [r4, #0]
 8002bac:	6960      	ldr	r0, [r4, #20]
 8002bae:	1d1d      	adds	r5, r3, #4
 8002bb0:	600d      	str	r5, [r1, #0]
 8002bb2:	0635      	lsls	r5, r6, #24
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	d501      	bpl.n	8002bbc <_printf_i+0x1cc>
 8002bb8:	6018      	str	r0, [r3, #0]
 8002bba:	e002      	b.n	8002bc2 <_printf_i+0x1d2>
 8002bbc:	0671      	lsls	r1, r6, #25
 8002bbe:	d5fb      	bpl.n	8002bb8 <_printf_i+0x1c8>
 8002bc0:	8018      	strh	r0, [r3, #0]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	6123      	str	r3, [r4, #16]
 8002bc6:	4616      	mov	r6, r2
 8002bc8:	e7ba      	b.n	8002b40 <_printf_i+0x150>
 8002bca:	680b      	ldr	r3, [r1, #0]
 8002bcc:	1d1a      	adds	r2, r3, #4
 8002bce:	600a      	str	r2, [r1, #0]
 8002bd0:	681e      	ldr	r6, [r3, #0]
 8002bd2:	6862      	ldr	r2, [r4, #4]
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4630      	mov	r0, r6
 8002bd8:	f7fd fb3a 	bl	8000250 <memchr>
 8002bdc:	b108      	cbz	r0, 8002be2 <_printf_i+0x1f2>
 8002bde:	1b80      	subs	r0, r0, r6
 8002be0:	6060      	str	r0, [r4, #4]
 8002be2:	6863      	ldr	r3, [r4, #4]
 8002be4:	6123      	str	r3, [r4, #16]
 8002be6:	2300      	movs	r3, #0
 8002be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bec:	e7a8      	b.n	8002b40 <_printf_i+0x150>
 8002bee:	6923      	ldr	r3, [r4, #16]
 8002bf0:	4632      	mov	r2, r6
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	4640      	mov	r0, r8
 8002bf6:	47d0      	blx	sl
 8002bf8:	3001      	adds	r0, #1
 8002bfa:	d0ab      	beq.n	8002b54 <_printf_i+0x164>
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	079b      	lsls	r3, r3, #30
 8002c00:	d413      	bmi.n	8002c2a <_printf_i+0x23a>
 8002c02:	68e0      	ldr	r0, [r4, #12]
 8002c04:	9b03      	ldr	r3, [sp, #12]
 8002c06:	4298      	cmp	r0, r3
 8002c08:	bfb8      	it	lt
 8002c0a:	4618      	movlt	r0, r3
 8002c0c:	e7a4      	b.n	8002b58 <_printf_i+0x168>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	4632      	mov	r2, r6
 8002c12:	4649      	mov	r1, r9
 8002c14:	4640      	mov	r0, r8
 8002c16:	47d0      	blx	sl
 8002c18:	3001      	adds	r0, #1
 8002c1a:	d09b      	beq.n	8002b54 <_printf_i+0x164>
 8002c1c:	3501      	adds	r5, #1
 8002c1e:	68e3      	ldr	r3, [r4, #12]
 8002c20:	9903      	ldr	r1, [sp, #12]
 8002c22:	1a5b      	subs	r3, r3, r1
 8002c24:	42ab      	cmp	r3, r5
 8002c26:	dcf2      	bgt.n	8002c0e <_printf_i+0x21e>
 8002c28:	e7eb      	b.n	8002c02 <_printf_i+0x212>
 8002c2a:	2500      	movs	r5, #0
 8002c2c:	f104 0619 	add.w	r6, r4, #25
 8002c30:	e7f5      	b.n	8002c1e <_printf_i+0x22e>
 8002c32:	bf00      	nop
 8002c34:	08004ed6 	.word	0x08004ed6
 8002c38:	08004ee7 	.word	0x08004ee7

08002c3c <_puts_r>:
 8002c3c:	b570      	push	{r4, r5, r6, lr}
 8002c3e:	460e      	mov	r6, r1
 8002c40:	4605      	mov	r5, r0
 8002c42:	b118      	cbz	r0, 8002c4c <_puts_r+0x10>
 8002c44:	6983      	ldr	r3, [r0, #24]
 8002c46:	b90b      	cbnz	r3, 8002c4c <_puts_r+0x10>
 8002c48:	f001 f8c2 	bl	8003dd0 <__sinit>
 8002c4c:	69ab      	ldr	r3, [r5, #24]
 8002c4e:	68ac      	ldr	r4, [r5, #8]
 8002c50:	b913      	cbnz	r3, 8002c58 <_puts_r+0x1c>
 8002c52:	4628      	mov	r0, r5
 8002c54:	f001 f8bc 	bl	8003dd0 <__sinit>
 8002c58:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <_puts_r+0xd0>)
 8002c5a:	429c      	cmp	r4, r3
 8002c5c:	d120      	bne.n	8002ca0 <_puts_r+0x64>
 8002c5e:	686c      	ldr	r4, [r5, #4]
 8002c60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c62:	07db      	lsls	r3, r3, #31
 8002c64:	d405      	bmi.n	8002c72 <_puts_r+0x36>
 8002c66:	89a3      	ldrh	r3, [r4, #12]
 8002c68:	0598      	lsls	r0, r3, #22
 8002c6a:	d402      	bmi.n	8002c72 <_puts_r+0x36>
 8002c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c6e:	f001 f952 	bl	8003f16 <__retarget_lock_acquire_recursive>
 8002c72:	89a3      	ldrh	r3, [r4, #12]
 8002c74:	0719      	lsls	r1, r3, #28
 8002c76:	d51d      	bpl.n	8002cb4 <_puts_r+0x78>
 8002c78:	6923      	ldr	r3, [r4, #16]
 8002c7a:	b1db      	cbz	r3, 8002cb4 <_puts_r+0x78>
 8002c7c:	3e01      	subs	r6, #1
 8002c7e:	68a3      	ldr	r3, [r4, #8]
 8002c80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c84:	3b01      	subs	r3, #1
 8002c86:	60a3      	str	r3, [r4, #8]
 8002c88:	bb39      	cbnz	r1, 8002cda <_puts_r+0x9e>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	da38      	bge.n	8002d00 <_puts_r+0xc4>
 8002c8e:	4622      	mov	r2, r4
 8002c90:	210a      	movs	r1, #10
 8002c92:	4628      	mov	r0, r5
 8002c94:	f000 f848 	bl	8002d28 <__swbuf_r>
 8002c98:	3001      	adds	r0, #1
 8002c9a:	d011      	beq.n	8002cc0 <_puts_r+0x84>
 8002c9c:	250a      	movs	r5, #10
 8002c9e:	e011      	b.n	8002cc4 <_puts_r+0x88>
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <_puts_r+0xd4>)
 8002ca2:	429c      	cmp	r4, r3
 8002ca4:	d101      	bne.n	8002caa <_puts_r+0x6e>
 8002ca6:	68ac      	ldr	r4, [r5, #8]
 8002ca8:	e7da      	b.n	8002c60 <_puts_r+0x24>
 8002caa:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <_puts_r+0xd8>)
 8002cac:	429c      	cmp	r4, r3
 8002cae:	bf08      	it	eq
 8002cb0:	68ec      	ldreq	r4, [r5, #12]
 8002cb2:	e7d5      	b.n	8002c60 <_puts_r+0x24>
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	f000 f888 	bl	8002dcc <__swsetup_r>
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	d0dd      	beq.n	8002c7c <_puts_r+0x40>
 8002cc0:	f04f 35ff 	mov.w	r5, #4294967295
 8002cc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cc6:	07da      	lsls	r2, r3, #31
 8002cc8:	d405      	bmi.n	8002cd6 <_puts_r+0x9a>
 8002cca:	89a3      	ldrh	r3, [r4, #12]
 8002ccc:	059b      	lsls	r3, r3, #22
 8002cce:	d402      	bmi.n	8002cd6 <_puts_r+0x9a>
 8002cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cd2:	f001 f921 	bl	8003f18 <__retarget_lock_release_recursive>
 8002cd6:	4628      	mov	r0, r5
 8002cd8:	bd70      	pop	{r4, r5, r6, pc}
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	da04      	bge.n	8002ce8 <_puts_r+0xac>
 8002cde:	69a2      	ldr	r2, [r4, #24]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	dc06      	bgt.n	8002cf2 <_puts_r+0xb6>
 8002ce4:	290a      	cmp	r1, #10
 8002ce6:	d004      	beq.n	8002cf2 <_puts_r+0xb6>
 8002ce8:	6823      	ldr	r3, [r4, #0]
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	6022      	str	r2, [r4, #0]
 8002cee:	7019      	strb	r1, [r3, #0]
 8002cf0:	e7c5      	b.n	8002c7e <_puts_r+0x42>
 8002cf2:	4622      	mov	r2, r4
 8002cf4:	4628      	mov	r0, r5
 8002cf6:	f000 f817 	bl	8002d28 <__swbuf_r>
 8002cfa:	3001      	adds	r0, #1
 8002cfc:	d1bf      	bne.n	8002c7e <_puts_r+0x42>
 8002cfe:	e7df      	b.n	8002cc0 <_puts_r+0x84>
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	250a      	movs	r5, #10
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	6022      	str	r2, [r4, #0]
 8002d08:	701d      	strb	r5, [r3, #0]
 8002d0a:	e7db      	b.n	8002cc4 <_puts_r+0x88>
 8002d0c:	08004fac 	.word	0x08004fac
 8002d10:	08004fcc 	.word	0x08004fcc
 8002d14:	08004f8c 	.word	0x08004f8c

08002d18 <puts>:
 8002d18:	4b02      	ldr	r3, [pc, #8]	; (8002d24 <puts+0xc>)
 8002d1a:	4601      	mov	r1, r0
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	f7ff bf8d 	b.w	8002c3c <_puts_r>
 8002d22:	bf00      	nop
 8002d24:	2000000c 	.word	0x2000000c

08002d28 <__swbuf_r>:
 8002d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2a:	460e      	mov	r6, r1
 8002d2c:	4614      	mov	r4, r2
 8002d2e:	4605      	mov	r5, r0
 8002d30:	b118      	cbz	r0, 8002d3a <__swbuf_r+0x12>
 8002d32:	6983      	ldr	r3, [r0, #24]
 8002d34:	b90b      	cbnz	r3, 8002d3a <__swbuf_r+0x12>
 8002d36:	f001 f84b 	bl	8003dd0 <__sinit>
 8002d3a:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <__swbuf_r+0x98>)
 8002d3c:	429c      	cmp	r4, r3
 8002d3e:	d12b      	bne.n	8002d98 <__swbuf_r+0x70>
 8002d40:	686c      	ldr	r4, [r5, #4]
 8002d42:	69a3      	ldr	r3, [r4, #24]
 8002d44:	60a3      	str	r3, [r4, #8]
 8002d46:	89a3      	ldrh	r3, [r4, #12]
 8002d48:	071a      	lsls	r2, r3, #28
 8002d4a:	d52f      	bpl.n	8002dac <__swbuf_r+0x84>
 8002d4c:	6923      	ldr	r3, [r4, #16]
 8002d4e:	b36b      	cbz	r3, 8002dac <__swbuf_r+0x84>
 8002d50:	6923      	ldr	r3, [r4, #16]
 8002d52:	6820      	ldr	r0, [r4, #0]
 8002d54:	1ac0      	subs	r0, r0, r3
 8002d56:	6963      	ldr	r3, [r4, #20]
 8002d58:	b2f6      	uxtb	r6, r6
 8002d5a:	4283      	cmp	r3, r0
 8002d5c:	4637      	mov	r7, r6
 8002d5e:	dc04      	bgt.n	8002d6a <__swbuf_r+0x42>
 8002d60:	4621      	mov	r1, r4
 8002d62:	4628      	mov	r0, r5
 8002d64:	f000 ffa0 	bl	8003ca8 <_fflush_r>
 8002d68:	bb30      	cbnz	r0, 8002db8 <__swbuf_r+0x90>
 8002d6a:	68a3      	ldr	r3, [r4, #8]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	60a3      	str	r3, [r4, #8]
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	6022      	str	r2, [r4, #0]
 8002d76:	701e      	strb	r6, [r3, #0]
 8002d78:	6963      	ldr	r3, [r4, #20]
 8002d7a:	3001      	adds	r0, #1
 8002d7c:	4283      	cmp	r3, r0
 8002d7e:	d004      	beq.n	8002d8a <__swbuf_r+0x62>
 8002d80:	89a3      	ldrh	r3, [r4, #12]
 8002d82:	07db      	lsls	r3, r3, #31
 8002d84:	d506      	bpl.n	8002d94 <__swbuf_r+0x6c>
 8002d86:	2e0a      	cmp	r6, #10
 8002d88:	d104      	bne.n	8002d94 <__swbuf_r+0x6c>
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	f000 ff8b 	bl	8003ca8 <_fflush_r>
 8002d92:	b988      	cbnz	r0, 8002db8 <__swbuf_r+0x90>
 8002d94:	4638      	mov	r0, r7
 8002d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <__swbuf_r+0x9c>)
 8002d9a:	429c      	cmp	r4, r3
 8002d9c:	d101      	bne.n	8002da2 <__swbuf_r+0x7a>
 8002d9e:	68ac      	ldr	r4, [r5, #8]
 8002da0:	e7cf      	b.n	8002d42 <__swbuf_r+0x1a>
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <__swbuf_r+0xa0>)
 8002da4:	429c      	cmp	r4, r3
 8002da6:	bf08      	it	eq
 8002da8:	68ec      	ldreq	r4, [r5, #12]
 8002daa:	e7ca      	b.n	8002d42 <__swbuf_r+0x1a>
 8002dac:	4621      	mov	r1, r4
 8002dae:	4628      	mov	r0, r5
 8002db0:	f000 f80c 	bl	8002dcc <__swsetup_r>
 8002db4:	2800      	cmp	r0, #0
 8002db6:	d0cb      	beq.n	8002d50 <__swbuf_r+0x28>
 8002db8:	f04f 37ff 	mov.w	r7, #4294967295
 8002dbc:	e7ea      	b.n	8002d94 <__swbuf_r+0x6c>
 8002dbe:	bf00      	nop
 8002dc0:	08004fac 	.word	0x08004fac
 8002dc4:	08004fcc 	.word	0x08004fcc
 8002dc8:	08004f8c 	.word	0x08004f8c

08002dcc <__swsetup_r>:
 8002dcc:	4b32      	ldr	r3, [pc, #200]	; (8002e98 <__swsetup_r+0xcc>)
 8002dce:	b570      	push	{r4, r5, r6, lr}
 8002dd0:	681d      	ldr	r5, [r3, #0]
 8002dd2:	4606      	mov	r6, r0
 8002dd4:	460c      	mov	r4, r1
 8002dd6:	b125      	cbz	r5, 8002de2 <__swsetup_r+0x16>
 8002dd8:	69ab      	ldr	r3, [r5, #24]
 8002dda:	b913      	cbnz	r3, 8002de2 <__swsetup_r+0x16>
 8002ddc:	4628      	mov	r0, r5
 8002dde:	f000 fff7 	bl	8003dd0 <__sinit>
 8002de2:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <__swsetup_r+0xd0>)
 8002de4:	429c      	cmp	r4, r3
 8002de6:	d10f      	bne.n	8002e08 <__swsetup_r+0x3c>
 8002de8:	686c      	ldr	r4, [r5, #4]
 8002dea:	89a3      	ldrh	r3, [r4, #12]
 8002dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002df0:	0719      	lsls	r1, r3, #28
 8002df2:	d42c      	bmi.n	8002e4e <__swsetup_r+0x82>
 8002df4:	06dd      	lsls	r5, r3, #27
 8002df6:	d411      	bmi.n	8002e1c <__swsetup_r+0x50>
 8002df8:	2309      	movs	r3, #9
 8002dfa:	6033      	str	r3, [r6, #0]
 8002dfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e00:	81a3      	strh	r3, [r4, #12]
 8002e02:	f04f 30ff 	mov.w	r0, #4294967295
 8002e06:	e03e      	b.n	8002e86 <__swsetup_r+0xba>
 8002e08:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <__swsetup_r+0xd4>)
 8002e0a:	429c      	cmp	r4, r3
 8002e0c:	d101      	bne.n	8002e12 <__swsetup_r+0x46>
 8002e0e:	68ac      	ldr	r4, [r5, #8]
 8002e10:	e7eb      	b.n	8002dea <__swsetup_r+0x1e>
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <__swsetup_r+0xd8>)
 8002e14:	429c      	cmp	r4, r3
 8002e16:	bf08      	it	eq
 8002e18:	68ec      	ldreq	r4, [r5, #12]
 8002e1a:	e7e6      	b.n	8002dea <__swsetup_r+0x1e>
 8002e1c:	0758      	lsls	r0, r3, #29
 8002e1e:	d512      	bpl.n	8002e46 <__swsetup_r+0x7a>
 8002e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e22:	b141      	cbz	r1, 8002e36 <__swsetup_r+0x6a>
 8002e24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e28:	4299      	cmp	r1, r3
 8002e2a:	d002      	beq.n	8002e32 <__swsetup_r+0x66>
 8002e2c:	4630      	mov	r0, r6
 8002e2e:	f001 fc7b 	bl	8004728 <_free_r>
 8002e32:	2300      	movs	r3, #0
 8002e34:	6363      	str	r3, [r4, #52]	; 0x34
 8002e36:	89a3      	ldrh	r3, [r4, #12]
 8002e38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e3c:	81a3      	strh	r3, [r4, #12]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	6063      	str	r3, [r4, #4]
 8002e42:	6923      	ldr	r3, [r4, #16]
 8002e44:	6023      	str	r3, [r4, #0]
 8002e46:	89a3      	ldrh	r3, [r4, #12]
 8002e48:	f043 0308 	orr.w	r3, r3, #8
 8002e4c:	81a3      	strh	r3, [r4, #12]
 8002e4e:	6923      	ldr	r3, [r4, #16]
 8002e50:	b94b      	cbnz	r3, 8002e66 <__swsetup_r+0x9a>
 8002e52:	89a3      	ldrh	r3, [r4, #12]
 8002e54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e5c:	d003      	beq.n	8002e66 <__swsetup_r+0x9a>
 8002e5e:	4621      	mov	r1, r4
 8002e60:	4630      	mov	r0, r6
 8002e62:	f001 f87f 	bl	8003f64 <__smakebuf_r>
 8002e66:	89a0      	ldrh	r0, [r4, #12]
 8002e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e6c:	f010 0301 	ands.w	r3, r0, #1
 8002e70:	d00a      	beq.n	8002e88 <__swsetup_r+0xbc>
 8002e72:	2300      	movs	r3, #0
 8002e74:	60a3      	str	r3, [r4, #8]
 8002e76:	6963      	ldr	r3, [r4, #20]
 8002e78:	425b      	negs	r3, r3
 8002e7a:	61a3      	str	r3, [r4, #24]
 8002e7c:	6923      	ldr	r3, [r4, #16]
 8002e7e:	b943      	cbnz	r3, 8002e92 <__swsetup_r+0xc6>
 8002e80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e84:	d1ba      	bne.n	8002dfc <__swsetup_r+0x30>
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
 8002e88:	0781      	lsls	r1, r0, #30
 8002e8a:	bf58      	it	pl
 8002e8c:	6963      	ldrpl	r3, [r4, #20]
 8002e8e:	60a3      	str	r3, [r4, #8]
 8002e90:	e7f4      	b.n	8002e7c <__swsetup_r+0xb0>
 8002e92:	2000      	movs	r0, #0
 8002e94:	e7f7      	b.n	8002e86 <__swsetup_r+0xba>
 8002e96:	bf00      	nop
 8002e98:	2000000c 	.word	0x2000000c
 8002e9c:	08004fac 	.word	0x08004fac
 8002ea0:	08004fcc 	.word	0x08004fcc
 8002ea4:	08004f8c 	.word	0x08004f8c

08002ea8 <quorem>:
 8002ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eac:	6903      	ldr	r3, [r0, #16]
 8002eae:	690c      	ldr	r4, [r1, #16]
 8002eb0:	42a3      	cmp	r3, r4
 8002eb2:	4607      	mov	r7, r0
 8002eb4:	f2c0 8081 	blt.w	8002fba <quorem+0x112>
 8002eb8:	3c01      	subs	r4, #1
 8002eba:	f101 0814 	add.w	r8, r1, #20
 8002ebe:	f100 0514 	add.w	r5, r0, #20
 8002ec2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002ecc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002ed8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002edc:	fbb2 f6f3 	udiv	r6, r2, r3
 8002ee0:	d331      	bcc.n	8002f46 <quorem+0x9e>
 8002ee2:	f04f 0e00 	mov.w	lr, #0
 8002ee6:	4640      	mov	r0, r8
 8002ee8:	46ac      	mov	ip, r5
 8002eea:	46f2      	mov	sl, lr
 8002eec:	f850 2b04 	ldr.w	r2, [r0], #4
 8002ef0:	b293      	uxth	r3, r2
 8002ef2:	fb06 e303 	mla	r3, r6, r3, lr
 8002ef6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	ebaa 0303 	sub.w	r3, sl, r3
 8002f00:	0c12      	lsrs	r2, r2, #16
 8002f02:	f8dc a000 	ldr.w	sl, [ip]
 8002f06:	fb06 e202 	mla	r2, r6, r2, lr
 8002f0a:	fa13 f38a 	uxtah	r3, r3, sl
 8002f0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002f12:	fa1f fa82 	uxth.w	sl, r2
 8002f16:	f8dc 2000 	ldr.w	r2, [ip]
 8002f1a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8002f1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f28:	4581      	cmp	r9, r0
 8002f2a:	f84c 3b04 	str.w	r3, [ip], #4
 8002f2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002f32:	d2db      	bcs.n	8002eec <quorem+0x44>
 8002f34:	f855 300b 	ldr.w	r3, [r5, fp]
 8002f38:	b92b      	cbnz	r3, 8002f46 <quorem+0x9e>
 8002f3a:	9b01      	ldr	r3, [sp, #4]
 8002f3c:	3b04      	subs	r3, #4
 8002f3e:	429d      	cmp	r5, r3
 8002f40:	461a      	mov	r2, r3
 8002f42:	d32e      	bcc.n	8002fa2 <quorem+0xfa>
 8002f44:	613c      	str	r4, [r7, #16]
 8002f46:	4638      	mov	r0, r7
 8002f48:	f001 fade 	bl	8004508 <__mcmp>
 8002f4c:	2800      	cmp	r0, #0
 8002f4e:	db24      	blt.n	8002f9a <quorem+0xf2>
 8002f50:	3601      	adds	r6, #1
 8002f52:	4628      	mov	r0, r5
 8002f54:	f04f 0c00 	mov.w	ip, #0
 8002f58:	f858 2b04 	ldr.w	r2, [r8], #4
 8002f5c:	f8d0 e000 	ldr.w	lr, [r0]
 8002f60:	b293      	uxth	r3, r2
 8002f62:	ebac 0303 	sub.w	r3, ip, r3
 8002f66:	0c12      	lsrs	r2, r2, #16
 8002f68:	fa13 f38e 	uxtah	r3, r3, lr
 8002f6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002f70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f7a:	45c1      	cmp	r9, r8
 8002f7c:	f840 3b04 	str.w	r3, [r0], #4
 8002f80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002f84:	d2e8      	bcs.n	8002f58 <quorem+0xb0>
 8002f86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002f8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002f8e:	b922      	cbnz	r2, 8002f9a <quorem+0xf2>
 8002f90:	3b04      	subs	r3, #4
 8002f92:	429d      	cmp	r5, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	d30a      	bcc.n	8002fae <quorem+0x106>
 8002f98:	613c      	str	r4, [r7, #16]
 8002f9a:	4630      	mov	r0, r6
 8002f9c:	b003      	add	sp, #12
 8002f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	3b04      	subs	r3, #4
 8002fa6:	2a00      	cmp	r2, #0
 8002fa8:	d1cc      	bne.n	8002f44 <quorem+0x9c>
 8002faa:	3c01      	subs	r4, #1
 8002fac:	e7c7      	b.n	8002f3e <quorem+0x96>
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	3b04      	subs	r3, #4
 8002fb2:	2a00      	cmp	r2, #0
 8002fb4:	d1f0      	bne.n	8002f98 <quorem+0xf0>
 8002fb6:	3c01      	subs	r4, #1
 8002fb8:	e7eb      	b.n	8002f92 <quorem+0xea>
 8002fba:	2000      	movs	r0, #0
 8002fbc:	e7ee      	b.n	8002f9c <quorem+0xf4>
	...

08002fc0 <_dtoa_r>:
 8002fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fc4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002fc6:	b099      	sub	sp, #100	; 0x64
 8002fc8:	4616      	mov	r6, r2
 8002fca:	461f      	mov	r7, r3
 8002fcc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002fd0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8002fd4:	4605      	mov	r5, r0
 8002fd6:	b974      	cbnz	r4, 8002ff6 <_dtoa_r+0x36>
 8002fd8:	2010      	movs	r0, #16
 8002fda:	f001 f803 	bl	8003fe4 <malloc>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	6268      	str	r0, [r5, #36]	; 0x24
 8002fe2:	b920      	cbnz	r0, 8002fee <_dtoa_r+0x2e>
 8002fe4:	4ba8      	ldr	r3, [pc, #672]	; (8003288 <_dtoa_r+0x2c8>)
 8002fe6:	21ea      	movs	r1, #234	; 0xea
 8002fe8:	48a8      	ldr	r0, [pc, #672]	; (800328c <_dtoa_r+0x2cc>)
 8002fea:	f001 fcab 	bl	8004944 <__assert_func>
 8002fee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8002ff2:	6004      	str	r4, [r0, #0]
 8002ff4:	60c4      	str	r4, [r0, #12]
 8002ff6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002ff8:	6819      	ldr	r1, [r3, #0]
 8002ffa:	b151      	cbz	r1, 8003012 <_dtoa_r+0x52>
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	604a      	str	r2, [r1, #4]
 8003000:	2301      	movs	r3, #1
 8003002:	4093      	lsls	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
 8003006:	4628      	mov	r0, r5
 8003008:	f001 f842 	bl	8004090 <_Bfree>
 800300c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	1e3b      	subs	r3, r7, #0
 8003014:	bfb9      	ittee	lt
 8003016:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800301a:	9305      	strlt	r3, [sp, #20]
 800301c:	2300      	movge	r3, #0
 800301e:	f8c8 3000 	strge.w	r3, [r8]
 8003022:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003026:	4b9a      	ldr	r3, [pc, #616]	; (8003290 <_dtoa_r+0x2d0>)
 8003028:	bfbc      	itt	lt
 800302a:	2201      	movlt	r2, #1
 800302c:	f8c8 2000 	strlt.w	r2, [r8]
 8003030:	ea33 0309 	bics.w	r3, r3, r9
 8003034:	d119      	bne.n	800306a <_dtoa_r+0xaa>
 8003036:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003038:	f242 730f 	movw	r3, #9999	; 0x270f
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003042:	4333      	orrs	r3, r6
 8003044:	f000 8581 	beq.w	8003b4a <_dtoa_r+0xb8a>
 8003048:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800304a:	b953      	cbnz	r3, 8003062 <_dtoa_r+0xa2>
 800304c:	4b91      	ldr	r3, [pc, #580]	; (8003294 <_dtoa_r+0x2d4>)
 800304e:	e022      	b.n	8003096 <_dtoa_r+0xd6>
 8003050:	4b91      	ldr	r3, [pc, #580]	; (8003298 <_dtoa_r+0x2d8>)
 8003052:	9308      	str	r3, [sp, #32]
 8003054:	3308      	adds	r3, #8
 8003056:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	9808      	ldr	r0, [sp, #32]
 800305c:	b019      	add	sp, #100	; 0x64
 800305e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003062:	4b8c      	ldr	r3, [pc, #560]	; (8003294 <_dtoa_r+0x2d4>)
 8003064:	9308      	str	r3, [sp, #32]
 8003066:	3303      	adds	r3, #3
 8003068:	e7f5      	b.n	8003056 <_dtoa_r+0x96>
 800306a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800306e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003072:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003076:	2200      	movs	r2, #0
 8003078:	2300      	movs	r3, #0
 800307a:	f7fd fd5d 	bl	8000b38 <__aeabi_dcmpeq>
 800307e:	4680      	mov	r8, r0
 8003080:	b158      	cbz	r0, 800309a <_dtoa_r+0xda>
 8003082:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003084:	2301      	movs	r3, #1
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 855a 	beq.w	8003b44 <_dtoa_r+0xb84>
 8003090:	4882      	ldr	r0, [pc, #520]	; (800329c <_dtoa_r+0x2dc>)
 8003092:	6018      	str	r0, [r3, #0]
 8003094:	1e43      	subs	r3, r0, #1
 8003096:	9308      	str	r3, [sp, #32]
 8003098:	e7df      	b.n	800305a <_dtoa_r+0x9a>
 800309a:	ab16      	add	r3, sp, #88	; 0x58
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	ab17      	add	r3, sp, #92	; 0x5c
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	4628      	mov	r0, r5
 80030a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80030a8:	f001 fad4 	bl	8004654 <__d2b>
 80030ac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80030b0:	4682      	mov	sl, r0
 80030b2:	2c00      	cmp	r4, #0
 80030b4:	d07e      	beq.n	80031b4 <_dtoa_r+0x1f4>
 80030b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030b8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80030bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80030c4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80030c8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80030cc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80030d0:	4b73      	ldr	r3, [pc, #460]	; (80032a0 <_dtoa_r+0x2e0>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	f7fd f910 	bl	80002f8 <__aeabi_dsub>
 80030d8:	a365      	add	r3, pc, #404	; (adr r3, 8003270 <_dtoa_r+0x2b0>)
 80030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030de:	f7fd fac3 	bl	8000668 <__aeabi_dmul>
 80030e2:	a365      	add	r3, pc, #404	; (adr r3, 8003278 <_dtoa_r+0x2b8>)
 80030e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e8:	f7fd f908 	bl	80002fc <__adddf3>
 80030ec:	4606      	mov	r6, r0
 80030ee:	4620      	mov	r0, r4
 80030f0:	460f      	mov	r7, r1
 80030f2:	f7fd fa4f 	bl	8000594 <__aeabi_i2d>
 80030f6:	a362      	add	r3, pc, #392	; (adr r3, 8003280 <_dtoa_r+0x2c0>)
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	f7fd fab4 	bl	8000668 <__aeabi_dmul>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4630      	mov	r0, r6
 8003106:	4639      	mov	r1, r7
 8003108:	f7fd f8f8 	bl	80002fc <__adddf3>
 800310c:	4606      	mov	r6, r0
 800310e:	460f      	mov	r7, r1
 8003110:	f7fd fd5a 	bl	8000bc8 <__aeabi_d2iz>
 8003114:	2200      	movs	r2, #0
 8003116:	4681      	mov	r9, r0
 8003118:	2300      	movs	r3, #0
 800311a:	4630      	mov	r0, r6
 800311c:	4639      	mov	r1, r7
 800311e:	f7fd fd15 	bl	8000b4c <__aeabi_dcmplt>
 8003122:	b148      	cbz	r0, 8003138 <_dtoa_r+0x178>
 8003124:	4648      	mov	r0, r9
 8003126:	f7fd fa35 	bl	8000594 <__aeabi_i2d>
 800312a:	4632      	mov	r2, r6
 800312c:	463b      	mov	r3, r7
 800312e:	f7fd fd03 	bl	8000b38 <__aeabi_dcmpeq>
 8003132:	b908      	cbnz	r0, 8003138 <_dtoa_r+0x178>
 8003134:	f109 39ff 	add.w	r9, r9, #4294967295
 8003138:	f1b9 0f16 	cmp.w	r9, #22
 800313c:	d857      	bhi.n	80031ee <_dtoa_r+0x22e>
 800313e:	4b59      	ldr	r3, [pc, #356]	; (80032a4 <_dtoa_r+0x2e4>)
 8003140:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800314c:	f7fd fcfe 	bl	8000b4c <__aeabi_dcmplt>
 8003150:	2800      	cmp	r0, #0
 8003152:	d04e      	beq.n	80031f2 <_dtoa_r+0x232>
 8003154:	f109 39ff 	add.w	r9, r9, #4294967295
 8003158:	2300      	movs	r3, #0
 800315a:	930f      	str	r3, [sp, #60]	; 0x3c
 800315c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800315e:	1b1c      	subs	r4, r3, r4
 8003160:	1e63      	subs	r3, r4, #1
 8003162:	9309      	str	r3, [sp, #36]	; 0x24
 8003164:	bf45      	ittet	mi
 8003166:	f1c4 0301 	rsbmi	r3, r4, #1
 800316a:	9306      	strmi	r3, [sp, #24]
 800316c:	2300      	movpl	r3, #0
 800316e:	2300      	movmi	r3, #0
 8003170:	bf4c      	ite	mi
 8003172:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003174:	9306      	strpl	r3, [sp, #24]
 8003176:	f1b9 0f00 	cmp.w	r9, #0
 800317a:	db3c      	blt.n	80031f6 <_dtoa_r+0x236>
 800317c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800317e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003182:	444b      	add	r3, r9
 8003184:	9309      	str	r3, [sp, #36]	; 0x24
 8003186:	2300      	movs	r3, #0
 8003188:	930a      	str	r3, [sp, #40]	; 0x28
 800318a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800318c:	2b09      	cmp	r3, #9
 800318e:	f200 808d 	bhi.w	80032ac <_dtoa_r+0x2ec>
 8003192:	2b05      	cmp	r3, #5
 8003194:	bfc4      	itt	gt
 8003196:	3b04      	subgt	r3, #4
 8003198:	9322      	strgt	r3, [sp, #136]	; 0x88
 800319a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800319c:	f1a3 0302 	sub.w	r3, r3, #2
 80031a0:	bfcc      	ite	gt
 80031a2:	2400      	movgt	r4, #0
 80031a4:	2401      	movle	r4, #1
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	f200 808c 	bhi.w	80032c4 <_dtoa_r+0x304>
 80031ac:	e8df f003 	tbb	[pc, r3]
 80031b0:	5b4d4f2d 	.word	0x5b4d4f2d
 80031b4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80031b8:	441c      	add	r4, r3
 80031ba:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80031be:	2b20      	cmp	r3, #32
 80031c0:	bfc3      	ittte	gt
 80031c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80031c6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80031ca:	fa09 f303 	lslgt.w	r3, r9, r3
 80031ce:	f1c3 0320 	rsble	r3, r3, #32
 80031d2:	bfc6      	itte	gt
 80031d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80031d8:	4318      	orrgt	r0, r3
 80031da:	fa06 f003 	lslle.w	r0, r6, r3
 80031de:	f7fd f9c9 	bl	8000574 <__aeabi_ui2d>
 80031e2:	2301      	movs	r3, #1
 80031e4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80031e8:	3c01      	subs	r4, #1
 80031ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80031ec:	e770      	b.n	80030d0 <_dtoa_r+0x110>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e7b3      	b.n	800315a <_dtoa_r+0x19a>
 80031f2:	900f      	str	r0, [sp, #60]	; 0x3c
 80031f4:	e7b2      	b.n	800315c <_dtoa_r+0x19c>
 80031f6:	9b06      	ldr	r3, [sp, #24]
 80031f8:	eba3 0309 	sub.w	r3, r3, r9
 80031fc:	9306      	str	r3, [sp, #24]
 80031fe:	f1c9 0300 	rsb	r3, r9, #0
 8003202:	930a      	str	r3, [sp, #40]	; 0x28
 8003204:	2300      	movs	r3, #0
 8003206:	930e      	str	r3, [sp, #56]	; 0x38
 8003208:	e7bf      	b.n	800318a <_dtoa_r+0x1ca>
 800320a:	2300      	movs	r3, #0
 800320c:	930b      	str	r3, [sp, #44]	; 0x2c
 800320e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003210:	2b00      	cmp	r3, #0
 8003212:	dc5a      	bgt.n	80032ca <_dtoa_r+0x30a>
 8003214:	f04f 0b01 	mov.w	fp, #1
 8003218:	f8cd b008 	str.w	fp, [sp, #8]
 800321c:	465b      	mov	r3, fp
 800321e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003222:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003224:	2200      	movs	r2, #0
 8003226:	6042      	str	r2, [r0, #4]
 8003228:	2204      	movs	r2, #4
 800322a:	f102 0614 	add.w	r6, r2, #20
 800322e:	429e      	cmp	r6, r3
 8003230:	6841      	ldr	r1, [r0, #4]
 8003232:	d950      	bls.n	80032d6 <_dtoa_r+0x316>
 8003234:	4628      	mov	r0, r5
 8003236:	f000 feeb 	bl	8004010 <_Balloc>
 800323a:	9008      	str	r0, [sp, #32]
 800323c:	2800      	cmp	r0, #0
 800323e:	d14e      	bne.n	80032de <_dtoa_r+0x31e>
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <_dtoa_r+0x2e8>)
 8003242:	4602      	mov	r2, r0
 8003244:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003248:	e6ce      	b.n	8002fe8 <_dtoa_r+0x28>
 800324a:	2301      	movs	r3, #1
 800324c:	e7de      	b.n	800320c <_dtoa_r+0x24c>
 800324e:	2300      	movs	r3, #0
 8003250:	930b      	str	r3, [sp, #44]	; 0x2c
 8003252:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003254:	eb09 0b03 	add.w	fp, r9, r3
 8003258:	f10b 0301 	add.w	r3, fp, #1
 800325c:	2b01      	cmp	r3, #1
 800325e:	9302      	str	r3, [sp, #8]
 8003260:	bfb8      	it	lt
 8003262:	2301      	movlt	r3, #1
 8003264:	e7dd      	b.n	8003222 <_dtoa_r+0x262>
 8003266:	2301      	movs	r3, #1
 8003268:	e7f2      	b.n	8003250 <_dtoa_r+0x290>
 800326a:	bf00      	nop
 800326c:	f3af 8000 	nop.w
 8003270:	636f4361 	.word	0x636f4361
 8003274:	3fd287a7 	.word	0x3fd287a7
 8003278:	8b60c8b3 	.word	0x8b60c8b3
 800327c:	3fc68a28 	.word	0x3fc68a28
 8003280:	509f79fb 	.word	0x509f79fb
 8003284:	3fd34413 	.word	0x3fd34413
 8003288:	08004f05 	.word	0x08004f05
 800328c:	08004f1c 	.word	0x08004f1c
 8003290:	7ff00000 	.word	0x7ff00000
 8003294:	08004f01 	.word	0x08004f01
 8003298:	08004ef8 	.word	0x08004ef8
 800329c:	08004ed5 	.word	0x08004ed5
 80032a0:	3ff80000 	.word	0x3ff80000
 80032a4:	08005078 	.word	0x08005078
 80032a8:	08004f7b 	.word	0x08004f7b
 80032ac:	2401      	movs	r4, #1
 80032ae:	2300      	movs	r3, #0
 80032b0:	9322      	str	r3, [sp, #136]	; 0x88
 80032b2:	940b      	str	r4, [sp, #44]	; 0x2c
 80032b4:	f04f 3bff 	mov.w	fp, #4294967295
 80032b8:	2200      	movs	r2, #0
 80032ba:	f8cd b008 	str.w	fp, [sp, #8]
 80032be:	2312      	movs	r3, #18
 80032c0:	9223      	str	r2, [sp, #140]	; 0x8c
 80032c2:	e7ae      	b.n	8003222 <_dtoa_r+0x262>
 80032c4:	2301      	movs	r3, #1
 80032c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80032c8:	e7f4      	b.n	80032b4 <_dtoa_r+0x2f4>
 80032ca:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80032ce:	f8cd b008 	str.w	fp, [sp, #8]
 80032d2:	465b      	mov	r3, fp
 80032d4:	e7a5      	b.n	8003222 <_dtoa_r+0x262>
 80032d6:	3101      	adds	r1, #1
 80032d8:	6041      	str	r1, [r0, #4]
 80032da:	0052      	lsls	r2, r2, #1
 80032dc:	e7a5      	b.n	800322a <_dtoa_r+0x26a>
 80032de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80032e0:	9a08      	ldr	r2, [sp, #32]
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	9b02      	ldr	r3, [sp, #8]
 80032e6:	2b0e      	cmp	r3, #14
 80032e8:	f200 80a8 	bhi.w	800343c <_dtoa_r+0x47c>
 80032ec:	2c00      	cmp	r4, #0
 80032ee:	f000 80a5 	beq.w	800343c <_dtoa_r+0x47c>
 80032f2:	f1b9 0f00 	cmp.w	r9, #0
 80032f6:	dd34      	ble.n	8003362 <_dtoa_r+0x3a2>
 80032f8:	4a9a      	ldr	r2, [pc, #616]	; (8003564 <_dtoa_r+0x5a4>)
 80032fa:	f009 030f 	and.w	r3, r9, #15
 80032fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003302:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003306:	f419 7f80 	tst.w	r9, #256	; 0x100
 800330a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800330e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003312:	d016      	beq.n	8003342 <_dtoa_r+0x382>
 8003314:	4b94      	ldr	r3, [pc, #592]	; (8003568 <_dtoa_r+0x5a8>)
 8003316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800331a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800331e:	f7fd facd 	bl	80008bc <__aeabi_ddiv>
 8003322:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003326:	f004 040f 	and.w	r4, r4, #15
 800332a:	2703      	movs	r7, #3
 800332c:	4e8e      	ldr	r6, [pc, #568]	; (8003568 <_dtoa_r+0x5a8>)
 800332e:	b954      	cbnz	r4, 8003346 <_dtoa_r+0x386>
 8003330:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003338:	f7fd fac0 	bl	80008bc <__aeabi_ddiv>
 800333c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003340:	e029      	b.n	8003396 <_dtoa_r+0x3d6>
 8003342:	2702      	movs	r7, #2
 8003344:	e7f2      	b.n	800332c <_dtoa_r+0x36c>
 8003346:	07e1      	lsls	r1, r4, #31
 8003348:	d508      	bpl.n	800335c <_dtoa_r+0x39c>
 800334a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800334e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003352:	f7fd f989 	bl	8000668 <__aeabi_dmul>
 8003356:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800335a:	3701      	adds	r7, #1
 800335c:	1064      	asrs	r4, r4, #1
 800335e:	3608      	adds	r6, #8
 8003360:	e7e5      	b.n	800332e <_dtoa_r+0x36e>
 8003362:	f000 80a5 	beq.w	80034b0 <_dtoa_r+0x4f0>
 8003366:	f1c9 0400 	rsb	r4, r9, #0
 800336a:	4b7e      	ldr	r3, [pc, #504]	; (8003564 <_dtoa_r+0x5a4>)
 800336c:	4e7e      	ldr	r6, [pc, #504]	; (8003568 <_dtoa_r+0x5a8>)
 800336e:	f004 020f 	and.w	r2, r4, #15
 8003372:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800337e:	f7fd f973 	bl	8000668 <__aeabi_dmul>
 8003382:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003386:	1124      	asrs	r4, r4, #4
 8003388:	2300      	movs	r3, #0
 800338a:	2702      	movs	r7, #2
 800338c:	2c00      	cmp	r4, #0
 800338e:	f040 8084 	bne.w	800349a <_dtoa_r+0x4da>
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1d2      	bne.n	800333c <_dtoa_r+0x37c>
 8003396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 808b 	beq.w	80034b4 <_dtoa_r+0x4f4>
 800339e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80033a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80033a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80033aa:	4b70      	ldr	r3, [pc, #448]	; (800356c <_dtoa_r+0x5ac>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	f7fd fbcd 	bl	8000b4c <__aeabi_dcmplt>
 80033b2:	2800      	cmp	r0, #0
 80033b4:	d07e      	beq.n	80034b4 <_dtoa_r+0x4f4>
 80033b6:	9b02      	ldr	r3, [sp, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d07b      	beq.n	80034b4 <_dtoa_r+0x4f4>
 80033bc:	f1bb 0f00 	cmp.w	fp, #0
 80033c0:	dd38      	ble.n	8003434 <_dtoa_r+0x474>
 80033c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80033c6:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <_dtoa_r+0x5b0>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	f7fd f94d 	bl	8000668 <__aeabi_dmul>
 80033ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80033d2:	f109 38ff 	add.w	r8, r9, #4294967295
 80033d6:	3701      	adds	r7, #1
 80033d8:	465c      	mov	r4, fp
 80033da:	4638      	mov	r0, r7
 80033dc:	f7fd f8da 	bl	8000594 <__aeabi_i2d>
 80033e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80033e4:	f7fd f940 	bl	8000668 <__aeabi_dmul>
 80033e8:	4b62      	ldr	r3, [pc, #392]	; (8003574 <_dtoa_r+0x5b4>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	f7fc ff86 	bl	80002fc <__adddf3>
 80033f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80033f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80033f8:	9611      	str	r6, [sp, #68]	; 0x44
 80033fa:	2c00      	cmp	r4, #0
 80033fc:	d15d      	bne.n	80034ba <_dtoa_r+0x4fa>
 80033fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003402:	4b5d      	ldr	r3, [pc, #372]	; (8003578 <_dtoa_r+0x5b8>)
 8003404:	2200      	movs	r2, #0
 8003406:	f7fc ff77 	bl	80002f8 <__aeabi_dsub>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003412:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003414:	4633      	mov	r3, r6
 8003416:	f7fd fbb7 	bl	8000b88 <__aeabi_dcmpgt>
 800341a:	2800      	cmp	r0, #0
 800341c:	f040 829e 	bne.w	800395c <_dtoa_r+0x99c>
 8003420:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003424:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003426:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800342a:	f7fd fb8f 	bl	8000b4c <__aeabi_dcmplt>
 800342e:	2800      	cmp	r0, #0
 8003430:	f040 8292 	bne.w	8003958 <_dtoa_r+0x998>
 8003434:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003438:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800343c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800343e:	2b00      	cmp	r3, #0
 8003440:	f2c0 8153 	blt.w	80036ea <_dtoa_r+0x72a>
 8003444:	f1b9 0f0e 	cmp.w	r9, #14
 8003448:	f300 814f 	bgt.w	80036ea <_dtoa_r+0x72a>
 800344c:	4b45      	ldr	r3, [pc, #276]	; (8003564 <_dtoa_r+0x5a4>)
 800344e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003452:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003456:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800345a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800345c:	2b00      	cmp	r3, #0
 800345e:	f280 80db 	bge.w	8003618 <_dtoa_r+0x658>
 8003462:	9b02      	ldr	r3, [sp, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f300 80d7 	bgt.w	8003618 <_dtoa_r+0x658>
 800346a:	f040 8274 	bne.w	8003956 <_dtoa_r+0x996>
 800346e:	4b42      	ldr	r3, [pc, #264]	; (8003578 <_dtoa_r+0x5b8>)
 8003470:	2200      	movs	r2, #0
 8003472:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003476:	f7fd f8f7 	bl	8000668 <__aeabi_dmul>
 800347a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800347e:	f7fd fb79 	bl	8000b74 <__aeabi_dcmpge>
 8003482:	9c02      	ldr	r4, [sp, #8]
 8003484:	4626      	mov	r6, r4
 8003486:	2800      	cmp	r0, #0
 8003488:	f040 824a 	bne.w	8003920 <_dtoa_r+0x960>
 800348c:	9f08      	ldr	r7, [sp, #32]
 800348e:	2331      	movs	r3, #49	; 0x31
 8003490:	f807 3b01 	strb.w	r3, [r7], #1
 8003494:	f109 0901 	add.w	r9, r9, #1
 8003498:	e246      	b.n	8003928 <_dtoa_r+0x968>
 800349a:	07e2      	lsls	r2, r4, #31
 800349c:	d505      	bpl.n	80034aa <_dtoa_r+0x4ea>
 800349e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80034a2:	f7fd f8e1 	bl	8000668 <__aeabi_dmul>
 80034a6:	3701      	adds	r7, #1
 80034a8:	2301      	movs	r3, #1
 80034aa:	1064      	asrs	r4, r4, #1
 80034ac:	3608      	adds	r6, #8
 80034ae:	e76d      	b.n	800338c <_dtoa_r+0x3cc>
 80034b0:	2702      	movs	r7, #2
 80034b2:	e770      	b.n	8003396 <_dtoa_r+0x3d6>
 80034b4:	9c02      	ldr	r4, [sp, #8]
 80034b6:	46c8      	mov	r8, r9
 80034b8:	e78f      	b.n	80033da <_dtoa_r+0x41a>
 80034ba:	9908      	ldr	r1, [sp, #32]
 80034bc:	4b29      	ldr	r3, [pc, #164]	; (8003564 <_dtoa_r+0x5a4>)
 80034be:	4421      	add	r1, r4
 80034c0:	9112      	str	r1, [sp, #72]	; 0x48
 80034c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80034c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80034cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80034d0:	2900      	cmp	r1, #0
 80034d2:	d055      	beq.n	8003580 <_dtoa_r+0x5c0>
 80034d4:	4929      	ldr	r1, [pc, #164]	; (800357c <_dtoa_r+0x5bc>)
 80034d6:	2000      	movs	r0, #0
 80034d8:	f7fd f9f0 	bl	80008bc <__aeabi_ddiv>
 80034dc:	463b      	mov	r3, r7
 80034de:	4632      	mov	r2, r6
 80034e0:	f7fc ff0a 	bl	80002f8 <__aeabi_dsub>
 80034e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80034e8:	9f08      	ldr	r7, [sp, #32]
 80034ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80034ee:	f7fd fb6b 	bl	8000bc8 <__aeabi_d2iz>
 80034f2:	4604      	mov	r4, r0
 80034f4:	f7fd f84e 	bl	8000594 <__aeabi_i2d>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003500:	f7fc fefa 	bl	80002f8 <__aeabi_dsub>
 8003504:	3430      	adds	r4, #48	; 0x30
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800350e:	f807 4b01 	strb.w	r4, [r7], #1
 8003512:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003516:	f7fd fb19 	bl	8000b4c <__aeabi_dcmplt>
 800351a:	2800      	cmp	r0, #0
 800351c:	d174      	bne.n	8003608 <_dtoa_r+0x648>
 800351e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003522:	4912      	ldr	r1, [pc, #72]	; (800356c <_dtoa_r+0x5ac>)
 8003524:	2000      	movs	r0, #0
 8003526:	f7fc fee7 	bl	80002f8 <__aeabi_dsub>
 800352a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800352e:	f7fd fb0d 	bl	8000b4c <__aeabi_dcmplt>
 8003532:	2800      	cmp	r0, #0
 8003534:	f040 80b6 	bne.w	80036a4 <_dtoa_r+0x6e4>
 8003538:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800353a:	429f      	cmp	r7, r3
 800353c:	f43f af7a 	beq.w	8003434 <_dtoa_r+0x474>
 8003540:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <_dtoa_r+0x5b0>)
 8003546:	2200      	movs	r2, #0
 8003548:	f7fd f88e 	bl	8000668 <__aeabi_dmul>
 800354c:	4b08      	ldr	r3, [pc, #32]	; (8003570 <_dtoa_r+0x5b0>)
 800354e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003552:	2200      	movs	r2, #0
 8003554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003558:	f7fd f886 	bl	8000668 <__aeabi_dmul>
 800355c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003560:	e7c3      	b.n	80034ea <_dtoa_r+0x52a>
 8003562:	bf00      	nop
 8003564:	08005078 	.word	0x08005078
 8003568:	08005050 	.word	0x08005050
 800356c:	3ff00000 	.word	0x3ff00000
 8003570:	40240000 	.word	0x40240000
 8003574:	401c0000 	.word	0x401c0000
 8003578:	40140000 	.word	0x40140000
 800357c:	3fe00000 	.word	0x3fe00000
 8003580:	4630      	mov	r0, r6
 8003582:	4639      	mov	r1, r7
 8003584:	f7fd f870 	bl	8000668 <__aeabi_dmul>
 8003588:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800358c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800358e:	9c08      	ldr	r4, [sp, #32]
 8003590:	9314      	str	r3, [sp, #80]	; 0x50
 8003592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003596:	f7fd fb17 	bl	8000bc8 <__aeabi_d2iz>
 800359a:	9015      	str	r0, [sp, #84]	; 0x54
 800359c:	f7fc fffa 	bl	8000594 <__aeabi_i2d>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80035a8:	f7fc fea6 	bl	80002f8 <__aeabi_dsub>
 80035ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80035ae:	3330      	adds	r3, #48	; 0x30
 80035b0:	f804 3b01 	strb.w	r3, [r4], #1
 80035b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80035b6:	429c      	cmp	r4, r3
 80035b8:	4606      	mov	r6, r0
 80035ba:	460f      	mov	r7, r1
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	d124      	bne.n	800360c <_dtoa_r+0x64c>
 80035c2:	4bb2      	ldr	r3, [pc, #712]	; (800388c <_dtoa_r+0x8cc>)
 80035c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80035c8:	f7fc fe98 	bl	80002fc <__adddf3>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4630      	mov	r0, r6
 80035d2:	4639      	mov	r1, r7
 80035d4:	f7fd fad8 	bl	8000b88 <__aeabi_dcmpgt>
 80035d8:	2800      	cmp	r0, #0
 80035da:	d162      	bne.n	80036a2 <_dtoa_r+0x6e2>
 80035dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80035e0:	49aa      	ldr	r1, [pc, #680]	; (800388c <_dtoa_r+0x8cc>)
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7fc fe88 	bl	80002f8 <__aeabi_dsub>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4630      	mov	r0, r6
 80035ee:	4639      	mov	r1, r7
 80035f0:	f7fd faac 	bl	8000b4c <__aeabi_dcmplt>
 80035f4:	2800      	cmp	r0, #0
 80035f6:	f43f af1d 	beq.w	8003434 <_dtoa_r+0x474>
 80035fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80035fc:	1e7b      	subs	r3, r7, #1
 80035fe:	9314      	str	r3, [sp, #80]	; 0x50
 8003600:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003604:	2b30      	cmp	r3, #48	; 0x30
 8003606:	d0f8      	beq.n	80035fa <_dtoa_r+0x63a>
 8003608:	46c1      	mov	r9, r8
 800360a:	e03a      	b.n	8003682 <_dtoa_r+0x6c2>
 800360c:	4ba0      	ldr	r3, [pc, #640]	; (8003890 <_dtoa_r+0x8d0>)
 800360e:	f7fd f82b 	bl	8000668 <__aeabi_dmul>
 8003612:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003616:	e7bc      	b.n	8003592 <_dtoa_r+0x5d2>
 8003618:	9f08      	ldr	r7, [sp, #32]
 800361a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800361e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003622:	f7fd f94b 	bl	80008bc <__aeabi_ddiv>
 8003626:	f7fd facf 	bl	8000bc8 <__aeabi_d2iz>
 800362a:	4604      	mov	r4, r0
 800362c:	f7fc ffb2 	bl	8000594 <__aeabi_i2d>
 8003630:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003634:	f7fd f818 	bl	8000668 <__aeabi_dmul>
 8003638:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800363c:	460b      	mov	r3, r1
 800363e:	4602      	mov	r2, r0
 8003640:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003644:	f7fc fe58 	bl	80002f8 <__aeabi_dsub>
 8003648:	f807 6b01 	strb.w	r6, [r7], #1
 800364c:	9e08      	ldr	r6, [sp, #32]
 800364e:	9b02      	ldr	r3, [sp, #8]
 8003650:	1bbe      	subs	r6, r7, r6
 8003652:	42b3      	cmp	r3, r6
 8003654:	d13a      	bne.n	80036cc <_dtoa_r+0x70c>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	f7fc fe4f 	bl	80002fc <__adddf3>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003666:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800366a:	f7fd fa8d 	bl	8000b88 <__aeabi_dcmpgt>
 800366e:	bb58      	cbnz	r0, 80036c8 <_dtoa_r+0x708>
 8003670:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003678:	f7fd fa5e 	bl	8000b38 <__aeabi_dcmpeq>
 800367c:	b108      	cbz	r0, 8003682 <_dtoa_r+0x6c2>
 800367e:	07e1      	lsls	r1, r4, #31
 8003680:	d422      	bmi.n	80036c8 <_dtoa_r+0x708>
 8003682:	4628      	mov	r0, r5
 8003684:	4651      	mov	r1, sl
 8003686:	f000 fd03 	bl	8004090 <_Bfree>
 800368a:	2300      	movs	r3, #0
 800368c:	703b      	strb	r3, [r7, #0]
 800368e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003690:	f109 0001 	add.w	r0, r9, #1
 8003694:	6018      	str	r0, [r3, #0]
 8003696:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003698:	2b00      	cmp	r3, #0
 800369a:	f43f acde 	beq.w	800305a <_dtoa_r+0x9a>
 800369e:	601f      	str	r7, [r3, #0]
 80036a0:	e4db      	b.n	800305a <_dtoa_r+0x9a>
 80036a2:	4627      	mov	r7, r4
 80036a4:	463b      	mov	r3, r7
 80036a6:	461f      	mov	r7, r3
 80036a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80036ac:	2a39      	cmp	r2, #57	; 0x39
 80036ae:	d107      	bne.n	80036c0 <_dtoa_r+0x700>
 80036b0:	9a08      	ldr	r2, [sp, #32]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d1f7      	bne.n	80036a6 <_dtoa_r+0x6e6>
 80036b6:	9908      	ldr	r1, [sp, #32]
 80036b8:	2230      	movs	r2, #48	; 0x30
 80036ba:	f108 0801 	add.w	r8, r8, #1
 80036be:	700a      	strb	r2, [r1, #0]
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	3201      	adds	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	e79f      	b.n	8003608 <_dtoa_r+0x648>
 80036c8:	46c8      	mov	r8, r9
 80036ca:	e7eb      	b.n	80036a4 <_dtoa_r+0x6e4>
 80036cc:	4b70      	ldr	r3, [pc, #448]	; (8003890 <_dtoa_r+0x8d0>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	f7fc ffca 	bl	8000668 <__aeabi_dmul>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80036dc:	2200      	movs	r2, #0
 80036de:	2300      	movs	r3, #0
 80036e0:	f7fd fa2a 	bl	8000b38 <__aeabi_dcmpeq>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d098      	beq.n	800361a <_dtoa_r+0x65a>
 80036e8:	e7cb      	b.n	8003682 <_dtoa_r+0x6c2>
 80036ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80036ec:	2a00      	cmp	r2, #0
 80036ee:	f000 80d1 	beq.w	8003894 <_dtoa_r+0x8d4>
 80036f2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80036f4:	2a01      	cmp	r2, #1
 80036f6:	f300 80af 	bgt.w	8003858 <_dtoa_r+0x898>
 80036fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80036fc:	2a00      	cmp	r2, #0
 80036fe:	f000 80a7 	beq.w	8003850 <_dtoa_r+0x890>
 8003702:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003706:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003708:	9f06      	ldr	r7, [sp, #24]
 800370a:	9a06      	ldr	r2, [sp, #24]
 800370c:	441a      	add	r2, r3
 800370e:	9206      	str	r2, [sp, #24]
 8003710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003712:	2101      	movs	r1, #1
 8003714:	441a      	add	r2, r3
 8003716:	4628      	mov	r0, r5
 8003718:	9209      	str	r2, [sp, #36]	; 0x24
 800371a:	f000 fd73 	bl	8004204 <__i2b>
 800371e:	4606      	mov	r6, r0
 8003720:	2f00      	cmp	r7, #0
 8003722:	dd0c      	ble.n	800373e <_dtoa_r+0x77e>
 8003724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003726:	2b00      	cmp	r3, #0
 8003728:	dd09      	ble.n	800373e <_dtoa_r+0x77e>
 800372a:	42bb      	cmp	r3, r7
 800372c:	9a06      	ldr	r2, [sp, #24]
 800372e:	bfa8      	it	ge
 8003730:	463b      	movge	r3, r7
 8003732:	1ad2      	subs	r2, r2, r3
 8003734:	9206      	str	r2, [sp, #24]
 8003736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003738:	1aff      	subs	r7, r7, r3
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	9309      	str	r3, [sp, #36]	; 0x24
 800373e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003740:	b1f3      	cbz	r3, 8003780 <_dtoa_r+0x7c0>
 8003742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80a9 	beq.w	800389c <_dtoa_r+0x8dc>
 800374a:	2c00      	cmp	r4, #0
 800374c:	dd10      	ble.n	8003770 <_dtoa_r+0x7b0>
 800374e:	4631      	mov	r1, r6
 8003750:	4622      	mov	r2, r4
 8003752:	4628      	mov	r0, r5
 8003754:	f000 fe12 	bl	800437c <__pow5mult>
 8003758:	4652      	mov	r2, sl
 800375a:	4601      	mov	r1, r0
 800375c:	4606      	mov	r6, r0
 800375e:	4628      	mov	r0, r5
 8003760:	f000 fd66 	bl	8004230 <__multiply>
 8003764:	4651      	mov	r1, sl
 8003766:	4680      	mov	r8, r0
 8003768:	4628      	mov	r0, r5
 800376a:	f000 fc91 	bl	8004090 <_Bfree>
 800376e:	46c2      	mov	sl, r8
 8003770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003772:	1b1a      	subs	r2, r3, r4
 8003774:	d004      	beq.n	8003780 <_dtoa_r+0x7c0>
 8003776:	4651      	mov	r1, sl
 8003778:	4628      	mov	r0, r5
 800377a:	f000 fdff 	bl	800437c <__pow5mult>
 800377e:	4682      	mov	sl, r0
 8003780:	2101      	movs	r1, #1
 8003782:	4628      	mov	r0, r5
 8003784:	f000 fd3e 	bl	8004204 <__i2b>
 8003788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800378a:	2b00      	cmp	r3, #0
 800378c:	4604      	mov	r4, r0
 800378e:	f340 8087 	ble.w	80038a0 <_dtoa_r+0x8e0>
 8003792:	461a      	mov	r2, r3
 8003794:	4601      	mov	r1, r0
 8003796:	4628      	mov	r0, r5
 8003798:	f000 fdf0 	bl	800437c <__pow5mult>
 800379c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800379e:	2b01      	cmp	r3, #1
 80037a0:	4604      	mov	r4, r0
 80037a2:	f340 8080 	ble.w	80038a6 <_dtoa_r+0x8e6>
 80037a6:	f04f 0800 	mov.w	r8, #0
 80037aa:	6923      	ldr	r3, [r4, #16]
 80037ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80037b0:	6918      	ldr	r0, [r3, #16]
 80037b2:	f000 fcd9 	bl	8004168 <__hi0bits>
 80037b6:	f1c0 0020 	rsb	r0, r0, #32
 80037ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037bc:	4418      	add	r0, r3
 80037be:	f010 001f 	ands.w	r0, r0, #31
 80037c2:	f000 8092 	beq.w	80038ea <_dtoa_r+0x92a>
 80037c6:	f1c0 0320 	rsb	r3, r0, #32
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	f340 808a 	ble.w	80038e4 <_dtoa_r+0x924>
 80037d0:	f1c0 001c 	rsb	r0, r0, #28
 80037d4:	9b06      	ldr	r3, [sp, #24]
 80037d6:	4403      	add	r3, r0
 80037d8:	9306      	str	r3, [sp, #24]
 80037da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037dc:	4403      	add	r3, r0
 80037de:	4407      	add	r7, r0
 80037e0:	9309      	str	r3, [sp, #36]	; 0x24
 80037e2:	9b06      	ldr	r3, [sp, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	dd05      	ble.n	80037f4 <_dtoa_r+0x834>
 80037e8:	4651      	mov	r1, sl
 80037ea:	461a      	mov	r2, r3
 80037ec:	4628      	mov	r0, r5
 80037ee:	f000 fe1f 	bl	8004430 <__lshift>
 80037f2:	4682      	mov	sl, r0
 80037f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	dd05      	ble.n	8003806 <_dtoa_r+0x846>
 80037fa:	4621      	mov	r1, r4
 80037fc:	461a      	mov	r2, r3
 80037fe:	4628      	mov	r0, r5
 8003800:	f000 fe16 	bl	8004430 <__lshift>
 8003804:	4604      	mov	r4, r0
 8003806:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d070      	beq.n	80038ee <_dtoa_r+0x92e>
 800380c:	4621      	mov	r1, r4
 800380e:	4650      	mov	r0, sl
 8003810:	f000 fe7a 	bl	8004508 <__mcmp>
 8003814:	2800      	cmp	r0, #0
 8003816:	da6a      	bge.n	80038ee <_dtoa_r+0x92e>
 8003818:	2300      	movs	r3, #0
 800381a:	4651      	mov	r1, sl
 800381c:	220a      	movs	r2, #10
 800381e:	4628      	mov	r0, r5
 8003820:	f000 fc58 	bl	80040d4 <__multadd>
 8003824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003826:	f109 39ff 	add.w	r9, r9, #4294967295
 800382a:	4682      	mov	sl, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 8193 	beq.w	8003b58 <_dtoa_r+0xb98>
 8003832:	4631      	mov	r1, r6
 8003834:	2300      	movs	r3, #0
 8003836:	220a      	movs	r2, #10
 8003838:	4628      	mov	r0, r5
 800383a:	f000 fc4b 	bl	80040d4 <__multadd>
 800383e:	f1bb 0f00 	cmp.w	fp, #0
 8003842:	4606      	mov	r6, r0
 8003844:	f300 8093 	bgt.w	800396e <_dtoa_r+0x9ae>
 8003848:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800384a:	2b02      	cmp	r3, #2
 800384c:	dc57      	bgt.n	80038fe <_dtoa_r+0x93e>
 800384e:	e08e      	b.n	800396e <_dtoa_r+0x9ae>
 8003850:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003852:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003856:	e756      	b.n	8003706 <_dtoa_r+0x746>
 8003858:	9b02      	ldr	r3, [sp, #8]
 800385a:	1e5c      	subs	r4, r3, #1
 800385c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800385e:	42a3      	cmp	r3, r4
 8003860:	bfbf      	itttt	lt
 8003862:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003864:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003866:	1ae2      	sublt	r2, r4, r3
 8003868:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800386a:	bfb6      	itet	lt
 800386c:	189b      	addlt	r3, r3, r2
 800386e:	1b1c      	subge	r4, r3, r4
 8003870:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003872:	9b02      	ldr	r3, [sp, #8]
 8003874:	bfb8      	it	lt
 8003876:	2400      	movlt	r4, #0
 8003878:	2b00      	cmp	r3, #0
 800387a:	bfb9      	ittee	lt
 800387c:	9b06      	ldrlt	r3, [sp, #24]
 800387e:	9a02      	ldrlt	r2, [sp, #8]
 8003880:	9f06      	ldrge	r7, [sp, #24]
 8003882:	9b02      	ldrge	r3, [sp, #8]
 8003884:	bfbc      	itt	lt
 8003886:	1a9f      	sublt	r7, r3, r2
 8003888:	2300      	movlt	r3, #0
 800388a:	e73e      	b.n	800370a <_dtoa_r+0x74a>
 800388c:	3fe00000 	.word	0x3fe00000
 8003890:	40240000 	.word	0x40240000
 8003894:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003896:	9f06      	ldr	r7, [sp, #24]
 8003898:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800389a:	e741      	b.n	8003720 <_dtoa_r+0x760>
 800389c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800389e:	e76a      	b.n	8003776 <_dtoa_r+0x7b6>
 80038a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	dc19      	bgt.n	80038da <_dtoa_r+0x91a>
 80038a6:	9b04      	ldr	r3, [sp, #16]
 80038a8:	b9bb      	cbnz	r3, 80038da <_dtoa_r+0x91a>
 80038aa:	9b05      	ldr	r3, [sp, #20]
 80038ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038b0:	b99b      	cbnz	r3, 80038da <_dtoa_r+0x91a>
 80038b2:	9b05      	ldr	r3, [sp, #20]
 80038b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038b8:	0d1b      	lsrs	r3, r3, #20
 80038ba:	051b      	lsls	r3, r3, #20
 80038bc:	b183      	cbz	r3, 80038e0 <_dtoa_r+0x920>
 80038be:	9b06      	ldr	r3, [sp, #24]
 80038c0:	3301      	adds	r3, #1
 80038c2:	9306      	str	r3, [sp, #24]
 80038c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038c6:	3301      	adds	r3, #1
 80038c8:	9309      	str	r3, [sp, #36]	; 0x24
 80038ca:	f04f 0801 	mov.w	r8, #1
 80038ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f47f af6a 	bne.w	80037aa <_dtoa_r+0x7ea>
 80038d6:	2001      	movs	r0, #1
 80038d8:	e76f      	b.n	80037ba <_dtoa_r+0x7fa>
 80038da:	f04f 0800 	mov.w	r8, #0
 80038de:	e7f6      	b.n	80038ce <_dtoa_r+0x90e>
 80038e0:	4698      	mov	r8, r3
 80038e2:	e7f4      	b.n	80038ce <_dtoa_r+0x90e>
 80038e4:	f43f af7d 	beq.w	80037e2 <_dtoa_r+0x822>
 80038e8:	4618      	mov	r0, r3
 80038ea:	301c      	adds	r0, #28
 80038ec:	e772      	b.n	80037d4 <_dtoa_r+0x814>
 80038ee:	9b02      	ldr	r3, [sp, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	dc36      	bgt.n	8003962 <_dtoa_r+0x9a2>
 80038f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	dd33      	ble.n	8003962 <_dtoa_r+0x9a2>
 80038fa:	f8dd b008 	ldr.w	fp, [sp, #8]
 80038fe:	f1bb 0f00 	cmp.w	fp, #0
 8003902:	d10d      	bne.n	8003920 <_dtoa_r+0x960>
 8003904:	4621      	mov	r1, r4
 8003906:	465b      	mov	r3, fp
 8003908:	2205      	movs	r2, #5
 800390a:	4628      	mov	r0, r5
 800390c:	f000 fbe2 	bl	80040d4 <__multadd>
 8003910:	4601      	mov	r1, r0
 8003912:	4604      	mov	r4, r0
 8003914:	4650      	mov	r0, sl
 8003916:	f000 fdf7 	bl	8004508 <__mcmp>
 800391a:	2800      	cmp	r0, #0
 800391c:	f73f adb6 	bgt.w	800348c <_dtoa_r+0x4cc>
 8003920:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003922:	9f08      	ldr	r7, [sp, #32]
 8003924:	ea6f 0903 	mvn.w	r9, r3
 8003928:	f04f 0800 	mov.w	r8, #0
 800392c:	4621      	mov	r1, r4
 800392e:	4628      	mov	r0, r5
 8003930:	f000 fbae 	bl	8004090 <_Bfree>
 8003934:	2e00      	cmp	r6, #0
 8003936:	f43f aea4 	beq.w	8003682 <_dtoa_r+0x6c2>
 800393a:	f1b8 0f00 	cmp.w	r8, #0
 800393e:	d005      	beq.n	800394c <_dtoa_r+0x98c>
 8003940:	45b0      	cmp	r8, r6
 8003942:	d003      	beq.n	800394c <_dtoa_r+0x98c>
 8003944:	4641      	mov	r1, r8
 8003946:	4628      	mov	r0, r5
 8003948:	f000 fba2 	bl	8004090 <_Bfree>
 800394c:	4631      	mov	r1, r6
 800394e:	4628      	mov	r0, r5
 8003950:	f000 fb9e 	bl	8004090 <_Bfree>
 8003954:	e695      	b.n	8003682 <_dtoa_r+0x6c2>
 8003956:	2400      	movs	r4, #0
 8003958:	4626      	mov	r6, r4
 800395a:	e7e1      	b.n	8003920 <_dtoa_r+0x960>
 800395c:	46c1      	mov	r9, r8
 800395e:	4626      	mov	r6, r4
 8003960:	e594      	b.n	800348c <_dtoa_r+0x4cc>
 8003962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003964:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80fc 	beq.w	8003b66 <_dtoa_r+0xba6>
 800396e:	2f00      	cmp	r7, #0
 8003970:	dd05      	ble.n	800397e <_dtoa_r+0x9be>
 8003972:	4631      	mov	r1, r6
 8003974:	463a      	mov	r2, r7
 8003976:	4628      	mov	r0, r5
 8003978:	f000 fd5a 	bl	8004430 <__lshift>
 800397c:	4606      	mov	r6, r0
 800397e:	f1b8 0f00 	cmp.w	r8, #0
 8003982:	d05c      	beq.n	8003a3e <_dtoa_r+0xa7e>
 8003984:	6871      	ldr	r1, [r6, #4]
 8003986:	4628      	mov	r0, r5
 8003988:	f000 fb42 	bl	8004010 <_Balloc>
 800398c:	4607      	mov	r7, r0
 800398e:	b928      	cbnz	r0, 800399c <_dtoa_r+0x9dc>
 8003990:	4b7f      	ldr	r3, [pc, #508]	; (8003b90 <_dtoa_r+0xbd0>)
 8003992:	4602      	mov	r2, r0
 8003994:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003998:	f7ff bb26 	b.w	8002fe8 <_dtoa_r+0x28>
 800399c:	6932      	ldr	r2, [r6, #16]
 800399e:	3202      	adds	r2, #2
 80039a0:	0092      	lsls	r2, r2, #2
 80039a2:	f106 010c 	add.w	r1, r6, #12
 80039a6:	300c      	adds	r0, #12
 80039a8:	f000 fb24 	bl	8003ff4 <memcpy>
 80039ac:	2201      	movs	r2, #1
 80039ae:	4639      	mov	r1, r7
 80039b0:	4628      	mov	r0, r5
 80039b2:	f000 fd3d 	bl	8004430 <__lshift>
 80039b6:	9b08      	ldr	r3, [sp, #32]
 80039b8:	3301      	adds	r3, #1
 80039ba:	9302      	str	r3, [sp, #8]
 80039bc:	9b08      	ldr	r3, [sp, #32]
 80039be:	445b      	add	r3, fp
 80039c0:	930a      	str	r3, [sp, #40]	; 0x28
 80039c2:	9b04      	ldr	r3, [sp, #16]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	46b0      	mov	r8, r6
 80039ca:	9309      	str	r3, [sp, #36]	; 0x24
 80039cc:	4606      	mov	r6, r0
 80039ce:	9b02      	ldr	r3, [sp, #8]
 80039d0:	4621      	mov	r1, r4
 80039d2:	4650      	mov	r0, sl
 80039d4:	f103 3bff 	add.w	fp, r3, #4294967295
 80039d8:	f7ff fa66 	bl	8002ea8 <quorem>
 80039dc:	4603      	mov	r3, r0
 80039de:	3330      	adds	r3, #48	; 0x30
 80039e0:	9004      	str	r0, [sp, #16]
 80039e2:	4641      	mov	r1, r8
 80039e4:	4650      	mov	r0, sl
 80039e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80039e8:	f000 fd8e 	bl	8004508 <__mcmp>
 80039ec:	4632      	mov	r2, r6
 80039ee:	9006      	str	r0, [sp, #24]
 80039f0:	4621      	mov	r1, r4
 80039f2:	4628      	mov	r0, r5
 80039f4:	f000 fda4 	bl	8004540 <__mdiff>
 80039f8:	68c2      	ldr	r2, [r0, #12]
 80039fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80039fc:	4607      	mov	r7, r0
 80039fe:	bb02      	cbnz	r2, 8003a42 <_dtoa_r+0xa82>
 8003a00:	4601      	mov	r1, r0
 8003a02:	4650      	mov	r0, sl
 8003a04:	f000 fd80 	bl	8004508 <__mcmp>
 8003a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	4639      	mov	r1, r7
 8003a0e:	4628      	mov	r0, r5
 8003a10:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003a14:	f000 fb3c 	bl	8004090 <_Bfree>
 8003a18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a1c:	9f02      	ldr	r7, [sp, #8]
 8003a1e:	ea43 0102 	orr.w	r1, r3, r2
 8003a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a24:	430b      	orrs	r3, r1
 8003a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a28:	d10d      	bne.n	8003a46 <_dtoa_r+0xa86>
 8003a2a:	2b39      	cmp	r3, #57	; 0x39
 8003a2c:	d027      	beq.n	8003a7e <_dtoa_r+0xabe>
 8003a2e:	9a06      	ldr	r2, [sp, #24]
 8003a30:	2a00      	cmp	r2, #0
 8003a32:	dd01      	ble.n	8003a38 <_dtoa_r+0xa78>
 8003a34:	9b04      	ldr	r3, [sp, #16]
 8003a36:	3331      	adds	r3, #49	; 0x31
 8003a38:	f88b 3000 	strb.w	r3, [fp]
 8003a3c:	e776      	b.n	800392c <_dtoa_r+0x96c>
 8003a3e:	4630      	mov	r0, r6
 8003a40:	e7b9      	b.n	80039b6 <_dtoa_r+0x9f6>
 8003a42:	2201      	movs	r2, #1
 8003a44:	e7e2      	b.n	8003a0c <_dtoa_r+0xa4c>
 8003a46:	9906      	ldr	r1, [sp, #24]
 8003a48:	2900      	cmp	r1, #0
 8003a4a:	db04      	blt.n	8003a56 <_dtoa_r+0xa96>
 8003a4c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8003a4e:	4301      	orrs	r1, r0
 8003a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a52:	4301      	orrs	r1, r0
 8003a54:	d120      	bne.n	8003a98 <_dtoa_r+0xad8>
 8003a56:	2a00      	cmp	r2, #0
 8003a58:	ddee      	ble.n	8003a38 <_dtoa_r+0xa78>
 8003a5a:	4651      	mov	r1, sl
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	4628      	mov	r0, r5
 8003a60:	9302      	str	r3, [sp, #8]
 8003a62:	f000 fce5 	bl	8004430 <__lshift>
 8003a66:	4621      	mov	r1, r4
 8003a68:	4682      	mov	sl, r0
 8003a6a:	f000 fd4d 	bl	8004508 <__mcmp>
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	9b02      	ldr	r3, [sp, #8]
 8003a72:	dc02      	bgt.n	8003a7a <_dtoa_r+0xaba>
 8003a74:	d1e0      	bne.n	8003a38 <_dtoa_r+0xa78>
 8003a76:	07da      	lsls	r2, r3, #31
 8003a78:	d5de      	bpl.n	8003a38 <_dtoa_r+0xa78>
 8003a7a:	2b39      	cmp	r3, #57	; 0x39
 8003a7c:	d1da      	bne.n	8003a34 <_dtoa_r+0xa74>
 8003a7e:	2339      	movs	r3, #57	; 0x39
 8003a80:	f88b 3000 	strb.w	r3, [fp]
 8003a84:	463b      	mov	r3, r7
 8003a86:	461f      	mov	r7, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003a8e:	2a39      	cmp	r2, #57	; 0x39
 8003a90:	d050      	beq.n	8003b34 <_dtoa_r+0xb74>
 8003a92:	3201      	adds	r2, #1
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	e749      	b.n	800392c <_dtoa_r+0x96c>
 8003a98:	2a00      	cmp	r2, #0
 8003a9a:	dd03      	ble.n	8003aa4 <_dtoa_r+0xae4>
 8003a9c:	2b39      	cmp	r3, #57	; 0x39
 8003a9e:	d0ee      	beq.n	8003a7e <_dtoa_r+0xabe>
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	e7c9      	b.n	8003a38 <_dtoa_r+0xa78>
 8003aa4:	9a02      	ldr	r2, [sp, #8]
 8003aa6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003aa8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003aac:	428a      	cmp	r2, r1
 8003aae:	d02a      	beq.n	8003b06 <_dtoa_r+0xb46>
 8003ab0:	4651      	mov	r1, sl
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	220a      	movs	r2, #10
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f000 fb0c 	bl	80040d4 <__multadd>
 8003abc:	45b0      	cmp	r8, r6
 8003abe:	4682      	mov	sl, r0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	f04f 020a 	mov.w	r2, #10
 8003ac8:	4641      	mov	r1, r8
 8003aca:	4628      	mov	r0, r5
 8003acc:	d107      	bne.n	8003ade <_dtoa_r+0xb1e>
 8003ace:	f000 fb01 	bl	80040d4 <__multadd>
 8003ad2:	4680      	mov	r8, r0
 8003ad4:	4606      	mov	r6, r0
 8003ad6:	9b02      	ldr	r3, [sp, #8]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	9302      	str	r3, [sp, #8]
 8003adc:	e777      	b.n	80039ce <_dtoa_r+0xa0e>
 8003ade:	f000 faf9 	bl	80040d4 <__multadd>
 8003ae2:	4631      	mov	r1, r6
 8003ae4:	4680      	mov	r8, r0
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	220a      	movs	r2, #10
 8003aea:	4628      	mov	r0, r5
 8003aec:	f000 faf2 	bl	80040d4 <__multadd>
 8003af0:	4606      	mov	r6, r0
 8003af2:	e7f0      	b.n	8003ad6 <_dtoa_r+0xb16>
 8003af4:	f1bb 0f00 	cmp.w	fp, #0
 8003af8:	9a08      	ldr	r2, [sp, #32]
 8003afa:	bfcc      	ite	gt
 8003afc:	465f      	movgt	r7, fp
 8003afe:	2701      	movle	r7, #1
 8003b00:	4417      	add	r7, r2
 8003b02:	f04f 0800 	mov.w	r8, #0
 8003b06:	4651      	mov	r1, sl
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	9302      	str	r3, [sp, #8]
 8003b0e:	f000 fc8f 	bl	8004430 <__lshift>
 8003b12:	4621      	mov	r1, r4
 8003b14:	4682      	mov	sl, r0
 8003b16:	f000 fcf7 	bl	8004508 <__mcmp>
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	dcb2      	bgt.n	8003a84 <_dtoa_r+0xac4>
 8003b1e:	d102      	bne.n	8003b26 <_dtoa_r+0xb66>
 8003b20:	9b02      	ldr	r3, [sp, #8]
 8003b22:	07db      	lsls	r3, r3, #31
 8003b24:	d4ae      	bmi.n	8003a84 <_dtoa_r+0xac4>
 8003b26:	463b      	mov	r3, r7
 8003b28:	461f      	mov	r7, r3
 8003b2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003b2e:	2a30      	cmp	r2, #48	; 0x30
 8003b30:	d0fa      	beq.n	8003b28 <_dtoa_r+0xb68>
 8003b32:	e6fb      	b.n	800392c <_dtoa_r+0x96c>
 8003b34:	9a08      	ldr	r2, [sp, #32]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d1a5      	bne.n	8003a86 <_dtoa_r+0xac6>
 8003b3a:	2331      	movs	r3, #49	; 0x31
 8003b3c:	f109 0901 	add.w	r9, r9, #1
 8003b40:	7013      	strb	r3, [r2, #0]
 8003b42:	e6f3      	b.n	800392c <_dtoa_r+0x96c>
 8003b44:	4b13      	ldr	r3, [pc, #76]	; (8003b94 <_dtoa_r+0xbd4>)
 8003b46:	f7ff baa6 	b.w	8003096 <_dtoa_r+0xd6>
 8003b4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f47f aa7f 	bne.w	8003050 <_dtoa_r+0x90>
 8003b52:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <_dtoa_r+0xbd8>)
 8003b54:	f7ff ba9f 	b.w	8003096 <_dtoa_r+0xd6>
 8003b58:	f1bb 0f00 	cmp.w	fp, #0
 8003b5c:	dc03      	bgt.n	8003b66 <_dtoa_r+0xba6>
 8003b5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	f73f aecc 	bgt.w	80038fe <_dtoa_r+0x93e>
 8003b66:	9f08      	ldr	r7, [sp, #32]
 8003b68:	4621      	mov	r1, r4
 8003b6a:	4650      	mov	r0, sl
 8003b6c:	f7ff f99c 	bl	8002ea8 <quorem>
 8003b70:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003b74:	f807 3b01 	strb.w	r3, [r7], #1
 8003b78:	9a08      	ldr	r2, [sp, #32]
 8003b7a:	1aba      	subs	r2, r7, r2
 8003b7c:	4593      	cmp	fp, r2
 8003b7e:	ddb9      	ble.n	8003af4 <_dtoa_r+0xb34>
 8003b80:	4651      	mov	r1, sl
 8003b82:	2300      	movs	r3, #0
 8003b84:	220a      	movs	r2, #10
 8003b86:	4628      	mov	r0, r5
 8003b88:	f000 faa4 	bl	80040d4 <__multadd>
 8003b8c:	4682      	mov	sl, r0
 8003b8e:	e7eb      	b.n	8003b68 <_dtoa_r+0xba8>
 8003b90:	08004f7b 	.word	0x08004f7b
 8003b94:	08004ed4 	.word	0x08004ed4
 8003b98:	08004ef8 	.word	0x08004ef8

08003b9c <__sflush_r>:
 8003b9c:	898a      	ldrh	r2, [r1, #12]
 8003b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba2:	4605      	mov	r5, r0
 8003ba4:	0710      	lsls	r0, r2, #28
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	d458      	bmi.n	8003c5c <__sflush_r+0xc0>
 8003baa:	684b      	ldr	r3, [r1, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	dc05      	bgt.n	8003bbc <__sflush_r+0x20>
 8003bb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	dc02      	bgt.n	8003bbc <__sflush_r+0x20>
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bbe:	2e00      	cmp	r6, #0
 8003bc0:	d0f9      	beq.n	8003bb6 <__sflush_r+0x1a>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003bc8:	682f      	ldr	r7, [r5, #0]
 8003bca:	602b      	str	r3, [r5, #0]
 8003bcc:	d032      	beq.n	8003c34 <__sflush_r+0x98>
 8003bce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bd0:	89a3      	ldrh	r3, [r4, #12]
 8003bd2:	075a      	lsls	r2, r3, #29
 8003bd4:	d505      	bpl.n	8003be2 <__sflush_r+0x46>
 8003bd6:	6863      	ldr	r3, [r4, #4]
 8003bd8:	1ac0      	subs	r0, r0, r3
 8003bda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bdc:	b10b      	cbz	r3, 8003be2 <__sflush_r+0x46>
 8003bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003be0:	1ac0      	subs	r0, r0, r3
 8003be2:	2300      	movs	r3, #0
 8003be4:	4602      	mov	r2, r0
 8003be6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003be8:	6a21      	ldr	r1, [r4, #32]
 8003bea:	4628      	mov	r0, r5
 8003bec:	47b0      	blx	r6
 8003bee:	1c43      	adds	r3, r0, #1
 8003bf0:	89a3      	ldrh	r3, [r4, #12]
 8003bf2:	d106      	bne.n	8003c02 <__sflush_r+0x66>
 8003bf4:	6829      	ldr	r1, [r5, #0]
 8003bf6:	291d      	cmp	r1, #29
 8003bf8:	d82c      	bhi.n	8003c54 <__sflush_r+0xb8>
 8003bfa:	4a2a      	ldr	r2, [pc, #168]	; (8003ca4 <__sflush_r+0x108>)
 8003bfc:	40ca      	lsrs	r2, r1
 8003bfe:	07d6      	lsls	r6, r2, #31
 8003c00:	d528      	bpl.n	8003c54 <__sflush_r+0xb8>
 8003c02:	2200      	movs	r2, #0
 8003c04:	6062      	str	r2, [r4, #4]
 8003c06:	04d9      	lsls	r1, r3, #19
 8003c08:	6922      	ldr	r2, [r4, #16]
 8003c0a:	6022      	str	r2, [r4, #0]
 8003c0c:	d504      	bpl.n	8003c18 <__sflush_r+0x7c>
 8003c0e:	1c42      	adds	r2, r0, #1
 8003c10:	d101      	bne.n	8003c16 <__sflush_r+0x7a>
 8003c12:	682b      	ldr	r3, [r5, #0]
 8003c14:	b903      	cbnz	r3, 8003c18 <__sflush_r+0x7c>
 8003c16:	6560      	str	r0, [r4, #84]	; 0x54
 8003c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c1a:	602f      	str	r7, [r5, #0]
 8003c1c:	2900      	cmp	r1, #0
 8003c1e:	d0ca      	beq.n	8003bb6 <__sflush_r+0x1a>
 8003c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c24:	4299      	cmp	r1, r3
 8003c26:	d002      	beq.n	8003c2e <__sflush_r+0x92>
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f000 fd7d 	bl	8004728 <_free_r>
 8003c2e:	2000      	movs	r0, #0
 8003c30:	6360      	str	r0, [r4, #52]	; 0x34
 8003c32:	e7c1      	b.n	8003bb8 <__sflush_r+0x1c>
 8003c34:	6a21      	ldr	r1, [r4, #32]
 8003c36:	2301      	movs	r3, #1
 8003c38:	4628      	mov	r0, r5
 8003c3a:	47b0      	blx	r6
 8003c3c:	1c41      	adds	r1, r0, #1
 8003c3e:	d1c7      	bne.n	8003bd0 <__sflush_r+0x34>
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0c4      	beq.n	8003bd0 <__sflush_r+0x34>
 8003c46:	2b1d      	cmp	r3, #29
 8003c48:	d001      	beq.n	8003c4e <__sflush_r+0xb2>
 8003c4a:	2b16      	cmp	r3, #22
 8003c4c:	d101      	bne.n	8003c52 <__sflush_r+0xb6>
 8003c4e:	602f      	str	r7, [r5, #0]
 8003c50:	e7b1      	b.n	8003bb6 <__sflush_r+0x1a>
 8003c52:	89a3      	ldrh	r3, [r4, #12]
 8003c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c58:	81a3      	strh	r3, [r4, #12]
 8003c5a:	e7ad      	b.n	8003bb8 <__sflush_r+0x1c>
 8003c5c:	690f      	ldr	r7, [r1, #16]
 8003c5e:	2f00      	cmp	r7, #0
 8003c60:	d0a9      	beq.n	8003bb6 <__sflush_r+0x1a>
 8003c62:	0793      	lsls	r3, r2, #30
 8003c64:	680e      	ldr	r6, [r1, #0]
 8003c66:	bf08      	it	eq
 8003c68:	694b      	ldreq	r3, [r1, #20]
 8003c6a:	600f      	str	r7, [r1, #0]
 8003c6c:	bf18      	it	ne
 8003c6e:	2300      	movne	r3, #0
 8003c70:	eba6 0807 	sub.w	r8, r6, r7
 8003c74:	608b      	str	r3, [r1, #8]
 8003c76:	f1b8 0f00 	cmp.w	r8, #0
 8003c7a:	dd9c      	ble.n	8003bb6 <__sflush_r+0x1a>
 8003c7c:	6a21      	ldr	r1, [r4, #32]
 8003c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c80:	4643      	mov	r3, r8
 8003c82:	463a      	mov	r2, r7
 8003c84:	4628      	mov	r0, r5
 8003c86:	47b0      	blx	r6
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	dc06      	bgt.n	8003c9a <__sflush_r+0xfe>
 8003c8c:	89a3      	ldrh	r3, [r4, #12]
 8003c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c92:	81a3      	strh	r3, [r4, #12]
 8003c94:	f04f 30ff 	mov.w	r0, #4294967295
 8003c98:	e78e      	b.n	8003bb8 <__sflush_r+0x1c>
 8003c9a:	4407      	add	r7, r0
 8003c9c:	eba8 0800 	sub.w	r8, r8, r0
 8003ca0:	e7e9      	b.n	8003c76 <__sflush_r+0xda>
 8003ca2:	bf00      	nop
 8003ca4:	20400001 	.word	0x20400001

08003ca8 <_fflush_r>:
 8003ca8:	b538      	push	{r3, r4, r5, lr}
 8003caa:	690b      	ldr	r3, [r1, #16]
 8003cac:	4605      	mov	r5, r0
 8003cae:	460c      	mov	r4, r1
 8003cb0:	b913      	cbnz	r3, 8003cb8 <_fflush_r+0x10>
 8003cb2:	2500      	movs	r5, #0
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	bd38      	pop	{r3, r4, r5, pc}
 8003cb8:	b118      	cbz	r0, 8003cc2 <_fflush_r+0x1a>
 8003cba:	6983      	ldr	r3, [r0, #24]
 8003cbc:	b90b      	cbnz	r3, 8003cc2 <_fflush_r+0x1a>
 8003cbe:	f000 f887 	bl	8003dd0 <__sinit>
 8003cc2:	4b14      	ldr	r3, [pc, #80]	; (8003d14 <_fflush_r+0x6c>)
 8003cc4:	429c      	cmp	r4, r3
 8003cc6:	d11b      	bne.n	8003d00 <_fflush_r+0x58>
 8003cc8:	686c      	ldr	r4, [r5, #4]
 8003cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0ef      	beq.n	8003cb2 <_fflush_r+0xa>
 8003cd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cd4:	07d0      	lsls	r0, r2, #31
 8003cd6:	d404      	bmi.n	8003ce2 <_fflush_r+0x3a>
 8003cd8:	0599      	lsls	r1, r3, #22
 8003cda:	d402      	bmi.n	8003ce2 <_fflush_r+0x3a>
 8003cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cde:	f000 f91a 	bl	8003f16 <__retarget_lock_acquire_recursive>
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	f7ff ff59 	bl	8003b9c <__sflush_r>
 8003cea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cec:	07da      	lsls	r2, r3, #31
 8003cee:	4605      	mov	r5, r0
 8003cf0:	d4e0      	bmi.n	8003cb4 <_fflush_r+0xc>
 8003cf2:	89a3      	ldrh	r3, [r4, #12]
 8003cf4:	059b      	lsls	r3, r3, #22
 8003cf6:	d4dd      	bmi.n	8003cb4 <_fflush_r+0xc>
 8003cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cfa:	f000 f90d 	bl	8003f18 <__retarget_lock_release_recursive>
 8003cfe:	e7d9      	b.n	8003cb4 <_fflush_r+0xc>
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <_fflush_r+0x70>)
 8003d02:	429c      	cmp	r4, r3
 8003d04:	d101      	bne.n	8003d0a <_fflush_r+0x62>
 8003d06:	68ac      	ldr	r4, [r5, #8]
 8003d08:	e7df      	b.n	8003cca <_fflush_r+0x22>
 8003d0a:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <_fflush_r+0x74>)
 8003d0c:	429c      	cmp	r4, r3
 8003d0e:	bf08      	it	eq
 8003d10:	68ec      	ldreq	r4, [r5, #12]
 8003d12:	e7da      	b.n	8003cca <_fflush_r+0x22>
 8003d14:	08004fac 	.word	0x08004fac
 8003d18:	08004fcc 	.word	0x08004fcc
 8003d1c:	08004f8c 	.word	0x08004f8c

08003d20 <std>:
 8003d20:	2300      	movs	r3, #0
 8003d22:	b510      	push	{r4, lr}
 8003d24:	4604      	mov	r4, r0
 8003d26:	e9c0 3300 	strd	r3, r3, [r0]
 8003d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d2e:	6083      	str	r3, [r0, #8]
 8003d30:	8181      	strh	r1, [r0, #12]
 8003d32:	6643      	str	r3, [r0, #100]	; 0x64
 8003d34:	81c2      	strh	r2, [r0, #14]
 8003d36:	6183      	str	r3, [r0, #24]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	2208      	movs	r2, #8
 8003d3c:	305c      	adds	r0, #92	; 0x5c
 8003d3e:	f7fe fb19 	bl	8002374 <memset>
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <std+0x38>)
 8003d44:	6263      	str	r3, [r4, #36]	; 0x24
 8003d46:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <std+0x3c>)
 8003d48:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <std+0x40>)
 8003d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d4e:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <std+0x44>)
 8003d50:	6224      	str	r4, [r4, #32]
 8003d52:	6323      	str	r3, [r4, #48]	; 0x30
 8003d54:	bd10      	pop	{r4, pc}
 8003d56:	bf00      	nop
 8003d58:	08004899 	.word	0x08004899
 8003d5c:	080048bb 	.word	0x080048bb
 8003d60:	080048f3 	.word	0x080048f3
 8003d64:	08004917 	.word	0x08004917

08003d68 <_cleanup_r>:
 8003d68:	4901      	ldr	r1, [pc, #4]	; (8003d70 <_cleanup_r+0x8>)
 8003d6a:	f000 b8af 	b.w	8003ecc <_fwalk_reent>
 8003d6e:	bf00      	nop
 8003d70:	08003ca9 	.word	0x08003ca9

08003d74 <__sfmoreglue>:
 8003d74:	b570      	push	{r4, r5, r6, lr}
 8003d76:	1e4a      	subs	r2, r1, #1
 8003d78:	2568      	movs	r5, #104	; 0x68
 8003d7a:	4355      	muls	r5, r2
 8003d7c:	460e      	mov	r6, r1
 8003d7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d82:	f000 fd1f 	bl	80047c4 <_malloc_r>
 8003d86:	4604      	mov	r4, r0
 8003d88:	b140      	cbz	r0, 8003d9c <__sfmoreglue+0x28>
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	e9c0 1600 	strd	r1, r6, [r0]
 8003d90:	300c      	adds	r0, #12
 8003d92:	60a0      	str	r0, [r4, #8]
 8003d94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d98:	f7fe faec 	bl	8002374 <memset>
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	bd70      	pop	{r4, r5, r6, pc}

08003da0 <__sfp_lock_acquire>:
 8003da0:	4801      	ldr	r0, [pc, #4]	; (8003da8 <__sfp_lock_acquire+0x8>)
 8003da2:	f000 b8b8 	b.w	8003f16 <__retarget_lock_acquire_recursive>
 8003da6:	bf00      	nop
 8003da8:	20000260 	.word	0x20000260

08003dac <__sfp_lock_release>:
 8003dac:	4801      	ldr	r0, [pc, #4]	; (8003db4 <__sfp_lock_release+0x8>)
 8003dae:	f000 b8b3 	b.w	8003f18 <__retarget_lock_release_recursive>
 8003db2:	bf00      	nop
 8003db4:	20000260 	.word	0x20000260

08003db8 <__sinit_lock_acquire>:
 8003db8:	4801      	ldr	r0, [pc, #4]	; (8003dc0 <__sinit_lock_acquire+0x8>)
 8003dba:	f000 b8ac 	b.w	8003f16 <__retarget_lock_acquire_recursive>
 8003dbe:	bf00      	nop
 8003dc0:	2000025b 	.word	0x2000025b

08003dc4 <__sinit_lock_release>:
 8003dc4:	4801      	ldr	r0, [pc, #4]	; (8003dcc <__sinit_lock_release+0x8>)
 8003dc6:	f000 b8a7 	b.w	8003f18 <__retarget_lock_release_recursive>
 8003dca:	bf00      	nop
 8003dcc:	2000025b 	.word	0x2000025b

08003dd0 <__sinit>:
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	f7ff fff0 	bl	8003db8 <__sinit_lock_acquire>
 8003dd8:	69a3      	ldr	r3, [r4, #24]
 8003dda:	b11b      	cbz	r3, 8003de4 <__sinit+0x14>
 8003ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003de0:	f7ff bff0 	b.w	8003dc4 <__sinit_lock_release>
 8003de4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003de8:	6523      	str	r3, [r4, #80]	; 0x50
 8003dea:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <__sinit+0x68>)
 8003dec:	4a13      	ldr	r2, [pc, #76]	; (8003e3c <__sinit+0x6c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003df2:	42a3      	cmp	r3, r4
 8003df4:	bf04      	itt	eq
 8003df6:	2301      	moveq	r3, #1
 8003df8:	61a3      	streq	r3, [r4, #24]
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	f000 f820 	bl	8003e40 <__sfp>
 8003e00:	6060      	str	r0, [r4, #4]
 8003e02:	4620      	mov	r0, r4
 8003e04:	f000 f81c 	bl	8003e40 <__sfp>
 8003e08:	60a0      	str	r0, [r4, #8]
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	f000 f818 	bl	8003e40 <__sfp>
 8003e10:	2200      	movs	r2, #0
 8003e12:	60e0      	str	r0, [r4, #12]
 8003e14:	2104      	movs	r1, #4
 8003e16:	6860      	ldr	r0, [r4, #4]
 8003e18:	f7ff ff82 	bl	8003d20 <std>
 8003e1c:	68a0      	ldr	r0, [r4, #8]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	2109      	movs	r1, #9
 8003e22:	f7ff ff7d 	bl	8003d20 <std>
 8003e26:	68e0      	ldr	r0, [r4, #12]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	2112      	movs	r1, #18
 8003e2c:	f7ff ff78 	bl	8003d20 <std>
 8003e30:	2301      	movs	r3, #1
 8003e32:	61a3      	str	r3, [r4, #24]
 8003e34:	e7d2      	b.n	8003ddc <__sinit+0xc>
 8003e36:	bf00      	nop
 8003e38:	08004ec0 	.word	0x08004ec0
 8003e3c:	08003d69 	.word	0x08003d69

08003e40 <__sfp>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	4607      	mov	r7, r0
 8003e44:	f7ff ffac 	bl	8003da0 <__sfp_lock_acquire>
 8003e48:	4b1e      	ldr	r3, [pc, #120]	; (8003ec4 <__sfp+0x84>)
 8003e4a:	681e      	ldr	r6, [r3, #0]
 8003e4c:	69b3      	ldr	r3, [r6, #24]
 8003e4e:	b913      	cbnz	r3, 8003e56 <__sfp+0x16>
 8003e50:	4630      	mov	r0, r6
 8003e52:	f7ff ffbd 	bl	8003dd0 <__sinit>
 8003e56:	3648      	adds	r6, #72	; 0x48
 8003e58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	d503      	bpl.n	8003e68 <__sfp+0x28>
 8003e60:	6833      	ldr	r3, [r6, #0]
 8003e62:	b30b      	cbz	r3, 8003ea8 <__sfp+0x68>
 8003e64:	6836      	ldr	r6, [r6, #0]
 8003e66:	e7f7      	b.n	8003e58 <__sfp+0x18>
 8003e68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e6c:	b9d5      	cbnz	r5, 8003ea4 <__sfp+0x64>
 8003e6e:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <__sfp+0x88>)
 8003e70:	60e3      	str	r3, [r4, #12]
 8003e72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e76:	6665      	str	r5, [r4, #100]	; 0x64
 8003e78:	f000 f84c 	bl	8003f14 <__retarget_lock_init_recursive>
 8003e7c:	f7ff ff96 	bl	8003dac <__sfp_lock_release>
 8003e80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003e84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003e88:	6025      	str	r5, [r4, #0]
 8003e8a:	61a5      	str	r5, [r4, #24]
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	4629      	mov	r1, r5
 8003e90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e94:	f7fe fa6e 	bl	8002374 <memset>
 8003e98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ea4:	3468      	adds	r4, #104	; 0x68
 8003ea6:	e7d9      	b.n	8003e5c <__sfp+0x1c>
 8003ea8:	2104      	movs	r1, #4
 8003eaa:	4638      	mov	r0, r7
 8003eac:	f7ff ff62 	bl	8003d74 <__sfmoreglue>
 8003eb0:	4604      	mov	r4, r0
 8003eb2:	6030      	str	r0, [r6, #0]
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d1d5      	bne.n	8003e64 <__sfp+0x24>
 8003eb8:	f7ff ff78 	bl	8003dac <__sfp_lock_release>
 8003ebc:	230c      	movs	r3, #12
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	e7ee      	b.n	8003ea0 <__sfp+0x60>
 8003ec2:	bf00      	nop
 8003ec4:	08004ec0 	.word	0x08004ec0
 8003ec8:	ffff0001 	.word	0xffff0001

08003ecc <_fwalk_reent>:
 8003ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ed0:	4606      	mov	r6, r0
 8003ed2:	4688      	mov	r8, r1
 8003ed4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ed8:	2700      	movs	r7, #0
 8003eda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ede:	f1b9 0901 	subs.w	r9, r9, #1
 8003ee2:	d505      	bpl.n	8003ef0 <_fwalk_reent+0x24>
 8003ee4:	6824      	ldr	r4, [r4, #0]
 8003ee6:	2c00      	cmp	r4, #0
 8003ee8:	d1f7      	bne.n	8003eda <_fwalk_reent+0xe>
 8003eea:	4638      	mov	r0, r7
 8003eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ef0:	89ab      	ldrh	r3, [r5, #12]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d907      	bls.n	8003f06 <_fwalk_reent+0x3a>
 8003ef6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003efa:	3301      	adds	r3, #1
 8003efc:	d003      	beq.n	8003f06 <_fwalk_reent+0x3a>
 8003efe:	4629      	mov	r1, r5
 8003f00:	4630      	mov	r0, r6
 8003f02:	47c0      	blx	r8
 8003f04:	4307      	orrs	r7, r0
 8003f06:	3568      	adds	r5, #104	; 0x68
 8003f08:	e7e9      	b.n	8003ede <_fwalk_reent+0x12>
	...

08003f0c <_localeconv_r>:
 8003f0c:	4800      	ldr	r0, [pc, #0]	; (8003f10 <_localeconv_r+0x4>)
 8003f0e:	4770      	bx	lr
 8003f10:	20000160 	.word	0x20000160

08003f14 <__retarget_lock_init_recursive>:
 8003f14:	4770      	bx	lr

08003f16 <__retarget_lock_acquire_recursive>:
 8003f16:	4770      	bx	lr

08003f18 <__retarget_lock_release_recursive>:
 8003f18:	4770      	bx	lr

08003f1a <__swhatbuf_r>:
 8003f1a:	b570      	push	{r4, r5, r6, lr}
 8003f1c:	460e      	mov	r6, r1
 8003f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f22:	2900      	cmp	r1, #0
 8003f24:	b096      	sub	sp, #88	; 0x58
 8003f26:	4614      	mov	r4, r2
 8003f28:	461d      	mov	r5, r3
 8003f2a:	da07      	bge.n	8003f3c <__swhatbuf_r+0x22>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	602b      	str	r3, [r5, #0]
 8003f30:	89b3      	ldrh	r3, [r6, #12]
 8003f32:	061a      	lsls	r2, r3, #24
 8003f34:	d410      	bmi.n	8003f58 <__swhatbuf_r+0x3e>
 8003f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f3a:	e00e      	b.n	8003f5a <__swhatbuf_r+0x40>
 8003f3c:	466a      	mov	r2, sp
 8003f3e:	f000 fd41 	bl	80049c4 <_fstat_r>
 8003f42:	2800      	cmp	r0, #0
 8003f44:	dbf2      	blt.n	8003f2c <__swhatbuf_r+0x12>
 8003f46:	9a01      	ldr	r2, [sp, #4]
 8003f48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f50:	425a      	negs	r2, r3
 8003f52:	415a      	adcs	r2, r3
 8003f54:	602a      	str	r2, [r5, #0]
 8003f56:	e7ee      	b.n	8003f36 <__swhatbuf_r+0x1c>
 8003f58:	2340      	movs	r3, #64	; 0x40
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	b016      	add	sp, #88	; 0x58
 8003f60:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f64 <__smakebuf_r>:
 8003f64:	898b      	ldrh	r3, [r1, #12]
 8003f66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f68:	079d      	lsls	r5, r3, #30
 8003f6a:	4606      	mov	r6, r0
 8003f6c:	460c      	mov	r4, r1
 8003f6e:	d507      	bpl.n	8003f80 <__smakebuf_r+0x1c>
 8003f70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	6123      	str	r3, [r4, #16]
 8003f78:	2301      	movs	r3, #1
 8003f7a:	6163      	str	r3, [r4, #20]
 8003f7c:	b002      	add	sp, #8
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
 8003f80:	ab01      	add	r3, sp, #4
 8003f82:	466a      	mov	r2, sp
 8003f84:	f7ff ffc9 	bl	8003f1a <__swhatbuf_r>
 8003f88:	9900      	ldr	r1, [sp, #0]
 8003f8a:	4605      	mov	r5, r0
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	f000 fc19 	bl	80047c4 <_malloc_r>
 8003f92:	b948      	cbnz	r0, 8003fa8 <__smakebuf_r+0x44>
 8003f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f98:	059a      	lsls	r2, r3, #22
 8003f9a:	d4ef      	bmi.n	8003f7c <__smakebuf_r+0x18>
 8003f9c:	f023 0303 	bic.w	r3, r3, #3
 8003fa0:	f043 0302 	orr.w	r3, r3, #2
 8003fa4:	81a3      	strh	r3, [r4, #12]
 8003fa6:	e7e3      	b.n	8003f70 <__smakebuf_r+0xc>
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <__smakebuf_r+0x7c>)
 8003faa:	62b3      	str	r3, [r6, #40]	; 0x28
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	6020      	str	r0, [r4, #0]
 8003fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb4:	81a3      	strh	r3, [r4, #12]
 8003fb6:	9b00      	ldr	r3, [sp, #0]
 8003fb8:	6163      	str	r3, [r4, #20]
 8003fba:	9b01      	ldr	r3, [sp, #4]
 8003fbc:	6120      	str	r0, [r4, #16]
 8003fbe:	b15b      	cbz	r3, 8003fd8 <__smakebuf_r+0x74>
 8003fc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f000 fd0f 	bl	80049e8 <_isatty_r>
 8003fca:	b128      	cbz	r0, 8003fd8 <__smakebuf_r+0x74>
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	f023 0303 	bic.w	r3, r3, #3
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	81a3      	strh	r3, [r4, #12]
 8003fd8:	89a0      	ldrh	r0, [r4, #12]
 8003fda:	4305      	orrs	r5, r0
 8003fdc:	81a5      	strh	r5, [r4, #12]
 8003fde:	e7cd      	b.n	8003f7c <__smakebuf_r+0x18>
 8003fe0:	08003d69 	.word	0x08003d69

08003fe4 <malloc>:
 8003fe4:	4b02      	ldr	r3, [pc, #8]	; (8003ff0 <malloc+0xc>)
 8003fe6:	4601      	mov	r1, r0
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	f000 bbeb 	b.w	80047c4 <_malloc_r>
 8003fee:	bf00      	nop
 8003ff0:	2000000c 	.word	0x2000000c

08003ff4 <memcpy>:
 8003ff4:	440a      	add	r2, r1
 8003ff6:	4291      	cmp	r1, r2
 8003ff8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ffc:	d100      	bne.n	8004000 <memcpy+0xc>
 8003ffe:	4770      	bx	lr
 8004000:	b510      	push	{r4, lr}
 8004002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800400a:	4291      	cmp	r1, r2
 800400c:	d1f9      	bne.n	8004002 <memcpy+0xe>
 800400e:	bd10      	pop	{r4, pc}

08004010 <_Balloc>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004014:	4604      	mov	r4, r0
 8004016:	460d      	mov	r5, r1
 8004018:	b976      	cbnz	r6, 8004038 <_Balloc+0x28>
 800401a:	2010      	movs	r0, #16
 800401c:	f7ff ffe2 	bl	8003fe4 <malloc>
 8004020:	4602      	mov	r2, r0
 8004022:	6260      	str	r0, [r4, #36]	; 0x24
 8004024:	b920      	cbnz	r0, 8004030 <_Balloc+0x20>
 8004026:	4b18      	ldr	r3, [pc, #96]	; (8004088 <_Balloc+0x78>)
 8004028:	4818      	ldr	r0, [pc, #96]	; (800408c <_Balloc+0x7c>)
 800402a:	2166      	movs	r1, #102	; 0x66
 800402c:	f000 fc8a 	bl	8004944 <__assert_func>
 8004030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004034:	6006      	str	r6, [r0, #0]
 8004036:	60c6      	str	r6, [r0, #12]
 8004038:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800403a:	68f3      	ldr	r3, [r6, #12]
 800403c:	b183      	cbz	r3, 8004060 <_Balloc+0x50>
 800403e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004046:	b9b8      	cbnz	r0, 8004078 <_Balloc+0x68>
 8004048:	2101      	movs	r1, #1
 800404a:	fa01 f605 	lsl.w	r6, r1, r5
 800404e:	1d72      	adds	r2, r6, #5
 8004050:	0092      	lsls	r2, r2, #2
 8004052:	4620      	mov	r0, r4
 8004054:	f000 fb5a 	bl	800470c <_calloc_r>
 8004058:	b160      	cbz	r0, 8004074 <_Balloc+0x64>
 800405a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800405e:	e00e      	b.n	800407e <_Balloc+0x6e>
 8004060:	2221      	movs	r2, #33	; 0x21
 8004062:	2104      	movs	r1, #4
 8004064:	4620      	mov	r0, r4
 8004066:	f000 fb51 	bl	800470c <_calloc_r>
 800406a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800406c:	60f0      	str	r0, [r6, #12]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e4      	bne.n	800403e <_Balloc+0x2e>
 8004074:	2000      	movs	r0, #0
 8004076:	bd70      	pop	{r4, r5, r6, pc}
 8004078:	6802      	ldr	r2, [r0, #0]
 800407a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800407e:	2300      	movs	r3, #0
 8004080:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004084:	e7f7      	b.n	8004076 <_Balloc+0x66>
 8004086:	bf00      	nop
 8004088:	08004f05 	.word	0x08004f05
 800408c:	08004fec 	.word	0x08004fec

08004090 <_Bfree>:
 8004090:	b570      	push	{r4, r5, r6, lr}
 8004092:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004094:	4605      	mov	r5, r0
 8004096:	460c      	mov	r4, r1
 8004098:	b976      	cbnz	r6, 80040b8 <_Bfree+0x28>
 800409a:	2010      	movs	r0, #16
 800409c:	f7ff ffa2 	bl	8003fe4 <malloc>
 80040a0:	4602      	mov	r2, r0
 80040a2:	6268      	str	r0, [r5, #36]	; 0x24
 80040a4:	b920      	cbnz	r0, 80040b0 <_Bfree+0x20>
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <_Bfree+0x3c>)
 80040a8:	4809      	ldr	r0, [pc, #36]	; (80040d0 <_Bfree+0x40>)
 80040aa:	218a      	movs	r1, #138	; 0x8a
 80040ac:	f000 fc4a 	bl	8004944 <__assert_func>
 80040b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80040b4:	6006      	str	r6, [r0, #0]
 80040b6:	60c6      	str	r6, [r0, #12]
 80040b8:	b13c      	cbz	r4, 80040ca <_Bfree+0x3a>
 80040ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80040bc:	6862      	ldr	r2, [r4, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040c4:	6021      	str	r1, [r4, #0]
 80040c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
 80040cc:	08004f05 	.word	0x08004f05
 80040d0:	08004fec 	.word	0x08004fec

080040d4 <__multadd>:
 80040d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040d8:	690e      	ldr	r6, [r1, #16]
 80040da:	4607      	mov	r7, r0
 80040dc:	4698      	mov	r8, r3
 80040de:	460c      	mov	r4, r1
 80040e0:	f101 0014 	add.w	r0, r1, #20
 80040e4:	2300      	movs	r3, #0
 80040e6:	6805      	ldr	r5, [r0, #0]
 80040e8:	b2a9      	uxth	r1, r5
 80040ea:	fb02 8101 	mla	r1, r2, r1, r8
 80040ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80040f2:	0c2d      	lsrs	r5, r5, #16
 80040f4:	fb02 c505 	mla	r5, r2, r5, ip
 80040f8:	b289      	uxth	r1, r1
 80040fa:	3301      	adds	r3, #1
 80040fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004100:	429e      	cmp	r6, r3
 8004102:	f840 1b04 	str.w	r1, [r0], #4
 8004106:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800410a:	dcec      	bgt.n	80040e6 <__multadd+0x12>
 800410c:	f1b8 0f00 	cmp.w	r8, #0
 8004110:	d022      	beq.n	8004158 <__multadd+0x84>
 8004112:	68a3      	ldr	r3, [r4, #8]
 8004114:	42b3      	cmp	r3, r6
 8004116:	dc19      	bgt.n	800414c <__multadd+0x78>
 8004118:	6861      	ldr	r1, [r4, #4]
 800411a:	4638      	mov	r0, r7
 800411c:	3101      	adds	r1, #1
 800411e:	f7ff ff77 	bl	8004010 <_Balloc>
 8004122:	4605      	mov	r5, r0
 8004124:	b928      	cbnz	r0, 8004132 <__multadd+0x5e>
 8004126:	4602      	mov	r2, r0
 8004128:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <__multadd+0x8c>)
 800412a:	480e      	ldr	r0, [pc, #56]	; (8004164 <__multadd+0x90>)
 800412c:	21b5      	movs	r1, #181	; 0xb5
 800412e:	f000 fc09 	bl	8004944 <__assert_func>
 8004132:	6922      	ldr	r2, [r4, #16]
 8004134:	3202      	adds	r2, #2
 8004136:	f104 010c 	add.w	r1, r4, #12
 800413a:	0092      	lsls	r2, r2, #2
 800413c:	300c      	adds	r0, #12
 800413e:	f7ff ff59 	bl	8003ff4 <memcpy>
 8004142:	4621      	mov	r1, r4
 8004144:	4638      	mov	r0, r7
 8004146:	f7ff ffa3 	bl	8004090 <_Bfree>
 800414a:	462c      	mov	r4, r5
 800414c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004150:	3601      	adds	r6, #1
 8004152:	f8c3 8014 	str.w	r8, [r3, #20]
 8004156:	6126      	str	r6, [r4, #16]
 8004158:	4620      	mov	r0, r4
 800415a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800415e:	bf00      	nop
 8004160:	08004f7b 	.word	0x08004f7b
 8004164:	08004fec 	.word	0x08004fec

08004168 <__hi0bits>:
 8004168:	0c02      	lsrs	r2, r0, #16
 800416a:	0412      	lsls	r2, r2, #16
 800416c:	4603      	mov	r3, r0
 800416e:	b9ca      	cbnz	r2, 80041a4 <__hi0bits+0x3c>
 8004170:	0403      	lsls	r3, r0, #16
 8004172:	2010      	movs	r0, #16
 8004174:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004178:	bf04      	itt	eq
 800417a:	021b      	lsleq	r3, r3, #8
 800417c:	3008      	addeq	r0, #8
 800417e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004182:	bf04      	itt	eq
 8004184:	011b      	lsleq	r3, r3, #4
 8004186:	3004      	addeq	r0, #4
 8004188:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800418c:	bf04      	itt	eq
 800418e:	009b      	lsleq	r3, r3, #2
 8004190:	3002      	addeq	r0, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	db05      	blt.n	80041a2 <__hi0bits+0x3a>
 8004196:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800419a:	f100 0001 	add.w	r0, r0, #1
 800419e:	bf08      	it	eq
 80041a0:	2020      	moveq	r0, #32
 80041a2:	4770      	bx	lr
 80041a4:	2000      	movs	r0, #0
 80041a6:	e7e5      	b.n	8004174 <__hi0bits+0xc>

080041a8 <__lo0bits>:
 80041a8:	6803      	ldr	r3, [r0, #0]
 80041aa:	4602      	mov	r2, r0
 80041ac:	f013 0007 	ands.w	r0, r3, #7
 80041b0:	d00b      	beq.n	80041ca <__lo0bits+0x22>
 80041b2:	07d9      	lsls	r1, r3, #31
 80041b4:	d422      	bmi.n	80041fc <__lo0bits+0x54>
 80041b6:	0798      	lsls	r0, r3, #30
 80041b8:	bf49      	itett	mi
 80041ba:	085b      	lsrmi	r3, r3, #1
 80041bc:	089b      	lsrpl	r3, r3, #2
 80041be:	2001      	movmi	r0, #1
 80041c0:	6013      	strmi	r3, [r2, #0]
 80041c2:	bf5c      	itt	pl
 80041c4:	6013      	strpl	r3, [r2, #0]
 80041c6:	2002      	movpl	r0, #2
 80041c8:	4770      	bx	lr
 80041ca:	b299      	uxth	r1, r3
 80041cc:	b909      	cbnz	r1, 80041d2 <__lo0bits+0x2a>
 80041ce:	0c1b      	lsrs	r3, r3, #16
 80041d0:	2010      	movs	r0, #16
 80041d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80041d6:	bf04      	itt	eq
 80041d8:	0a1b      	lsreq	r3, r3, #8
 80041da:	3008      	addeq	r0, #8
 80041dc:	0719      	lsls	r1, r3, #28
 80041de:	bf04      	itt	eq
 80041e0:	091b      	lsreq	r3, r3, #4
 80041e2:	3004      	addeq	r0, #4
 80041e4:	0799      	lsls	r1, r3, #30
 80041e6:	bf04      	itt	eq
 80041e8:	089b      	lsreq	r3, r3, #2
 80041ea:	3002      	addeq	r0, #2
 80041ec:	07d9      	lsls	r1, r3, #31
 80041ee:	d403      	bmi.n	80041f8 <__lo0bits+0x50>
 80041f0:	085b      	lsrs	r3, r3, #1
 80041f2:	f100 0001 	add.w	r0, r0, #1
 80041f6:	d003      	beq.n	8004200 <__lo0bits+0x58>
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	4770      	bx	lr
 80041fc:	2000      	movs	r0, #0
 80041fe:	4770      	bx	lr
 8004200:	2020      	movs	r0, #32
 8004202:	4770      	bx	lr

08004204 <__i2b>:
 8004204:	b510      	push	{r4, lr}
 8004206:	460c      	mov	r4, r1
 8004208:	2101      	movs	r1, #1
 800420a:	f7ff ff01 	bl	8004010 <_Balloc>
 800420e:	4602      	mov	r2, r0
 8004210:	b928      	cbnz	r0, 800421e <__i2b+0x1a>
 8004212:	4b05      	ldr	r3, [pc, #20]	; (8004228 <__i2b+0x24>)
 8004214:	4805      	ldr	r0, [pc, #20]	; (800422c <__i2b+0x28>)
 8004216:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800421a:	f000 fb93 	bl	8004944 <__assert_func>
 800421e:	2301      	movs	r3, #1
 8004220:	6144      	str	r4, [r0, #20]
 8004222:	6103      	str	r3, [r0, #16]
 8004224:	bd10      	pop	{r4, pc}
 8004226:	bf00      	nop
 8004228:	08004f7b 	.word	0x08004f7b
 800422c:	08004fec 	.word	0x08004fec

08004230 <__multiply>:
 8004230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004234:	4614      	mov	r4, r2
 8004236:	690a      	ldr	r2, [r1, #16]
 8004238:	6923      	ldr	r3, [r4, #16]
 800423a:	429a      	cmp	r2, r3
 800423c:	bfb8      	it	lt
 800423e:	460b      	movlt	r3, r1
 8004240:	460d      	mov	r5, r1
 8004242:	bfbc      	itt	lt
 8004244:	4625      	movlt	r5, r4
 8004246:	461c      	movlt	r4, r3
 8004248:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800424c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004250:	68ab      	ldr	r3, [r5, #8]
 8004252:	6869      	ldr	r1, [r5, #4]
 8004254:	eb0a 0709 	add.w	r7, sl, r9
 8004258:	42bb      	cmp	r3, r7
 800425a:	b085      	sub	sp, #20
 800425c:	bfb8      	it	lt
 800425e:	3101      	addlt	r1, #1
 8004260:	f7ff fed6 	bl	8004010 <_Balloc>
 8004264:	b930      	cbnz	r0, 8004274 <__multiply+0x44>
 8004266:	4602      	mov	r2, r0
 8004268:	4b42      	ldr	r3, [pc, #264]	; (8004374 <__multiply+0x144>)
 800426a:	4843      	ldr	r0, [pc, #268]	; (8004378 <__multiply+0x148>)
 800426c:	f240 115d 	movw	r1, #349	; 0x15d
 8004270:	f000 fb68 	bl	8004944 <__assert_func>
 8004274:	f100 0614 	add.w	r6, r0, #20
 8004278:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800427c:	4633      	mov	r3, r6
 800427e:	2200      	movs	r2, #0
 8004280:	4543      	cmp	r3, r8
 8004282:	d31e      	bcc.n	80042c2 <__multiply+0x92>
 8004284:	f105 0c14 	add.w	ip, r5, #20
 8004288:	f104 0314 	add.w	r3, r4, #20
 800428c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004290:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004294:	9202      	str	r2, [sp, #8]
 8004296:	ebac 0205 	sub.w	r2, ip, r5
 800429a:	3a15      	subs	r2, #21
 800429c:	f022 0203 	bic.w	r2, r2, #3
 80042a0:	3204      	adds	r2, #4
 80042a2:	f105 0115 	add.w	r1, r5, #21
 80042a6:	458c      	cmp	ip, r1
 80042a8:	bf38      	it	cc
 80042aa:	2204      	movcc	r2, #4
 80042ac:	9201      	str	r2, [sp, #4]
 80042ae:	9a02      	ldr	r2, [sp, #8]
 80042b0:	9303      	str	r3, [sp, #12]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d808      	bhi.n	80042c8 <__multiply+0x98>
 80042b6:	2f00      	cmp	r7, #0
 80042b8:	dc55      	bgt.n	8004366 <__multiply+0x136>
 80042ba:	6107      	str	r7, [r0, #16]
 80042bc:	b005      	add	sp, #20
 80042be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c2:	f843 2b04 	str.w	r2, [r3], #4
 80042c6:	e7db      	b.n	8004280 <__multiply+0x50>
 80042c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80042cc:	f1ba 0f00 	cmp.w	sl, #0
 80042d0:	d020      	beq.n	8004314 <__multiply+0xe4>
 80042d2:	f105 0e14 	add.w	lr, r5, #20
 80042d6:	46b1      	mov	r9, r6
 80042d8:	2200      	movs	r2, #0
 80042da:	f85e 4b04 	ldr.w	r4, [lr], #4
 80042de:	f8d9 b000 	ldr.w	fp, [r9]
 80042e2:	b2a1      	uxth	r1, r4
 80042e4:	fa1f fb8b 	uxth.w	fp, fp
 80042e8:	fb0a b101 	mla	r1, sl, r1, fp
 80042ec:	4411      	add	r1, r2
 80042ee:	f8d9 2000 	ldr.w	r2, [r9]
 80042f2:	0c24      	lsrs	r4, r4, #16
 80042f4:	0c12      	lsrs	r2, r2, #16
 80042f6:	fb0a 2404 	mla	r4, sl, r4, r2
 80042fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80042fe:	b289      	uxth	r1, r1
 8004300:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004304:	45f4      	cmp	ip, lr
 8004306:	f849 1b04 	str.w	r1, [r9], #4
 800430a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800430e:	d8e4      	bhi.n	80042da <__multiply+0xaa>
 8004310:	9901      	ldr	r1, [sp, #4]
 8004312:	5072      	str	r2, [r6, r1]
 8004314:	9a03      	ldr	r2, [sp, #12]
 8004316:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800431a:	3304      	adds	r3, #4
 800431c:	f1b9 0f00 	cmp.w	r9, #0
 8004320:	d01f      	beq.n	8004362 <__multiply+0x132>
 8004322:	6834      	ldr	r4, [r6, #0]
 8004324:	f105 0114 	add.w	r1, r5, #20
 8004328:	46b6      	mov	lr, r6
 800432a:	f04f 0a00 	mov.w	sl, #0
 800432e:	880a      	ldrh	r2, [r1, #0]
 8004330:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004334:	fb09 b202 	mla	r2, r9, r2, fp
 8004338:	4492      	add	sl, r2
 800433a:	b2a4      	uxth	r4, r4
 800433c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004340:	f84e 4b04 	str.w	r4, [lr], #4
 8004344:	f851 4b04 	ldr.w	r4, [r1], #4
 8004348:	f8be 2000 	ldrh.w	r2, [lr]
 800434c:	0c24      	lsrs	r4, r4, #16
 800434e:	fb09 2404 	mla	r4, r9, r4, r2
 8004352:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004356:	458c      	cmp	ip, r1
 8004358:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800435c:	d8e7      	bhi.n	800432e <__multiply+0xfe>
 800435e:	9a01      	ldr	r2, [sp, #4]
 8004360:	50b4      	str	r4, [r6, r2]
 8004362:	3604      	adds	r6, #4
 8004364:	e7a3      	b.n	80042ae <__multiply+0x7e>
 8004366:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1a5      	bne.n	80042ba <__multiply+0x8a>
 800436e:	3f01      	subs	r7, #1
 8004370:	e7a1      	b.n	80042b6 <__multiply+0x86>
 8004372:	bf00      	nop
 8004374:	08004f7b 	.word	0x08004f7b
 8004378:	08004fec 	.word	0x08004fec

0800437c <__pow5mult>:
 800437c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004380:	4615      	mov	r5, r2
 8004382:	f012 0203 	ands.w	r2, r2, #3
 8004386:	4606      	mov	r6, r0
 8004388:	460f      	mov	r7, r1
 800438a:	d007      	beq.n	800439c <__pow5mult+0x20>
 800438c:	4c25      	ldr	r4, [pc, #148]	; (8004424 <__pow5mult+0xa8>)
 800438e:	3a01      	subs	r2, #1
 8004390:	2300      	movs	r3, #0
 8004392:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004396:	f7ff fe9d 	bl	80040d4 <__multadd>
 800439a:	4607      	mov	r7, r0
 800439c:	10ad      	asrs	r5, r5, #2
 800439e:	d03d      	beq.n	800441c <__pow5mult+0xa0>
 80043a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80043a2:	b97c      	cbnz	r4, 80043c4 <__pow5mult+0x48>
 80043a4:	2010      	movs	r0, #16
 80043a6:	f7ff fe1d 	bl	8003fe4 <malloc>
 80043aa:	4602      	mov	r2, r0
 80043ac:	6270      	str	r0, [r6, #36]	; 0x24
 80043ae:	b928      	cbnz	r0, 80043bc <__pow5mult+0x40>
 80043b0:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <__pow5mult+0xac>)
 80043b2:	481e      	ldr	r0, [pc, #120]	; (800442c <__pow5mult+0xb0>)
 80043b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80043b8:	f000 fac4 	bl	8004944 <__assert_func>
 80043bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80043c0:	6004      	str	r4, [r0, #0]
 80043c2:	60c4      	str	r4, [r0, #12]
 80043c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80043c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80043cc:	b94c      	cbnz	r4, 80043e2 <__pow5mult+0x66>
 80043ce:	f240 2171 	movw	r1, #625	; 0x271
 80043d2:	4630      	mov	r0, r6
 80043d4:	f7ff ff16 	bl	8004204 <__i2b>
 80043d8:	2300      	movs	r3, #0
 80043da:	f8c8 0008 	str.w	r0, [r8, #8]
 80043de:	4604      	mov	r4, r0
 80043e0:	6003      	str	r3, [r0, #0]
 80043e2:	f04f 0900 	mov.w	r9, #0
 80043e6:	07eb      	lsls	r3, r5, #31
 80043e8:	d50a      	bpl.n	8004400 <__pow5mult+0x84>
 80043ea:	4639      	mov	r1, r7
 80043ec:	4622      	mov	r2, r4
 80043ee:	4630      	mov	r0, r6
 80043f0:	f7ff ff1e 	bl	8004230 <__multiply>
 80043f4:	4639      	mov	r1, r7
 80043f6:	4680      	mov	r8, r0
 80043f8:	4630      	mov	r0, r6
 80043fa:	f7ff fe49 	bl	8004090 <_Bfree>
 80043fe:	4647      	mov	r7, r8
 8004400:	106d      	asrs	r5, r5, #1
 8004402:	d00b      	beq.n	800441c <__pow5mult+0xa0>
 8004404:	6820      	ldr	r0, [r4, #0]
 8004406:	b938      	cbnz	r0, 8004418 <__pow5mult+0x9c>
 8004408:	4622      	mov	r2, r4
 800440a:	4621      	mov	r1, r4
 800440c:	4630      	mov	r0, r6
 800440e:	f7ff ff0f 	bl	8004230 <__multiply>
 8004412:	6020      	str	r0, [r4, #0]
 8004414:	f8c0 9000 	str.w	r9, [r0]
 8004418:	4604      	mov	r4, r0
 800441a:	e7e4      	b.n	80043e6 <__pow5mult+0x6a>
 800441c:	4638      	mov	r0, r7
 800441e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004422:	bf00      	nop
 8004424:	08005140 	.word	0x08005140
 8004428:	08004f05 	.word	0x08004f05
 800442c:	08004fec 	.word	0x08004fec

08004430 <__lshift>:
 8004430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004434:	460c      	mov	r4, r1
 8004436:	6849      	ldr	r1, [r1, #4]
 8004438:	6923      	ldr	r3, [r4, #16]
 800443a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800443e:	68a3      	ldr	r3, [r4, #8]
 8004440:	4607      	mov	r7, r0
 8004442:	4691      	mov	r9, r2
 8004444:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004448:	f108 0601 	add.w	r6, r8, #1
 800444c:	42b3      	cmp	r3, r6
 800444e:	db0b      	blt.n	8004468 <__lshift+0x38>
 8004450:	4638      	mov	r0, r7
 8004452:	f7ff fddd 	bl	8004010 <_Balloc>
 8004456:	4605      	mov	r5, r0
 8004458:	b948      	cbnz	r0, 800446e <__lshift+0x3e>
 800445a:	4602      	mov	r2, r0
 800445c:	4b28      	ldr	r3, [pc, #160]	; (8004500 <__lshift+0xd0>)
 800445e:	4829      	ldr	r0, [pc, #164]	; (8004504 <__lshift+0xd4>)
 8004460:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004464:	f000 fa6e 	bl	8004944 <__assert_func>
 8004468:	3101      	adds	r1, #1
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	e7ee      	b.n	800444c <__lshift+0x1c>
 800446e:	2300      	movs	r3, #0
 8004470:	f100 0114 	add.w	r1, r0, #20
 8004474:	f100 0210 	add.w	r2, r0, #16
 8004478:	4618      	mov	r0, r3
 800447a:	4553      	cmp	r3, sl
 800447c:	db33      	blt.n	80044e6 <__lshift+0xb6>
 800447e:	6920      	ldr	r0, [r4, #16]
 8004480:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004484:	f104 0314 	add.w	r3, r4, #20
 8004488:	f019 091f 	ands.w	r9, r9, #31
 800448c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004490:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004494:	d02b      	beq.n	80044ee <__lshift+0xbe>
 8004496:	f1c9 0e20 	rsb	lr, r9, #32
 800449a:	468a      	mov	sl, r1
 800449c:	2200      	movs	r2, #0
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	fa00 f009 	lsl.w	r0, r0, r9
 80044a4:	4302      	orrs	r2, r0
 80044a6:	f84a 2b04 	str.w	r2, [sl], #4
 80044aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80044ae:	459c      	cmp	ip, r3
 80044b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80044b4:	d8f3      	bhi.n	800449e <__lshift+0x6e>
 80044b6:	ebac 0304 	sub.w	r3, ip, r4
 80044ba:	3b15      	subs	r3, #21
 80044bc:	f023 0303 	bic.w	r3, r3, #3
 80044c0:	3304      	adds	r3, #4
 80044c2:	f104 0015 	add.w	r0, r4, #21
 80044c6:	4584      	cmp	ip, r0
 80044c8:	bf38      	it	cc
 80044ca:	2304      	movcc	r3, #4
 80044cc:	50ca      	str	r2, [r1, r3]
 80044ce:	b10a      	cbz	r2, 80044d4 <__lshift+0xa4>
 80044d0:	f108 0602 	add.w	r6, r8, #2
 80044d4:	3e01      	subs	r6, #1
 80044d6:	4638      	mov	r0, r7
 80044d8:	612e      	str	r6, [r5, #16]
 80044da:	4621      	mov	r1, r4
 80044dc:	f7ff fdd8 	bl	8004090 <_Bfree>
 80044e0:	4628      	mov	r0, r5
 80044e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80044ea:	3301      	adds	r3, #1
 80044ec:	e7c5      	b.n	800447a <__lshift+0x4a>
 80044ee:	3904      	subs	r1, #4
 80044f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80044f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80044f8:	459c      	cmp	ip, r3
 80044fa:	d8f9      	bhi.n	80044f0 <__lshift+0xc0>
 80044fc:	e7ea      	b.n	80044d4 <__lshift+0xa4>
 80044fe:	bf00      	nop
 8004500:	08004f7b 	.word	0x08004f7b
 8004504:	08004fec 	.word	0x08004fec

08004508 <__mcmp>:
 8004508:	690a      	ldr	r2, [r1, #16]
 800450a:	4603      	mov	r3, r0
 800450c:	6900      	ldr	r0, [r0, #16]
 800450e:	1a80      	subs	r0, r0, r2
 8004510:	b530      	push	{r4, r5, lr}
 8004512:	d10d      	bne.n	8004530 <__mcmp+0x28>
 8004514:	3314      	adds	r3, #20
 8004516:	3114      	adds	r1, #20
 8004518:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800451c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004520:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004524:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004528:	4295      	cmp	r5, r2
 800452a:	d002      	beq.n	8004532 <__mcmp+0x2a>
 800452c:	d304      	bcc.n	8004538 <__mcmp+0x30>
 800452e:	2001      	movs	r0, #1
 8004530:	bd30      	pop	{r4, r5, pc}
 8004532:	42a3      	cmp	r3, r4
 8004534:	d3f4      	bcc.n	8004520 <__mcmp+0x18>
 8004536:	e7fb      	b.n	8004530 <__mcmp+0x28>
 8004538:	f04f 30ff 	mov.w	r0, #4294967295
 800453c:	e7f8      	b.n	8004530 <__mcmp+0x28>
	...

08004540 <__mdiff>:
 8004540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004544:	460c      	mov	r4, r1
 8004546:	4606      	mov	r6, r0
 8004548:	4611      	mov	r1, r2
 800454a:	4620      	mov	r0, r4
 800454c:	4617      	mov	r7, r2
 800454e:	f7ff ffdb 	bl	8004508 <__mcmp>
 8004552:	1e05      	subs	r5, r0, #0
 8004554:	d111      	bne.n	800457a <__mdiff+0x3a>
 8004556:	4629      	mov	r1, r5
 8004558:	4630      	mov	r0, r6
 800455a:	f7ff fd59 	bl	8004010 <_Balloc>
 800455e:	4602      	mov	r2, r0
 8004560:	b928      	cbnz	r0, 800456e <__mdiff+0x2e>
 8004562:	4b3a      	ldr	r3, [pc, #232]	; (800464c <__mdiff+0x10c>)
 8004564:	f240 2132 	movw	r1, #562	; 0x232
 8004568:	4839      	ldr	r0, [pc, #228]	; (8004650 <__mdiff+0x110>)
 800456a:	f000 f9eb 	bl	8004944 <__assert_func>
 800456e:	2301      	movs	r3, #1
 8004570:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004574:	4610      	mov	r0, r2
 8004576:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800457a:	bfa4      	itt	ge
 800457c:	463b      	movge	r3, r7
 800457e:	4627      	movge	r7, r4
 8004580:	4630      	mov	r0, r6
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	bfa6      	itte	ge
 8004586:	461c      	movge	r4, r3
 8004588:	2500      	movge	r5, #0
 800458a:	2501      	movlt	r5, #1
 800458c:	f7ff fd40 	bl	8004010 <_Balloc>
 8004590:	4602      	mov	r2, r0
 8004592:	b918      	cbnz	r0, 800459c <__mdiff+0x5c>
 8004594:	4b2d      	ldr	r3, [pc, #180]	; (800464c <__mdiff+0x10c>)
 8004596:	f44f 7110 	mov.w	r1, #576	; 0x240
 800459a:	e7e5      	b.n	8004568 <__mdiff+0x28>
 800459c:	693e      	ldr	r6, [r7, #16]
 800459e:	60c5      	str	r5, [r0, #12]
 80045a0:	6925      	ldr	r5, [r4, #16]
 80045a2:	f107 0114 	add.w	r1, r7, #20
 80045a6:	f100 0e14 	add.w	lr, r0, #20
 80045aa:	f104 0914 	add.w	r9, r4, #20
 80045ae:	f107 0010 	add.w	r0, r7, #16
 80045b2:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80045b6:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80045ba:	46f2      	mov	sl, lr
 80045bc:	2700      	movs	r7, #0
 80045be:	f859 3b04 	ldr.w	r3, [r9], #4
 80045c2:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80045c6:	fa1f f883 	uxth.w	r8, r3
 80045ca:	fa17 f78b 	uxtah	r7, r7, fp
 80045ce:	0c1b      	lsrs	r3, r3, #16
 80045d0:	eba7 0808 	sub.w	r8, r7, r8
 80045d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80045d8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80045dc:	fa1f f888 	uxth.w	r8, r8
 80045e0:	141f      	asrs	r7, r3, #16
 80045e2:	454d      	cmp	r5, r9
 80045e4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80045e8:	f84a 3b04 	str.w	r3, [sl], #4
 80045ec:	d8e7      	bhi.n	80045be <__mdiff+0x7e>
 80045ee:	1b2b      	subs	r3, r5, r4
 80045f0:	3b15      	subs	r3, #21
 80045f2:	f023 0303 	bic.w	r3, r3, #3
 80045f6:	3304      	adds	r3, #4
 80045f8:	3415      	adds	r4, #21
 80045fa:	42a5      	cmp	r5, r4
 80045fc:	bf38      	it	cc
 80045fe:	2304      	movcc	r3, #4
 8004600:	4419      	add	r1, r3
 8004602:	4473      	add	r3, lr
 8004604:	469e      	mov	lr, r3
 8004606:	460d      	mov	r5, r1
 8004608:	4565      	cmp	r5, ip
 800460a:	d30e      	bcc.n	800462a <__mdiff+0xea>
 800460c:	f10c 0003 	add.w	r0, ip, #3
 8004610:	1a40      	subs	r0, r0, r1
 8004612:	f020 0003 	bic.w	r0, r0, #3
 8004616:	3903      	subs	r1, #3
 8004618:	458c      	cmp	ip, r1
 800461a:	bf38      	it	cc
 800461c:	2000      	movcc	r0, #0
 800461e:	4418      	add	r0, r3
 8004620:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8004624:	b17b      	cbz	r3, 8004646 <__mdiff+0x106>
 8004626:	6116      	str	r6, [r2, #16]
 8004628:	e7a4      	b.n	8004574 <__mdiff+0x34>
 800462a:	f855 8b04 	ldr.w	r8, [r5], #4
 800462e:	fa17 f488 	uxtah	r4, r7, r8
 8004632:	1420      	asrs	r0, r4, #16
 8004634:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004638:	b2a4      	uxth	r4, r4
 800463a:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800463e:	f84e 4b04 	str.w	r4, [lr], #4
 8004642:	1407      	asrs	r7, r0, #16
 8004644:	e7e0      	b.n	8004608 <__mdiff+0xc8>
 8004646:	3e01      	subs	r6, #1
 8004648:	e7ea      	b.n	8004620 <__mdiff+0xe0>
 800464a:	bf00      	nop
 800464c:	08004f7b 	.word	0x08004f7b
 8004650:	08004fec 	.word	0x08004fec

08004654 <__d2b>:
 8004654:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004658:	2101      	movs	r1, #1
 800465a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800465e:	4690      	mov	r8, r2
 8004660:	461d      	mov	r5, r3
 8004662:	f7ff fcd5 	bl	8004010 <_Balloc>
 8004666:	4604      	mov	r4, r0
 8004668:	b930      	cbnz	r0, 8004678 <__d2b+0x24>
 800466a:	4602      	mov	r2, r0
 800466c:	4b25      	ldr	r3, [pc, #148]	; (8004704 <__d2b+0xb0>)
 800466e:	4826      	ldr	r0, [pc, #152]	; (8004708 <__d2b+0xb4>)
 8004670:	f240 310a 	movw	r1, #778	; 0x30a
 8004674:	f000 f966 	bl	8004944 <__assert_func>
 8004678:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800467c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004680:	bb2d      	cbnz	r5, 80046ce <__d2b+0x7a>
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	f1b8 0300 	subs.w	r3, r8, #0
 8004688:	d026      	beq.n	80046d8 <__d2b+0x84>
 800468a:	4668      	mov	r0, sp
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	f7ff fd8b 	bl	80041a8 <__lo0bits>
 8004692:	9900      	ldr	r1, [sp, #0]
 8004694:	b1f0      	cbz	r0, 80046d4 <__d2b+0x80>
 8004696:	9a01      	ldr	r2, [sp, #4]
 8004698:	f1c0 0320 	rsb	r3, r0, #32
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	430b      	orrs	r3, r1
 80046a2:	40c2      	lsrs	r2, r0
 80046a4:	6163      	str	r3, [r4, #20]
 80046a6:	9201      	str	r2, [sp, #4]
 80046a8:	9b01      	ldr	r3, [sp, #4]
 80046aa:	61a3      	str	r3, [r4, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	bf14      	ite	ne
 80046b0:	2102      	movne	r1, #2
 80046b2:	2101      	moveq	r1, #1
 80046b4:	6121      	str	r1, [r4, #16]
 80046b6:	b1c5      	cbz	r5, 80046ea <__d2b+0x96>
 80046b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80046bc:	4405      	add	r5, r0
 80046be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80046c2:	603d      	str	r5, [r7, #0]
 80046c4:	6030      	str	r0, [r6, #0]
 80046c6:	4620      	mov	r0, r4
 80046c8:	b002      	add	sp, #8
 80046ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046d2:	e7d6      	b.n	8004682 <__d2b+0x2e>
 80046d4:	6161      	str	r1, [r4, #20]
 80046d6:	e7e7      	b.n	80046a8 <__d2b+0x54>
 80046d8:	a801      	add	r0, sp, #4
 80046da:	f7ff fd65 	bl	80041a8 <__lo0bits>
 80046de:	9b01      	ldr	r3, [sp, #4]
 80046e0:	6163      	str	r3, [r4, #20]
 80046e2:	2101      	movs	r1, #1
 80046e4:	6121      	str	r1, [r4, #16]
 80046e6:	3020      	adds	r0, #32
 80046e8:	e7e5      	b.n	80046b6 <__d2b+0x62>
 80046ea:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80046ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80046f2:	6038      	str	r0, [r7, #0]
 80046f4:	6918      	ldr	r0, [r3, #16]
 80046f6:	f7ff fd37 	bl	8004168 <__hi0bits>
 80046fa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80046fe:	6031      	str	r1, [r6, #0]
 8004700:	e7e1      	b.n	80046c6 <__d2b+0x72>
 8004702:	bf00      	nop
 8004704:	08004f7b 	.word	0x08004f7b
 8004708:	08004fec 	.word	0x08004fec

0800470c <_calloc_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	fb02 f501 	mul.w	r5, r2, r1
 8004712:	4629      	mov	r1, r5
 8004714:	f000 f856 	bl	80047c4 <_malloc_r>
 8004718:	4604      	mov	r4, r0
 800471a:	b118      	cbz	r0, 8004724 <_calloc_r+0x18>
 800471c:	462a      	mov	r2, r5
 800471e:	2100      	movs	r1, #0
 8004720:	f7fd fe28 	bl	8002374 <memset>
 8004724:	4620      	mov	r0, r4
 8004726:	bd38      	pop	{r3, r4, r5, pc}

08004728 <_free_r>:
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	4605      	mov	r5, r0
 800472c:	2900      	cmp	r1, #0
 800472e:	d045      	beq.n	80047bc <_free_r+0x94>
 8004730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004734:	1f0c      	subs	r4, r1, #4
 8004736:	2b00      	cmp	r3, #0
 8004738:	bfb8      	it	lt
 800473a:	18e4      	addlt	r4, r4, r3
 800473c:	f000 f988 	bl	8004a50 <__malloc_lock>
 8004740:	4a1f      	ldr	r2, [pc, #124]	; (80047c0 <_free_r+0x98>)
 8004742:	6813      	ldr	r3, [r2, #0]
 8004744:	4610      	mov	r0, r2
 8004746:	b933      	cbnz	r3, 8004756 <_free_r+0x2e>
 8004748:	6063      	str	r3, [r4, #4]
 800474a:	6014      	str	r4, [r2, #0]
 800474c:	4628      	mov	r0, r5
 800474e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004752:	f000 b983 	b.w	8004a5c <__malloc_unlock>
 8004756:	42a3      	cmp	r3, r4
 8004758:	d90b      	bls.n	8004772 <_free_r+0x4a>
 800475a:	6821      	ldr	r1, [r4, #0]
 800475c:	1862      	adds	r2, r4, r1
 800475e:	4293      	cmp	r3, r2
 8004760:	bf04      	itt	eq
 8004762:	681a      	ldreq	r2, [r3, #0]
 8004764:	685b      	ldreq	r3, [r3, #4]
 8004766:	6063      	str	r3, [r4, #4]
 8004768:	bf04      	itt	eq
 800476a:	1852      	addeq	r2, r2, r1
 800476c:	6022      	streq	r2, [r4, #0]
 800476e:	6004      	str	r4, [r0, #0]
 8004770:	e7ec      	b.n	800474c <_free_r+0x24>
 8004772:	461a      	mov	r2, r3
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	b10b      	cbz	r3, 800477c <_free_r+0x54>
 8004778:	42a3      	cmp	r3, r4
 800477a:	d9fa      	bls.n	8004772 <_free_r+0x4a>
 800477c:	6811      	ldr	r1, [r2, #0]
 800477e:	1850      	adds	r0, r2, r1
 8004780:	42a0      	cmp	r0, r4
 8004782:	d10b      	bne.n	800479c <_free_r+0x74>
 8004784:	6820      	ldr	r0, [r4, #0]
 8004786:	4401      	add	r1, r0
 8004788:	1850      	adds	r0, r2, r1
 800478a:	4283      	cmp	r3, r0
 800478c:	6011      	str	r1, [r2, #0]
 800478e:	d1dd      	bne.n	800474c <_free_r+0x24>
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	6053      	str	r3, [r2, #4]
 8004796:	4401      	add	r1, r0
 8004798:	6011      	str	r1, [r2, #0]
 800479a:	e7d7      	b.n	800474c <_free_r+0x24>
 800479c:	d902      	bls.n	80047a4 <_free_r+0x7c>
 800479e:	230c      	movs	r3, #12
 80047a0:	602b      	str	r3, [r5, #0]
 80047a2:	e7d3      	b.n	800474c <_free_r+0x24>
 80047a4:	6820      	ldr	r0, [r4, #0]
 80047a6:	1821      	adds	r1, r4, r0
 80047a8:	428b      	cmp	r3, r1
 80047aa:	bf04      	itt	eq
 80047ac:	6819      	ldreq	r1, [r3, #0]
 80047ae:	685b      	ldreq	r3, [r3, #4]
 80047b0:	6063      	str	r3, [r4, #4]
 80047b2:	bf04      	itt	eq
 80047b4:	1809      	addeq	r1, r1, r0
 80047b6:	6021      	streq	r1, [r4, #0]
 80047b8:	6054      	str	r4, [r2, #4]
 80047ba:	e7c7      	b.n	800474c <_free_r+0x24>
 80047bc:	bd38      	pop	{r3, r4, r5, pc}
 80047be:	bf00      	nop
 80047c0:	200001f8 	.word	0x200001f8

080047c4 <_malloc_r>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	1ccd      	adds	r5, r1, #3
 80047c8:	f025 0503 	bic.w	r5, r5, #3
 80047cc:	3508      	adds	r5, #8
 80047ce:	2d0c      	cmp	r5, #12
 80047d0:	bf38      	it	cc
 80047d2:	250c      	movcc	r5, #12
 80047d4:	2d00      	cmp	r5, #0
 80047d6:	4606      	mov	r6, r0
 80047d8:	db01      	blt.n	80047de <_malloc_r+0x1a>
 80047da:	42a9      	cmp	r1, r5
 80047dc:	d903      	bls.n	80047e6 <_malloc_r+0x22>
 80047de:	230c      	movs	r3, #12
 80047e0:	6033      	str	r3, [r6, #0]
 80047e2:	2000      	movs	r0, #0
 80047e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047e6:	f000 f933 	bl	8004a50 <__malloc_lock>
 80047ea:	4921      	ldr	r1, [pc, #132]	; (8004870 <_malloc_r+0xac>)
 80047ec:	680a      	ldr	r2, [r1, #0]
 80047ee:	4614      	mov	r4, r2
 80047f0:	b99c      	cbnz	r4, 800481a <_malloc_r+0x56>
 80047f2:	4f20      	ldr	r7, [pc, #128]	; (8004874 <_malloc_r+0xb0>)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	b923      	cbnz	r3, 8004802 <_malloc_r+0x3e>
 80047f8:	4621      	mov	r1, r4
 80047fa:	4630      	mov	r0, r6
 80047fc:	f000 f83c 	bl	8004878 <_sbrk_r>
 8004800:	6038      	str	r0, [r7, #0]
 8004802:	4629      	mov	r1, r5
 8004804:	4630      	mov	r0, r6
 8004806:	f000 f837 	bl	8004878 <_sbrk_r>
 800480a:	1c43      	adds	r3, r0, #1
 800480c:	d123      	bne.n	8004856 <_malloc_r+0x92>
 800480e:	230c      	movs	r3, #12
 8004810:	6033      	str	r3, [r6, #0]
 8004812:	4630      	mov	r0, r6
 8004814:	f000 f922 	bl	8004a5c <__malloc_unlock>
 8004818:	e7e3      	b.n	80047e2 <_malloc_r+0x1e>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	1b5b      	subs	r3, r3, r5
 800481e:	d417      	bmi.n	8004850 <_malloc_r+0x8c>
 8004820:	2b0b      	cmp	r3, #11
 8004822:	d903      	bls.n	800482c <_malloc_r+0x68>
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	441c      	add	r4, r3
 8004828:	6025      	str	r5, [r4, #0]
 800482a:	e004      	b.n	8004836 <_malloc_r+0x72>
 800482c:	6863      	ldr	r3, [r4, #4]
 800482e:	42a2      	cmp	r2, r4
 8004830:	bf0c      	ite	eq
 8004832:	600b      	streq	r3, [r1, #0]
 8004834:	6053      	strne	r3, [r2, #4]
 8004836:	4630      	mov	r0, r6
 8004838:	f000 f910 	bl	8004a5c <__malloc_unlock>
 800483c:	f104 000b 	add.w	r0, r4, #11
 8004840:	1d23      	adds	r3, r4, #4
 8004842:	f020 0007 	bic.w	r0, r0, #7
 8004846:	1ac2      	subs	r2, r0, r3
 8004848:	d0cc      	beq.n	80047e4 <_malloc_r+0x20>
 800484a:	1a1b      	subs	r3, r3, r0
 800484c:	50a3      	str	r3, [r4, r2]
 800484e:	e7c9      	b.n	80047e4 <_malloc_r+0x20>
 8004850:	4622      	mov	r2, r4
 8004852:	6864      	ldr	r4, [r4, #4]
 8004854:	e7cc      	b.n	80047f0 <_malloc_r+0x2c>
 8004856:	1cc4      	adds	r4, r0, #3
 8004858:	f024 0403 	bic.w	r4, r4, #3
 800485c:	42a0      	cmp	r0, r4
 800485e:	d0e3      	beq.n	8004828 <_malloc_r+0x64>
 8004860:	1a21      	subs	r1, r4, r0
 8004862:	4630      	mov	r0, r6
 8004864:	f000 f808 	bl	8004878 <_sbrk_r>
 8004868:	3001      	adds	r0, #1
 800486a:	d1dd      	bne.n	8004828 <_malloc_r+0x64>
 800486c:	e7cf      	b.n	800480e <_malloc_r+0x4a>
 800486e:	bf00      	nop
 8004870:	200001f8 	.word	0x200001f8
 8004874:	200001fc 	.word	0x200001fc

08004878 <_sbrk_r>:
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	4d06      	ldr	r5, [pc, #24]	; (8004894 <_sbrk_r+0x1c>)
 800487c:	2300      	movs	r3, #0
 800487e:	4604      	mov	r4, r0
 8004880:	4608      	mov	r0, r1
 8004882:	602b      	str	r3, [r5, #0]
 8004884:	f000 faea 	bl	8004e5c <_sbrk>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	d102      	bne.n	8004892 <_sbrk_r+0x1a>
 800488c:	682b      	ldr	r3, [r5, #0]
 800488e:	b103      	cbz	r3, 8004892 <_sbrk_r+0x1a>
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	bd38      	pop	{r3, r4, r5, pc}
 8004894:	20000264 	.word	0x20000264

08004898 <__sread>:
 8004898:	b510      	push	{r4, lr}
 800489a:	460c      	mov	r4, r1
 800489c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a0:	f000 fa3a 	bl	8004d18 <_read_r>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	bfab      	itete	ge
 80048a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048aa:	89a3      	ldrhlt	r3, [r4, #12]
 80048ac:	181b      	addge	r3, r3, r0
 80048ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048b2:	bfac      	ite	ge
 80048b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80048b6:	81a3      	strhlt	r3, [r4, #12]
 80048b8:	bd10      	pop	{r4, pc}

080048ba <__swrite>:
 80048ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048be:	461f      	mov	r7, r3
 80048c0:	898b      	ldrh	r3, [r1, #12]
 80048c2:	05db      	lsls	r3, r3, #23
 80048c4:	4605      	mov	r5, r0
 80048c6:	460c      	mov	r4, r1
 80048c8:	4616      	mov	r6, r2
 80048ca:	d505      	bpl.n	80048d8 <__swrite+0x1e>
 80048cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048d0:	2302      	movs	r3, #2
 80048d2:	2200      	movs	r2, #0
 80048d4:	f000 f898 	bl	8004a08 <_lseek_r>
 80048d8:	89a3      	ldrh	r3, [r4, #12]
 80048da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048e2:	81a3      	strh	r3, [r4, #12]
 80048e4:	4632      	mov	r2, r6
 80048e6:	463b      	mov	r3, r7
 80048e8:	4628      	mov	r0, r5
 80048ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048ee:	f000 b817 	b.w	8004920 <_write_r>

080048f2 <__sseek>:
 80048f2:	b510      	push	{r4, lr}
 80048f4:	460c      	mov	r4, r1
 80048f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048fa:	f000 f885 	bl	8004a08 <_lseek_r>
 80048fe:	1c43      	adds	r3, r0, #1
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	bf15      	itete	ne
 8004904:	6560      	strne	r0, [r4, #84]	; 0x54
 8004906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800490a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800490e:	81a3      	strheq	r3, [r4, #12]
 8004910:	bf18      	it	ne
 8004912:	81a3      	strhne	r3, [r4, #12]
 8004914:	bd10      	pop	{r4, pc}

08004916 <__sclose>:
 8004916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800491a:	f000 b831 	b.w	8004980 <_close_r>
	...

08004920 <_write_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4d07      	ldr	r5, [pc, #28]	; (8004940 <_write_r+0x20>)
 8004924:	4604      	mov	r4, r0
 8004926:	4608      	mov	r0, r1
 8004928:	4611      	mov	r1, r2
 800492a:	2200      	movs	r2, #0
 800492c:	602a      	str	r2, [r5, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	f7fc fb4a 	bl	8000fc8 <_write>
 8004934:	1c43      	adds	r3, r0, #1
 8004936:	d102      	bne.n	800493e <_write_r+0x1e>
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	b103      	cbz	r3, 800493e <_write_r+0x1e>
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	bd38      	pop	{r3, r4, r5, pc}
 8004940:	20000264 	.word	0x20000264

08004944 <__assert_func>:
 8004944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004946:	4614      	mov	r4, r2
 8004948:	461a      	mov	r2, r3
 800494a:	4b09      	ldr	r3, [pc, #36]	; (8004970 <__assert_func+0x2c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4605      	mov	r5, r0
 8004950:	68d8      	ldr	r0, [r3, #12]
 8004952:	b14c      	cbz	r4, 8004968 <__assert_func+0x24>
 8004954:	4b07      	ldr	r3, [pc, #28]	; (8004974 <__assert_func+0x30>)
 8004956:	9100      	str	r1, [sp, #0]
 8004958:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800495c:	4906      	ldr	r1, [pc, #24]	; (8004978 <__assert_func+0x34>)
 800495e:	462b      	mov	r3, r5
 8004960:	f000 f81e 	bl	80049a0 <fiprintf>
 8004964:	f000 f9f7 	bl	8004d56 <abort>
 8004968:	4b04      	ldr	r3, [pc, #16]	; (800497c <__assert_func+0x38>)
 800496a:	461c      	mov	r4, r3
 800496c:	e7f3      	b.n	8004956 <__assert_func+0x12>
 800496e:	bf00      	nop
 8004970:	2000000c 	.word	0x2000000c
 8004974:	0800514c 	.word	0x0800514c
 8004978:	08005159 	.word	0x08005159
 800497c:	08005187 	.word	0x08005187

08004980 <_close_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	4d06      	ldr	r5, [pc, #24]	; (800499c <_close_r+0x1c>)
 8004984:	2300      	movs	r3, #0
 8004986:	4604      	mov	r4, r0
 8004988:	4608      	mov	r0, r1
 800498a:	602b      	str	r3, [r5, #0]
 800498c:	f000 fa2e 	bl	8004dec <_close>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	d102      	bne.n	800499a <_close_r+0x1a>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	b103      	cbz	r3, 800499a <_close_r+0x1a>
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	20000264 	.word	0x20000264

080049a0 <fiprintf>:
 80049a0:	b40e      	push	{r1, r2, r3}
 80049a2:	b503      	push	{r0, r1, lr}
 80049a4:	4601      	mov	r1, r0
 80049a6:	ab03      	add	r3, sp, #12
 80049a8:	4805      	ldr	r0, [pc, #20]	; (80049c0 <fiprintf+0x20>)
 80049aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ae:	6800      	ldr	r0, [r0, #0]
 80049b0:	9301      	str	r3, [sp, #4]
 80049b2:	f000 f881 	bl	8004ab8 <_vfiprintf_r>
 80049b6:	b002      	add	sp, #8
 80049b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80049bc:	b003      	add	sp, #12
 80049be:	4770      	bx	lr
 80049c0:	2000000c 	.word	0x2000000c

080049c4 <_fstat_r>:
 80049c4:	b538      	push	{r3, r4, r5, lr}
 80049c6:	4d07      	ldr	r5, [pc, #28]	; (80049e4 <_fstat_r+0x20>)
 80049c8:	2300      	movs	r3, #0
 80049ca:	4604      	mov	r4, r0
 80049cc:	4608      	mov	r0, r1
 80049ce:	4611      	mov	r1, r2
 80049d0:	602b      	str	r3, [r5, #0]
 80049d2:	f000 fa13 	bl	8004dfc <_fstat>
 80049d6:	1c43      	adds	r3, r0, #1
 80049d8:	d102      	bne.n	80049e0 <_fstat_r+0x1c>
 80049da:	682b      	ldr	r3, [r5, #0]
 80049dc:	b103      	cbz	r3, 80049e0 <_fstat_r+0x1c>
 80049de:	6023      	str	r3, [r4, #0]
 80049e0:	bd38      	pop	{r3, r4, r5, pc}
 80049e2:	bf00      	nop
 80049e4:	20000264 	.word	0x20000264

080049e8 <_isatty_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	4d06      	ldr	r5, [pc, #24]	; (8004a04 <_isatty_r+0x1c>)
 80049ec:	2300      	movs	r3, #0
 80049ee:	4604      	mov	r4, r0
 80049f0:	4608      	mov	r0, r1
 80049f2:	602b      	str	r3, [r5, #0]
 80049f4:	f000 fa12 	bl	8004e1c <_isatty>
 80049f8:	1c43      	adds	r3, r0, #1
 80049fa:	d102      	bne.n	8004a02 <_isatty_r+0x1a>
 80049fc:	682b      	ldr	r3, [r5, #0]
 80049fe:	b103      	cbz	r3, 8004a02 <_isatty_r+0x1a>
 8004a00:	6023      	str	r3, [r4, #0]
 8004a02:	bd38      	pop	{r3, r4, r5, pc}
 8004a04:	20000264 	.word	0x20000264

08004a08 <_lseek_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	4d07      	ldr	r5, [pc, #28]	; (8004a28 <_lseek_r+0x20>)
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	4608      	mov	r0, r1
 8004a10:	4611      	mov	r1, r2
 8004a12:	2200      	movs	r2, #0
 8004a14:	602a      	str	r2, [r5, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	f000 fa10 	bl	8004e3c <_lseek>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d102      	bne.n	8004a26 <_lseek_r+0x1e>
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	b103      	cbz	r3, 8004a26 <_lseek_r+0x1e>
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	20000264 	.word	0x20000264

08004a2c <__ascii_mbtowc>:
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	b901      	cbnz	r1, 8004a32 <__ascii_mbtowc+0x6>
 8004a30:	a901      	add	r1, sp, #4
 8004a32:	b142      	cbz	r2, 8004a46 <__ascii_mbtowc+0x1a>
 8004a34:	b14b      	cbz	r3, 8004a4a <__ascii_mbtowc+0x1e>
 8004a36:	7813      	ldrb	r3, [r2, #0]
 8004a38:	600b      	str	r3, [r1, #0]
 8004a3a:	7812      	ldrb	r2, [r2, #0]
 8004a3c:	1e10      	subs	r0, r2, #0
 8004a3e:	bf18      	it	ne
 8004a40:	2001      	movne	r0, #1
 8004a42:	b002      	add	sp, #8
 8004a44:	4770      	bx	lr
 8004a46:	4610      	mov	r0, r2
 8004a48:	e7fb      	b.n	8004a42 <__ascii_mbtowc+0x16>
 8004a4a:	f06f 0001 	mvn.w	r0, #1
 8004a4e:	e7f8      	b.n	8004a42 <__ascii_mbtowc+0x16>

08004a50 <__malloc_lock>:
 8004a50:	4801      	ldr	r0, [pc, #4]	; (8004a58 <__malloc_lock+0x8>)
 8004a52:	f7ff ba60 	b.w	8003f16 <__retarget_lock_acquire_recursive>
 8004a56:	bf00      	nop
 8004a58:	2000025c 	.word	0x2000025c

08004a5c <__malloc_unlock>:
 8004a5c:	4801      	ldr	r0, [pc, #4]	; (8004a64 <__malloc_unlock+0x8>)
 8004a5e:	f7ff ba5b 	b.w	8003f18 <__retarget_lock_release_recursive>
 8004a62:	bf00      	nop
 8004a64:	2000025c 	.word	0x2000025c

08004a68 <__sfputc_r>:
 8004a68:	6893      	ldr	r3, [r2, #8]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	b410      	push	{r4}
 8004a70:	6093      	str	r3, [r2, #8]
 8004a72:	da07      	bge.n	8004a84 <__sfputc_r+0x1c>
 8004a74:	6994      	ldr	r4, [r2, #24]
 8004a76:	42a3      	cmp	r3, r4
 8004a78:	db01      	blt.n	8004a7e <__sfputc_r+0x16>
 8004a7a:	290a      	cmp	r1, #10
 8004a7c:	d102      	bne.n	8004a84 <__sfputc_r+0x1c>
 8004a7e:	bc10      	pop	{r4}
 8004a80:	f7fe b952 	b.w	8002d28 <__swbuf_r>
 8004a84:	6813      	ldr	r3, [r2, #0]
 8004a86:	1c58      	adds	r0, r3, #1
 8004a88:	6010      	str	r0, [r2, #0]
 8004a8a:	7019      	strb	r1, [r3, #0]
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	bc10      	pop	{r4}
 8004a90:	4770      	bx	lr

08004a92 <__sfputs_r>:
 8004a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a94:	4606      	mov	r6, r0
 8004a96:	460f      	mov	r7, r1
 8004a98:	4614      	mov	r4, r2
 8004a9a:	18d5      	adds	r5, r2, r3
 8004a9c:	42ac      	cmp	r4, r5
 8004a9e:	d101      	bne.n	8004aa4 <__sfputs_r+0x12>
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	e007      	b.n	8004ab4 <__sfputs_r+0x22>
 8004aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa8:	463a      	mov	r2, r7
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f7ff ffdc 	bl	8004a68 <__sfputc_r>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d1f3      	bne.n	8004a9c <__sfputs_r+0xa>
 8004ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ab8 <_vfiprintf_r>:
 8004ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004abc:	460d      	mov	r5, r1
 8004abe:	b09d      	sub	sp, #116	; 0x74
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	4698      	mov	r8, r3
 8004ac4:	4606      	mov	r6, r0
 8004ac6:	b118      	cbz	r0, 8004ad0 <_vfiprintf_r+0x18>
 8004ac8:	6983      	ldr	r3, [r0, #24]
 8004aca:	b90b      	cbnz	r3, 8004ad0 <_vfiprintf_r+0x18>
 8004acc:	f7ff f980 	bl	8003dd0 <__sinit>
 8004ad0:	4b89      	ldr	r3, [pc, #548]	; (8004cf8 <_vfiprintf_r+0x240>)
 8004ad2:	429d      	cmp	r5, r3
 8004ad4:	d11b      	bne.n	8004b0e <_vfiprintf_r+0x56>
 8004ad6:	6875      	ldr	r5, [r6, #4]
 8004ad8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ada:	07d9      	lsls	r1, r3, #31
 8004adc:	d405      	bmi.n	8004aea <_vfiprintf_r+0x32>
 8004ade:	89ab      	ldrh	r3, [r5, #12]
 8004ae0:	059a      	lsls	r2, r3, #22
 8004ae2:	d402      	bmi.n	8004aea <_vfiprintf_r+0x32>
 8004ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ae6:	f7ff fa16 	bl	8003f16 <__retarget_lock_acquire_recursive>
 8004aea:	89ab      	ldrh	r3, [r5, #12]
 8004aec:	071b      	lsls	r3, r3, #28
 8004aee:	d501      	bpl.n	8004af4 <_vfiprintf_r+0x3c>
 8004af0:	692b      	ldr	r3, [r5, #16]
 8004af2:	b9eb      	cbnz	r3, 8004b30 <_vfiprintf_r+0x78>
 8004af4:	4629      	mov	r1, r5
 8004af6:	4630      	mov	r0, r6
 8004af8:	f7fe f968 	bl	8002dcc <__swsetup_r>
 8004afc:	b1c0      	cbz	r0, 8004b30 <_vfiprintf_r+0x78>
 8004afe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b00:	07dc      	lsls	r4, r3, #31
 8004b02:	d50e      	bpl.n	8004b22 <_vfiprintf_r+0x6a>
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295
 8004b08:	b01d      	add	sp, #116	; 0x74
 8004b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0e:	4b7b      	ldr	r3, [pc, #492]	; (8004cfc <_vfiprintf_r+0x244>)
 8004b10:	429d      	cmp	r5, r3
 8004b12:	d101      	bne.n	8004b18 <_vfiprintf_r+0x60>
 8004b14:	68b5      	ldr	r5, [r6, #8]
 8004b16:	e7df      	b.n	8004ad8 <_vfiprintf_r+0x20>
 8004b18:	4b79      	ldr	r3, [pc, #484]	; (8004d00 <_vfiprintf_r+0x248>)
 8004b1a:	429d      	cmp	r5, r3
 8004b1c:	bf08      	it	eq
 8004b1e:	68f5      	ldreq	r5, [r6, #12]
 8004b20:	e7da      	b.n	8004ad8 <_vfiprintf_r+0x20>
 8004b22:	89ab      	ldrh	r3, [r5, #12]
 8004b24:	0598      	lsls	r0, r3, #22
 8004b26:	d4ed      	bmi.n	8004b04 <_vfiprintf_r+0x4c>
 8004b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b2a:	f7ff f9f5 	bl	8003f18 <__retarget_lock_release_recursive>
 8004b2e:	e7e9      	b.n	8004b04 <_vfiprintf_r+0x4c>
 8004b30:	2300      	movs	r3, #0
 8004b32:	9309      	str	r3, [sp, #36]	; 0x24
 8004b34:	2320      	movs	r3, #32
 8004b36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b3e:	2330      	movs	r3, #48	; 0x30
 8004b40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004d04 <_vfiprintf_r+0x24c>
 8004b44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b48:	f04f 0901 	mov.w	r9, #1
 8004b4c:	4623      	mov	r3, r4
 8004b4e:	469a      	mov	sl, r3
 8004b50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b54:	b10a      	cbz	r2, 8004b5a <_vfiprintf_r+0xa2>
 8004b56:	2a25      	cmp	r2, #37	; 0x25
 8004b58:	d1f9      	bne.n	8004b4e <_vfiprintf_r+0x96>
 8004b5a:	ebba 0b04 	subs.w	fp, sl, r4
 8004b5e:	d00b      	beq.n	8004b78 <_vfiprintf_r+0xc0>
 8004b60:	465b      	mov	r3, fp
 8004b62:	4622      	mov	r2, r4
 8004b64:	4629      	mov	r1, r5
 8004b66:	4630      	mov	r0, r6
 8004b68:	f7ff ff93 	bl	8004a92 <__sfputs_r>
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	f000 80aa 	beq.w	8004cc6 <_vfiprintf_r+0x20e>
 8004b72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b74:	445a      	add	r2, fp
 8004b76:	9209      	str	r2, [sp, #36]	; 0x24
 8004b78:	f89a 3000 	ldrb.w	r3, [sl]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80a2 	beq.w	8004cc6 <_vfiprintf_r+0x20e>
 8004b82:	2300      	movs	r3, #0
 8004b84:	f04f 32ff 	mov.w	r2, #4294967295
 8004b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b8c:	f10a 0a01 	add.w	sl, sl, #1
 8004b90:	9304      	str	r3, [sp, #16]
 8004b92:	9307      	str	r3, [sp, #28]
 8004b94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b98:	931a      	str	r3, [sp, #104]	; 0x68
 8004b9a:	4654      	mov	r4, sl
 8004b9c:	2205      	movs	r2, #5
 8004b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ba2:	4858      	ldr	r0, [pc, #352]	; (8004d04 <_vfiprintf_r+0x24c>)
 8004ba4:	f7fb fb54 	bl	8000250 <memchr>
 8004ba8:	9a04      	ldr	r2, [sp, #16]
 8004baa:	b9d8      	cbnz	r0, 8004be4 <_vfiprintf_r+0x12c>
 8004bac:	06d1      	lsls	r1, r2, #27
 8004bae:	bf44      	itt	mi
 8004bb0:	2320      	movmi	r3, #32
 8004bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bb6:	0713      	lsls	r3, r2, #28
 8004bb8:	bf44      	itt	mi
 8004bba:	232b      	movmi	r3, #43	; 0x2b
 8004bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8004bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8004bc6:	d015      	beq.n	8004bf4 <_vfiprintf_r+0x13c>
 8004bc8:	9a07      	ldr	r2, [sp, #28]
 8004bca:	4654      	mov	r4, sl
 8004bcc:	2000      	movs	r0, #0
 8004bce:	f04f 0c0a 	mov.w	ip, #10
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bd8:	3b30      	subs	r3, #48	; 0x30
 8004bda:	2b09      	cmp	r3, #9
 8004bdc:	d94e      	bls.n	8004c7c <_vfiprintf_r+0x1c4>
 8004bde:	b1b0      	cbz	r0, 8004c0e <_vfiprintf_r+0x156>
 8004be0:	9207      	str	r2, [sp, #28]
 8004be2:	e014      	b.n	8004c0e <_vfiprintf_r+0x156>
 8004be4:	eba0 0308 	sub.w	r3, r0, r8
 8004be8:	fa09 f303 	lsl.w	r3, r9, r3
 8004bec:	4313      	orrs	r3, r2
 8004bee:	9304      	str	r3, [sp, #16]
 8004bf0:	46a2      	mov	sl, r4
 8004bf2:	e7d2      	b.n	8004b9a <_vfiprintf_r+0xe2>
 8004bf4:	9b03      	ldr	r3, [sp, #12]
 8004bf6:	1d19      	adds	r1, r3, #4
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	9103      	str	r1, [sp, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	bfbb      	ittet	lt
 8004c00:	425b      	neglt	r3, r3
 8004c02:	f042 0202 	orrlt.w	r2, r2, #2
 8004c06:	9307      	strge	r3, [sp, #28]
 8004c08:	9307      	strlt	r3, [sp, #28]
 8004c0a:	bfb8      	it	lt
 8004c0c:	9204      	strlt	r2, [sp, #16]
 8004c0e:	7823      	ldrb	r3, [r4, #0]
 8004c10:	2b2e      	cmp	r3, #46	; 0x2e
 8004c12:	d10c      	bne.n	8004c2e <_vfiprintf_r+0x176>
 8004c14:	7863      	ldrb	r3, [r4, #1]
 8004c16:	2b2a      	cmp	r3, #42	; 0x2a
 8004c18:	d135      	bne.n	8004c86 <_vfiprintf_r+0x1ce>
 8004c1a:	9b03      	ldr	r3, [sp, #12]
 8004c1c:	1d1a      	adds	r2, r3, #4
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	9203      	str	r2, [sp, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bfb8      	it	lt
 8004c26:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c2a:	3402      	adds	r4, #2
 8004c2c:	9305      	str	r3, [sp, #20]
 8004c2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004d14 <_vfiprintf_r+0x25c>
 8004c32:	7821      	ldrb	r1, [r4, #0]
 8004c34:	2203      	movs	r2, #3
 8004c36:	4650      	mov	r0, sl
 8004c38:	f7fb fb0a 	bl	8000250 <memchr>
 8004c3c:	b140      	cbz	r0, 8004c50 <_vfiprintf_r+0x198>
 8004c3e:	2340      	movs	r3, #64	; 0x40
 8004c40:	eba0 000a 	sub.w	r0, r0, sl
 8004c44:	fa03 f000 	lsl.w	r0, r3, r0
 8004c48:	9b04      	ldr	r3, [sp, #16]
 8004c4a:	4303      	orrs	r3, r0
 8004c4c:	3401      	adds	r4, #1
 8004c4e:	9304      	str	r3, [sp, #16]
 8004c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c54:	482c      	ldr	r0, [pc, #176]	; (8004d08 <_vfiprintf_r+0x250>)
 8004c56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c5a:	2206      	movs	r2, #6
 8004c5c:	f7fb faf8 	bl	8000250 <memchr>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	d03f      	beq.n	8004ce4 <_vfiprintf_r+0x22c>
 8004c64:	4b29      	ldr	r3, [pc, #164]	; (8004d0c <_vfiprintf_r+0x254>)
 8004c66:	bb1b      	cbnz	r3, 8004cb0 <_vfiprintf_r+0x1f8>
 8004c68:	9b03      	ldr	r3, [sp, #12]
 8004c6a:	3307      	adds	r3, #7
 8004c6c:	f023 0307 	bic.w	r3, r3, #7
 8004c70:	3308      	adds	r3, #8
 8004c72:	9303      	str	r3, [sp, #12]
 8004c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c76:	443b      	add	r3, r7
 8004c78:	9309      	str	r3, [sp, #36]	; 0x24
 8004c7a:	e767      	b.n	8004b4c <_vfiprintf_r+0x94>
 8004c7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c80:	460c      	mov	r4, r1
 8004c82:	2001      	movs	r0, #1
 8004c84:	e7a5      	b.n	8004bd2 <_vfiprintf_r+0x11a>
 8004c86:	2300      	movs	r3, #0
 8004c88:	3401      	adds	r4, #1
 8004c8a:	9305      	str	r3, [sp, #20]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	f04f 0c0a 	mov.w	ip, #10
 8004c92:	4620      	mov	r0, r4
 8004c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c98:	3a30      	subs	r2, #48	; 0x30
 8004c9a:	2a09      	cmp	r2, #9
 8004c9c:	d903      	bls.n	8004ca6 <_vfiprintf_r+0x1ee>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0c5      	beq.n	8004c2e <_vfiprintf_r+0x176>
 8004ca2:	9105      	str	r1, [sp, #20]
 8004ca4:	e7c3      	b.n	8004c2e <_vfiprintf_r+0x176>
 8004ca6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004caa:	4604      	mov	r4, r0
 8004cac:	2301      	movs	r3, #1
 8004cae:	e7f0      	b.n	8004c92 <_vfiprintf_r+0x1da>
 8004cb0:	ab03      	add	r3, sp, #12
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	462a      	mov	r2, r5
 8004cb6:	4b16      	ldr	r3, [pc, #88]	; (8004d10 <_vfiprintf_r+0x258>)
 8004cb8:	a904      	add	r1, sp, #16
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f7fd fc00 	bl	80024c0 <_printf_float>
 8004cc0:	4607      	mov	r7, r0
 8004cc2:	1c78      	adds	r0, r7, #1
 8004cc4:	d1d6      	bne.n	8004c74 <_vfiprintf_r+0x1bc>
 8004cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cc8:	07d9      	lsls	r1, r3, #31
 8004cca:	d405      	bmi.n	8004cd8 <_vfiprintf_r+0x220>
 8004ccc:	89ab      	ldrh	r3, [r5, #12]
 8004cce:	059a      	lsls	r2, r3, #22
 8004cd0:	d402      	bmi.n	8004cd8 <_vfiprintf_r+0x220>
 8004cd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cd4:	f7ff f920 	bl	8003f18 <__retarget_lock_release_recursive>
 8004cd8:	89ab      	ldrh	r3, [r5, #12]
 8004cda:	065b      	lsls	r3, r3, #25
 8004cdc:	f53f af12 	bmi.w	8004b04 <_vfiprintf_r+0x4c>
 8004ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ce2:	e711      	b.n	8004b08 <_vfiprintf_r+0x50>
 8004ce4:	ab03      	add	r3, sp, #12
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	462a      	mov	r2, r5
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <_vfiprintf_r+0x258>)
 8004cec:	a904      	add	r1, sp, #16
 8004cee:	4630      	mov	r0, r6
 8004cf0:	f7fd fe7e 	bl	80029f0 <_printf_i>
 8004cf4:	e7e4      	b.n	8004cc0 <_vfiprintf_r+0x208>
 8004cf6:	bf00      	nop
 8004cf8:	08004fac 	.word	0x08004fac
 8004cfc:	08004fcc 	.word	0x08004fcc
 8004d00:	08004f8c 	.word	0x08004f8c
 8004d04:	08005192 	.word	0x08005192
 8004d08:	0800519c 	.word	0x0800519c
 8004d0c:	080024c1 	.word	0x080024c1
 8004d10:	08004a93 	.word	0x08004a93
 8004d14:	08005198 	.word	0x08005198

08004d18 <_read_r>:
 8004d18:	b538      	push	{r3, r4, r5, lr}
 8004d1a:	4d07      	ldr	r5, [pc, #28]	; (8004d38 <_read_r+0x20>)
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	4608      	mov	r0, r1
 8004d20:	4611      	mov	r1, r2
 8004d22:	2200      	movs	r2, #0
 8004d24:	602a      	str	r2, [r5, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	f000 f890 	bl	8004e4c <_read>
 8004d2c:	1c43      	adds	r3, r0, #1
 8004d2e:	d102      	bne.n	8004d36 <_read_r+0x1e>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	b103      	cbz	r3, 8004d36 <_read_r+0x1e>
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	bd38      	pop	{r3, r4, r5, pc}
 8004d38:	20000264 	.word	0x20000264

08004d3c <__ascii_wctomb>:
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	4608      	mov	r0, r1
 8004d40:	b141      	cbz	r1, 8004d54 <__ascii_wctomb+0x18>
 8004d42:	2aff      	cmp	r2, #255	; 0xff
 8004d44:	d904      	bls.n	8004d50 <__ascii_wctomb+0x14>
 8004d46:	228a      	movs	r2, #138	; 0x8a
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4e:	4770      	bx	lr
 8004d50:	700a      	strb	r2, [r1, #0]
 8004d52:	2001      	movs	r0, #1
 8004d54:	4770      	bx	lr

08004d56 <abort>:
 8004d56:	b508      	push	{r3, lr}
 8004d58:	2006      	movs	r0, #6
 8004d5a:	f000 f82b 	bl	8004db4 <raise>
 8004d5e:	2001      	movs	r0, #1
 8004d60:	f000 f88a 	bl	8004e78 <_exit>

08004d64 <_raise_r>:
 8004d64:	291f      	cmp	r1, #31
 8004d66:	b538      	push	{r3, r4, r5, lr}
 8004d68:	4604      	mov	r4, r0
 8004d6a:	460d      	mov	r5, r1
 8004d6c:	d904      	bls.n	8004d78 <_raise_r+0x14>
 8004d6e:	2316      	movs	r3, #22
 8004d70:	6003      	str	r3, [r0, #0]
 8004d72:	f04f 30ff 	mov.w	r0, #4294967295
 8004d76:	bd38      	pop	{r3, r4, r5, pc}
 8004d78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004d7a:	b112      	cbz	r2, 8004d82 <_raise_r+0x1e>
 8004d7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004d80:	b94b      	cbnz	r3, 8004d96 <_raise_r+0x32>
 8004d82:	4620      	mov	r0, r4
 8004d84:	f000 f830 	bl	8004de8 <_getpid_r>
 8004d88:	462a      	mov	r2, r5
 8004d8a:	4601      	mov	r1, r0
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d92:	f000 b817 	b.w	8004dc4 <_kill_r>
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d00a      	beq.n	8004db0 <_raise_r+0x4c>
 8004d9a:	1c59      	adds	r1, r3, #1
 8004d9c:	d103      	bne.n	8004da6 <_raise_r+0x42>
 8004d9e:	2316      	movs	r3, #22
 8004da0:	6003      	str	r3, [r0, #0]
 8004da2:	2001      	movs	r0, #1
 8004da4:	e7e7      	b.n	8004d76 <_raise_r+0x12>
 8004da6:	2400      	movs	r4, #0
 8004da8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004dac:	4628      	mov	r0, r5
 8004dae:	4798      	blx	r3
 8004db0:	2000      	movs	r0, #0
 8004db2:	e7e0      	b.n	8004d76 <_raise_r+0x12>

08004db4 <raise>:
 8004db4:	4b02      	ldr	r3, [pc, #8]	; (8004dc0 <raise+0xc>)
 8004db6:	4601      	mov	r1, r0
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	f7ff bfd3 	b.w	8004d64 <_raise_r>
 8004dbe:	bf00      	nop
 8004dc0:	2000000c 	.word	0x2000000c

08004dc4 <_kill_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4d07      	ldr	r5, [pc, #28]	; (8004de4 <_kill_r+0x20>)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	4611      	mov	r1, r2
 8004dd0:	602b      	str	r3, [r5, #0]
 8004dd2:	f000 f82b 	bl	8004e2c <_kill>
 8004dd6:	1c43      	adds	r3, r0, #1
 8004dd8:	d102      	bne.n	8004de0 <_kill_r+0x1c>
 8004dda:	682b      	ldr	r3, [r5, #0]
 8004ddc:	b103      	cbz	r3, 8004de0 <_kill_r+0x1c>
 8004dde:	6023      	str	r3, [r4, #0]
 8004de0:	bd38      	pop	{r3, r4, r5, pc}
 8004de2:	bf00      	nop
 8004de4:	20000264 	.word	0x20000264

08004de8 <_getpid_r>:
 8004de8:	f000 b810 	b.w	8004e0c <_getpid>

08004dec <_close>:
 8004dec:	4b02      	ldr	r3, [pc, #8]	; (8004df8 <_close+0xc>)
 8004dee:	2258      	movs	r2, #88	; 0x58
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	f04f 30ff 	mov.w	r0, #4294967295
 8004df6:	4770      	bx	lr
 8004df8:	20000264 	.word	0x20000264

08004dfc <_fstat>:
 8004dfc:	4b02      	ldr	r3, [pc, #8]	; (8004e08 <_fstat+0xc>)
 8004dfe:	2258      	movs	r2, #88	; 0x58
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	f04f 30ff 	mov.w	r0, #4294967295
 8004e06:	4770      	bx	lr
 8004e08:	20000264 	.word	0x20000264

08004e0c <_getpid>:
 8004e0c:	4b02      	ldr	r3, [pc, #8]	; (8004e18 <_getpid+0xc>)
 8004e0e:	2258      	movs	r2, #88	; 0x58
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	f04f 30ff 	mov.w	r0, #4294967295
 8004e16:	4770      	bx	lr
 8004e18:	20000264 	.word	0x20000264

08004e1c <_isatty>:
 8004e1c:	4b02      	ldr	r3, [pc, #8]	; (8004e28 <_isatty+0xc>)
 8004e1e:	2258      	movs	r2, #88	; 0x58
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	2000      	movs	r0, #0
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20000264 	.word	0x20000264

08004e2c <_kill>:
 8004e2c:	4b02      	ldr	r3, [pc, #8]	; (8004e38 <_kill+0xc>)
 8004e2e:	2258      	movs	r2, #88	; 0x58
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	f04f 30ff 	mov.w	r0, #4294967295
 8004e36:	4770      	bx	lr
 8004e38:	20000264 	.word	0x20000264

08004e3c <_lseek>:
 8004e3c:	4b02      	ldr	r3, [pc, #8]	; (8004e48 <_lseek+0xc>)
 8004e3e:	2258      	movs	r2, #88	; 0x58
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	f04f 30ff 	mov.w	r0, #4294967295
 8004e46:	4770      	bx	lr
 8004e48:	20000264 	.word	0x20000264

08004e4c <_read>:
 8004e4c:	4b02      	ldr	r3, [pc, #8]	; (8004e58 <_read+0xc>)
 8004e4e:	2258      	movs	r2, #88	; 0x58
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	f04f 30ff 	mov.w	r0, #4294967295
 8004e56:	4770      	bx	lr
 8004e58:	20000264 	.word	0x20000264

08004e5c <_sbrk>:
 8004e5c:	4b04      	ldr	r3, [pc, #16]	; (8004e70 <_sbrk+0x14>)
 8004e5e:	6819      	ldr	r1, [r3, #0]
 8004e60:	4602      	mov	r2, r0
 8004e62:	b909      	cbnz	r1, 8004e68 <_sbrk+0xc>
 8004e64:	4903      	ldr	r1, [pc, #12]	; (8004e74 <_sbrk+0x18>)
 8004e66:	6019      	str	r1, [r3, #0]
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	4402      	add	r2, r0
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	4770      	bx	lr
 8004e70:	20000200 	.word	0x20000200
 8004e74:	20000268 	.word	0x20000268

08004e78 <_exit>:
 8004e78:	e7fe      	b.n	8004e78 <_exit>
	...

08004e7c <_init>:
 8004e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7e:	bf00      	nop
 8004e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e82:	bc08      	pop	{r3}
 8004e84:	469e      	mov	lr, r3
 8004e86:	4770      	bx	lr

08004e88 <_fini>:
 8004e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8a:	bf00      	nop
 8004e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8e:	bc08      	pop	{r3}
 8004e90:	469e      	mov	lr, r3
 8004e92:	4770      	bx	lr
